Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> list
Rule 2     list -> empty
Rule 3     list -> list NEWLINE
Rule 4     list -> list defn NEWLINE
Rule 5     list -> list stmt NEWLINE
Rule 6     list -> list expr NEWLINE
Rule 7     list -> list error NEWLINE
Rule 8     list -> list COMMENT NEWLINE
Rule 9     stmt -> expr
Rule 10    stmt -> RETURN
Rule 11    stmt -> RETURN expr
Rule 12    stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT
Rule 13    stmt -> PRINT prlist
Rule 14    stmt -> WHILE LPARENT cond RPARENT stmt END
Rule 15    stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END
Rule 16    stmt -> IF LPARENT cond RPARENT stmt END
Rule 17    stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END
Rule 18    stmt -> LBRACKET stmtlist RBRACKET
Rule 19    cond -> expr
Rule 20    stmtlist -> empty
Rule 21    stmtlist -> stmtlist NEWLINE
Rule 22    stmtlist -> stmtlist stmt
Rule 23    expr -> data
Rule 24    expr -> unaryop
Rule 25    expr -> binaryop
Rule 26    expr -> LPARENT expr RPARENT
Rule 27    expr -> callfunc
Rule 28    data -> FLOAT
Rule 29    data -> constant
Rule 30    data -> ID
Rule 31    unaryop -> UNARYMINUS expr
Rule 32    unaryop -> INC ID
Rule 33    unaryop -> DEC ID
Rule 34    unaryop -> ID INC
Rule 35    unaryop -> ID DEC
Rule 36    binaryop -> asgn
Rule 37    binaryop -> mathop
Rule 38    binaryop -> logicop
Rule 39    asgn -> ID ASSIGN expr
Rule 40    asgn -> ID ADDEQ expr
Rule 41    asgn -> ID SUBEQ expr
Rule 42    asgn -> ID MULEQ expr
Rule 43    asgn -> ID DIVEQ expr
Rule 44    asgn -> ID MODEQ expr
Rule 45    mathop -> expr EXP expr
Rule 46    mathop -> expr PLUS expr
Rule 47    mathop -> expr MINUS expr
Rule 48    mathop -> expr TIMES expr
Rule 49    mathop -> expr DIVIDE expr
Rule 50    mathop -> expr MOD expr
Rule 51    logicop -> expr LT expr
Rule 52    logicop -> expr GT expr
Rule 53    logicop -> expr LE expr
Rule 54    logicop -> expr GE expr
Rule 55    logicop -> expr EQ expr
Rule 56    logicop -> expr NE expr
Rule 57    logicop -> expr OR expr
Rule 58    logicop -> expr AND expr
Rule 59    logicop -> expr NOT expr
Rule 60    callfunc -> bltin LPARENT expr RPARENT
Rule 61    callfunc -> ID LPARENT expr RPARENT
Rule 62    prlist -> expr
Rule 63    prlist -> STRING
Rule 64    prlist -> prlist COMMA expr
Rule 65    prlist -> prlist COMMA STRING
Rule 66    defn -> FUNC procname LPARENT formals RPARENT
Rule 67    defn -> PROC procname LPARENT formals RPARENT
Rule 68    formals -> ID
Rule 69    formals -> ID COMMA formals
Rule 70    procname -> FUNCTION
Rule 71    procname -> ID
Rule 72    procname -> PROCEDURE
Rule 73    procname -> bltin
Rule 74    arglist -> empty
Rule 75    arglist -> expr
Rule 76    arglist -> arglist COMMA expr
Rule 77    empty -> <empty>
Rule 78    bltin -> SIN
Rule 79    bltin -> COS
Rule 80    bltin -> TAN
Rule 81    bltin -> ASIN
Rule 82    bltin -> ACOS
Rule 83    bltin -> ATAN
Rule 84    bltin -> SINH
Rule 85    bltin -> COSH
Rule 86    bltin -> TANH
Rule 87    bltin -> INT
Rule 88    bltin -> LOG
Rule 89    bltin -> LOG10
Rule 90    bltin -> SQRT
Rule 91    bltin -> ABS
Rule 92    bltin -> ERF
Rule 93    bltin -> ERFC
Rule 94    constant -> PI
Rule 95    constant -> PHI
Rule 96    constant -> GAMMA
Rule 97    constant -> E
Rule 98    constant -> DEG
Rule 99    constant -> PREC

Terminals, with rules where they appear

ABS                  : 91
ACOS                 : 82
ADDEQ                : 40
AND                  : 58
ASIN                 : 81
ASSIGN               : 39
ATAN                 : 83
BEGIN                : 12
COMMA                : 64 65 69 76
COMMENT              : 8
COS                  : 79
COSH                 : 85
DEC                  : 33 35
DEG                  : 98
DIVEQ                : 43
DIVIDE               : 49
E                    : 97
ELSE                 : 17
END                  : 14 15 16 17 17
EQ                   : 55
ERF                  : 92
ERFC                 : 93
EXP                  : 45
FLOAT                : 28
FOR                  : 15
FUNC                 : 66
FUNCTION             : 70
GAMMA                : 96
GE                   : 54
GT                   : 52
ID                   : 30 32 33 34 35 39 40 41 42 43 44 61 68 69 71
IF                   : 16 17
INC                  : 32 34
INT                  : 87
LBRACKET             : 18
LE                   : 53
LOG                  : 88
LOG10                : 89
LPARENT              : 12 14 15 16 17 26 60 61 66 67
LT                   : 51
MINUS                : 47
MOD                  : 50
MODEQ                : 44
MULEQ                : 42
NE                   : 56
NEWLINE              : 3 4 5 6 7 8 21
NOT                  : 59
OR                   : 57
PHI                  : 95
PI                   : 94
PLUS                 : 46
PREC                 : 99
PRINT                : 13
PROC                 : 67
PROCEDURE            : 12 72
RBRACKET             : 18
RETURN               : 10 11
RPARENT              : 12 14 15 16 17 26 60 61 66 67
SEMICOLON            : 15 15
SIN                  : 78
SINH                 : 84
SQRT                 : 90
STRING               : 63 65
SUBEQ                : 41
TAN                  : 80
TANH                 : 86
TIMES                : 48
UNARYMINUS           : 31
WHILE                : 14
error                : 7

Nonterminals, with rules where they appear

arglist              : 12 76
asgn                 : 36
binaryop             : 25
bltin                : 60 73
callfunc             : 27
cond                 : 14 15 15 15 16 17
constant             : 29
data                 : 23
defn                 : 4
empty                : 2 20 74
expr                 : 6 9 11 19 26 31 39 40 41 42 43 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 61 62 64 75 76
formals              : 66 67 69
list                 : 1 3 4 5 6 7 8
logicop              : 38
mathop               : 37
prlist               : 13 64 65
procname             : 66 67
program              : 0
stmt                 : 5 14 15 16 17 17 22
stmtlist             : 18 21 22
unaryop              : 24

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . list
    (2) list -> . empty
    (3) list -> . list NEWLINE
    (4) list -> . list defn NEWLINE
    (5) list -> . list stmt NEWLINE
    (6) list -> . list expr NEWLINE
    (7) list -> . list error NEWLINE
    (8) list -> . list COMMENT NEWLINE
    (77) empty -> .

    NEWLINE         reduce using rule 77 (empty -> .)
    error           reduce using rule 77 (empty -> .)
    COMMENT         reduce using rule 77 (empty -> .)
    FUNC            reduce using rule 77 (empty -> .)
    PROC            reduce using rule 77 (empty -> .)
    RETURN          reduce using rule 77 (empty -> .)
    PROCEDURE       reduce using rule 77 (empty -> .)
    PRINT           reduce using rule 77 (empty -> .)
    WHILE           reduce using rule 77 (empty -> .)
    FOR             reduce using rule 77 (empty -> .)
    IF              reduce using rule 77 (empty -> .)
    LBRACKET        reduce using rule 77 (empty -> .)
    LPARENT         reduce using rule 77 (empty -> .)
    FLOAT           reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    UNARYMINUS      reduce using rule 77 (empty -> .)
    INC             reduce using rule 77 (empty -> .)
    DEC             reduce using rule 77 (empty -> .)
    PI              reduce using rule 77 (empty -> .)
    PHI             reduce using rule 77 (empty -> .)
    GAMMA           reduce using rule 77 (empty -> .)
    E               reduce using rule 77 (empty -> .)
    DEG             reduce using rule 77 (empty -> .)
    PREC            reduce using rule 77 (empty -> .)
    SIN             reduce using rule 77 (empty -> .)
    COS             reduce using rule 77 (empty -> .)
    TAN             reduce using rule 77 (empty -> .)
    ASIN            reduce using rule 77 (empty -> .)
    ACOS            reduce using rule 77 (empty -> .)
    ATAN            reduce using rule 77 (empty -> .)
    SINH            reduce using rule 77 (empty -> .)
    COSH            reduce using rule 77 (empty -> .)
    TANH            reduce using rule 77 (empty -> .)
    INT             reduce using rule 77 (empty -> .)
    LOG             reduce using rule 77 (empty -> .)
    LOG10           reduce using rule 77 (empty -> .)
    SQRT            reduce using rule 77 (empty -> .)
    ABS             reduce using rule 77 (empty -> .)
    ERF             reduce using rule 77 (empty -> .)
    ERFC            reduce using rule 77 (empty -> .)
    $end            reduce using rule 77 (empty -> .)

    list                           shift and go to state 1
    program                        shift and go to state 2
    empty                          shift and go to state 3

state 1

    (1) program -> list .
    (3) list -> list . NEWLINE
    (4) list -> list . defn NEWLINE
    (5) list -> list . stmt NEWLINE
    (6) list -> list . expr NEWLINE
    (7) list -> list . error NEWLINE
    (8) list -> list . COMMENT NEWLINE
    (66) defn -> . FUNC procname LPARENT formals RPARENT
    (67) defn -> . PROC procname LPARENT formals RPARENT
    (9) stmt -> . expr
    (10) stmt -> . RETURN
    (11) stmt -> . RETURN expr
    (12) stmt -> . PROCEDURE BEGIN LPARENT arglist RPARENT
    (13) stmt -> . PRINT prlist
    (14) stmt -> . WHILE LPARENT cond RPARENT stmt END
    (15) stmt -> . FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END
    (16) stmt -> . IF LPARENT cond RPARENT stmt END
    (17) stmt -> . IF LPARENT cond RPARENT stmt END ELSE stmt END
    (18) stmt -> . LBRACKET stmtlist RBRACKET
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    $end            reduce using rule 1 (program -> list .)
    NEWLINE         shift and go to state 6
    error           shift and go to state 42
    COMMENT         shift and go to state 5
    FUNC            shift and go to state 25
    PROC            shift and go to state 29
    RETURN          shift and go to state 13
    PROCEDURE       shift and go to state 10
    PRINT           shift and go to state 14
    WHILE           shift and go to state 32
    FOR             shift and go to state 23
    IF              shift and go to state 52
    LBRACKET        shift and go to state 4
    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    binaryop                       shift and go to state 41
    unaryop                        shift and go to state 37
    expr                           shift and go to state 38
    callfunc                       shift and go to state 39
    stmt                           shift and go to state 24
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    bltin                          shift and go to state 12
    logicop                        shift and go to state 46
    data                           shift and go to state 50
    defn                           shift and go to state 35

state 2

    (0) S' -> program .



state 3

    (2) list -> empty .

    NEWLINE         reduce using rule 2 (list -> empty .)
    error           reduce using rule 2 (list -> empty .)
    COMMENT         reduce using rule 2 (list -> empty .)
    FUNC            reduce using rule 2 (list -> empty .)
    PROC            reduce using rule 2 (list -> empty .)
    RETURN          reduce using rule 2 (list -> empty .)
    PROCEDURE       reduce using rule 2 (list -> empty .)
    PRINT           reduce using rule 2 (list -> empty .)
    WHILE           reduce using rule 2 (list -> empty .)
    FOR             reduce using rule 2 (list -> empty .)
    IF              reduce using rule 2 (list -> empty .)
    LBRACKET        reduce using rule 2 (list -> empty .)
    LPARENT         reduce using rule 2 (list -> empty .)
    FLOAT           reduce using rule 2 (list -> empty .)
    ID              reduce using rule 2 (list -> empty .)
    UNARYMINUS      reduce using rule 2 (list -> empty .)
    INC             reduce using rule 2 (list -> empty .)
    DEC             reduce using rule 2 (list -> empty .)
    PI              reduce using rule 2 (list -> empty .)
    PHI             reduce using rule 2 (list -> empty .)
    GAMMA           reduce using rule 2 (list -> empty .)
    E               reduce using rule 2 (list -> empty .)
    DEG             reduce using rule 2 (list -> empty .)
    PREC            reduce using rule 2 (list -> empty .)
    SIN             reduce using rule 2 (list -> empty .)
    COS             reduce using rule 2 (list -> empty .)
    TAN             reduce using rule 2 (list -> empty .)
    ASIN            reduce using rule 2 (list -> empty .)
    ACOS            reduce using rule 2 (list -> empty .)
    ATAN            reduce using rule 2 (list -> empty .)
    SINH            reduce using rule 2 (list -> empty .)
    COSH            reduce using rule 2 (list -> empty .)
    TANH            reduce using rule 2 (list -> empty .)
    INT             reduce using rule 2 (list -> empty .)
    LOG             reduce using rule 2 (list -> empty .)
    LOG10           reduce using rule 2 (list -> empty .)
    SQRT            reduce using rule 2 (list -> empty .)
    ABS             reduce using rule 2 (list -> empty .)
    ERF             reduce using rule 2 (list -> empty .)
    ERFC            reduce using rule 2 (list -> empty .)
    $end            reduce using rule 2 (list -> empty .)


state 4

    (18) stmt -> LBRACKET . stmtlist RBRACKET
    (20) stmtlist -> . empty
    (21) stmtlist -> . stmtlist NEWLINE
    (22) stmtlist -> . stmtlist stmt
    (77) empty -> .

    RBRACKET        reduce using rule 77 (empty -> .)
    NEWLINE         reduce using rule 77 (empty -> .)
    RETURN          reduce using rule 77 (empty -> .)
    PROCEDURE       reduce using rule 77 (empty -> .)
    PRINT           reduce using rule 77 (empty -> .)
    WHILE           reduce using rule 77 (empty -> .)
    FOR             reduce using rule 77 (empty -> .)
    IF              reduce using rule 77 (empty -> .)
    LBRACKET        reduce using rule 77 (empty -> .)
    LPARENT         reduce using rule 77 (empty -> .)
    FLOAT           reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    UNARYMINUS      reduce using rule 77 (empty -> .)
    INC             reduce using rule 77 (empty -> .)
    DEC             reduce using rule 77 (empty -> .)
    PI              reduce using rule 77 (empty -> .)
    PHI             reduce using rule 77 (empty -> .)
    GAMMA           reduce using rule 77 (empty -> .)
    E               reduce using rule 77 (empty -> .)
    DEG             reduce using rule 77 (empty -> .)
    PREC            reduce using rule 77 (empty -> .)
    SIN             reduce using rule 77 (empty -> .)
    COS             reduce using rule 77 (empty -> .)
    TAN             reduce using rule 77 (empty -> .)
    ASIN            reduce using rule 77 (empty -> .)
    ACOS            reduce using rule 77 (empty -> .)
    ATAN            reduce using rule 77 (empty -> .)
    SINH            reduce using rule 77 (empty -> .)
    COSH            reduce using rule 77 (empty -> .)
    TANH            reduce using rule 77 (empty -> .)
    INT             reduce using rule 77 (empty -> .)
    LOG             reduce using rule 77 (empty -> .)
    LOG10           reduce using rule 77 (empty -> .)
    SQRT            reduce using rule 77 (empty -> .)
    ABS             reduce using rule 77 (empty -> .)
    ERF             reduce using rule 77 (empty -> .)
    ERFC            reduce using rule 77 (empty -> .)

    empty                          shift and go to state 57
    stmtlist                       shift and go to state 56

state 5

    (8) list -> list COMMENT . NEWLINE

    NEWLINE         shift and go to state 58


state 6

    (3) list -> list NEWLINE .

    NEWLINE         reduce using rule 3 (list -> list NEWLINE .)
    error           reduce using rule 3 (list -> list NEWLINE .)
    COMMENT         reduce using rule 3 (list -> list NEWLINE .)
    FUNC            reduce using rule 3 (list -> list NEWLINE .)
    PROC            reduce using rule 3 (list -> list NEWLINE .)
    RETURN          reduce using rule 3 (list -> list NEWLINE .)
    PROCEDURE       reduce using rule 3 (list -> list NEWLINE .)
    PRINT           reduce using rule 3 (list -> list NEWLINE .)
    WHILE           reduce using rule 3 (list -> list NEWLINE .)
    FOR             reduce using rule 3 (list -> list NEWLINE .)
    IF              reduce using rule 3 (list -> list NEWLINE .)
    LBRACKET        reduce using rule 3 (list -> list NEWLINE .)
    LPARENT         reduce using rule 3 (list -> list NEWLINE .)
    FLOAT           reduce using rule 3 (list -> list NEWLINE .)
    ID              reduce using rule 3 (list -> list NEWLINE .)
    UNARYMINUS      reduce using rule 3 (list -> list NEWLINE .)
    INC             reduce using rule 3 (list -> list NEWLINE .)
    DEC             reduce using rule 3 (list -> list NEWLINE .)
    PI              reduce using rule 3 (list -> list NEWLINE .)
    PHI             reduce using rule 3 (list -> list NEWLINE .)
    GAMMA           reduce using rule 3 (list -> list NEWLINE .)
    E               reduce using rule 3 (list -> list NEWLINE .)
    DEG             reduce using rule 3 (list -> list NEWLINE .)
    PREC            reduce using rule 3 (list -> list NEWLINE .)
    SIN             reduce using rule 3 (list -> list NEWLINE .)
    COS             reduce using rule 3 (list -> list NEWLINE .)
    TAN             reduce using rule 3 (list -> list NEWLINE .)
    ASIN            reduce using rule 3 (list -> list NEWLINE .)
    ACOS            reduce using rule 3 (list -> list NEWLINE .)
    ATAN            reduce using rule 3 (list -> list NEWLINE .)
    SINH            reduce using rule 3 (list -> list NEWLINE .)
    COSH            reduce using rule 3 (list -> list NEWLINE .)
    TANH            reduce using rule 3 (list -> list NEWLINE .)
    INT             reduce using rule 3 (list -> list NEWLINE .)
    LOG             reduce using rule 3 (list -> list NEWLINE .)
    LOG10           reduce using rule 3 (list -> list NEWLINE .)
    SQRT            reduce using rule 3 (list -> list NEWLINE .)
    ABS             reduce using rule 3 (list -> list NEWLINE .)
    ERF             reduce using rule 3 (list -> list NEWLINE .)
    ERFC            reduce using rule 3 (list -> list NEWLINE .)
    $end            reduce using rule 3 (list -> list NEWLINE .)


state 7

    (36) binaryop -> asgn .

    EXP             reduce using rule 36 (binaryop -> asgn .)
    PLUS            reduce using rule 36 (binaryop -> asgn .)
    MINUS           reduce using rule 36 (binaryop -> asgn .)
    TIMES           reduce using rule 36 (binaryop -> asgn .)
    DIVIDE          reduce using rule 36 (binaryop -> asgn .)
    MOD             reduce using rule 36 (binaryop -> asgn .)
    LT              reduce using rule 36 (binaryop -> asgn .)
    GT              reduce using rule 36 (binaryop -> asgn .)
    LE              reduce using rule 36 (binaryop -> asgn .)
    GE              reduce using rule 36 (binaryop -> asgn .)
    EQ              reduce using rule 36 (binaryop -> asgn .)
    NE              reduce using rule 36 (binaryop -> asgn .)
    OR              reduce using rule 36 (binaryop -> asgn .)
    AND             reduce using rule 36 (binaryop -> asgn .)
    NOT             reduce using rule 36 (binaryop -> asgn .)
    NEWLINE         reduce using rule 36 (binaryop -> asgn .)
    RBRACKET        reduce using rule 36 (binaryop -> asgn .)
    RETURN          reduce using rule 36 (binaryop -> asgn .)
    PROCEDURE       reduce using rule 36 (binaryop -> asgn .)
    PRINT           reduce using rule 36 (binaryop -> asgn .)
    WHILE           reduce using rule 36 (binaryop -> asgn .)
    FOR             reduce using rule 36 (binaryop -> asgn .)
    IF              reduce using rule 36 (binaryop -> asgn .)
    LBRACKET        reduce using rule 36 (binaryop -> asgn .)
    LPARENT         reduce using rule 36 (binaryop -> asgn .)
    FLOAT           reduce using rule 36 (binaryop -> asgn .)
    ID              reduce using rule 36 (binaryop -> asgn .)
    UNARYMINUS      reduce using rule 36 (binaryop -> asgn .)
    INC             reduce using rule 36 (binaryop -> asgn .)
    DEC             reduce using rule 36 (binaryop -> asgn .)
    PI              reduce using rule 36 (binaryop -> asgn .)
    PHI             reduce using rule 36 (binaryop -> asgn .)
    GAMMA           reduce using rule 36 (binaryop -> asgn .)
    E               reduce using rule 36 (binaryop -> asgn .)
    DEG             reduce using rule 36 (binaryop -> asgn .)
    PREC            reduce using rule 36 (binaryop -> asgn .)
    SIN             reduce using rule 36 (binaryop -> asgn .)
    COS             reduce using rule 36 (binaryop -> asgn .)
    TAN             reduce using rule 36 (binaryop -> asgn .)
    ASIN            reduce using rule 36 (binaryop -> asgn .)
    ACOS            reduce using rule 36 (binaryop -> asgn .)
    ATAN            reduce using rule 36 (binaryop -> asgn .)
    SINH            reduce using rule 36 (binaryop -> asgn .)
    COSH            reduce using rule 36 (binaryop -> asgn .)
    TANH            reduce using rule 36 (binaryop -> asgn .)
    INT             reduce using rule 36 (binaryop -> asgn .)
    LOG             reduce using rule 36 (binaryop -> asgn .)
    LOG10           reduce using rule 36 (binaryop -> asgn .)
    SQRT            reduce using rule 36 (binaryop -> asgn .)
    ABS             reduce using rule 36 (binaryop -> asgn .)
    ERF             reduce using rule 36 (binaryop -> asgn .)
    ERFC            reduce using rule 36 (binaryop -> asgn .)
    END             reduce using rule 36 (binaryop -> asgn .)
    COMMA           reduce using rule 36 (binaryop -> asgn .)
    RPARENT         reduce using rule 36 (binaryop -> asgn .)
    SEMICOLON       reduce using rule 36 (binaryop -> asgn .)


state 8

    (80) bltin -> TAN .

    LPARENT         reduce using rule 80 (bltin -> TAN .)


state 9

    (83) bltin -> ATAN .

    LPARENT         reduce using rule 83 (bltin -> ATAN .)


state 10

    (12) stmt -> PROCEDURE . BEGIN LPARENT arglist RPARENT

    BEGIN           shift and go to state 59


state 11

    (95) constant -> PHI .

    EXP             reduce using rule 95 (constant -> PHI .)
    PLUS            reduce using rule 95 (constant -> PHI .)
    MINUS           reduce using rule 95 (constant -> PHI .)
    TIMES           reduce using rule 95 (constant -> PHI .)
    DIVIDE          reduce using rule 95 (constant -> PHI .)
    MOD             reduce using rule 95 (constant -> PHI .)
    LT              reduce using rule 95 (constant -> PHI .)
    GT              reduce using rule 95 (constant -> PHI .)
    LE              reduce using rule 95 (constant -> PHI .)
    GE              reduce using rule 95 (constant -> PHI .)
    EQ              reduce using rule 95 (constant -> PHI .)
    NE              reduce using rule 95 (constant -> PHI .)
    OR              reduce using rule 95 (constant -> PHI .)
    AND             reduce using rule 95 (constant -> PHI .)
    NOT             reduce using rule 95 (constant -> PHI .)
    RPARENT         reduce using rule 95 (constant -> PHI .)
    NEWLINE         reduce using rule 95 (constant -> PHI .)
    RBRACKET        reduce using rule 95 (constant -> PHI .)
    RETURN          reduce using rule 95 (constant -> PHI .)
    PROCEDURE       reduce using rule 95 (constant -> PHI .)
    PRINT           reduce using rule 95 (constant -> PHI .)
    WHILE           reduce using rule 95 (constant -> PHI .)
    FOR             reduce using rule 95 (constant -> PHI .)
    IF              reduce using rule 95 (constant -> PHI .)
    LBRACKET        reduce using rule 95 (constant -> PHI .)
    LPARENT         reduce using rule 95 (constant -> PHI .)
    FLOAT           reduce using rule 95 (constant -> PHI .)
    ID              reduce using rule 95 (constant -> PHI .)
    UNARYMINUS      reduce using rule 95 (constant -> PHI .)
    INC             reduce using rule 95 (constant -> PHI .)
    DEC             reduce using rule 95 (constant -> PHI .)
    PI              reduce using rule 95 (constant -> PHI .)
    PHI             reduce using rule 95 (constant -> PHI .)
    GAMMA           reduce using rule 95 (constant -> PHI .)
    E               reduce using rule 95 (constant -> PHI .)
    DEG             reduce using rule 95 (constant -> PHI .)
    PREC            reduce using rule 95 (constant -> PHI .)
    SIN             reduce using rule 95 (constant -> PHI .)
    COS             reduce using rule 95 (constant -> PHI .)
    TAN             reduce using rule 95 (constant -> PHI .)
    ASIN            reduce using rule 95 (constant -> PHI .)
    ACOS            reduce using rule 95 (constant -> PHI .)
    ATAN            reduce using rule 95 (constant -> PHI .)
    SINH            reduce using rule 95 (constant -> PHI .)
    COSH            reduce using rule 95 (constant -> PHI .)
    TANH            reduce using rule 95 (constant -> PHI .)
    INT             reduce using rule 95 (constant -> PHI .)
    LOG             reduce using rule 95 (constant -> PHI .)
    LOG10           reduce using rule 95 (constant -> PHI .)
    SQRT            reduce using rule 95 (constant -> PHI .)
    ABS             reduce using rule 95 (constant -> PHI .)
    ERF             reduce using rule 95 (constant -> PHI .)
    ERFC            reduce using rule 95 (constant -> PHI .)
    END             reduce using rule 95 (constant -> PHI .)
    COMMA           reduce using rule 95 (constant -> PHI .)
    SEMICOLON       reduce using rule 95 (constant -> PHI .)


state 12

    (60) callfunc -> bltin . LPARENT expr RPARENT

    LPARENT         shift and go to state 60


state 13

    (10) stmt -> RETURN .
    (11) stmt -> RETURN . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

  ! shift/reduce conflict for LPARENT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for UNARYMINUS resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for PI resolved as shift
  ! shift/reduce conflict for PHI resolved as shift
  ! shift/reduce conflict for GAMMA resolved as shift
  ! shift/reduce conflict for E resolved as shift
  ! shift/reduce conflict for DEG resolved as shift
  ! shift/reduce conflict for PREC resolved as shift
  ! shift/reduce conflict for SIN resolved as shift
  ! shift/reduce conflict for COS resolved as shift
  ! shift/reduce conflict for TAN resolved as shift
  ! shift/reduce conflict for ASIN resolved as shift
  ! shift/reduce conflict for ACOS resolved as shift
  ! shift/reduce conflict for ATAN resolved as shift
  ! shift/reduce conflict for SINH resolved as shift
  ! shift/reduce conflict for COSH resolved as shift
  ! shift/reduce conflict for TANH resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for LOG resolved as shift
  ! shift/reduce conflict for LOG10 resolved as shift
  ! shift/reduce conflict for SQRT resolved as shift
  ! shift/reduce conflict for ABS resolved as shift
  ! shift/reduce conflict for ERF resolved as shift
  ! shift/reduce conflict for ERFC resolved as shift
    END             reduce using rule 10 (stmt -> RETURN .)
    NEWLINE         reduce using rule 10 (stmt -> RETURN .)
    RBRACKET        reduce using rule 10 (stmt -> RETURN .)
    RETURN          reduce using rule 10 (stmt -> RETURN .)
    PROCEDURE       reduce using rule 10 (stmt -> RETURN .)
    PRINT           reduce using rule 10 (stmt -> RETURN .)
    WHILE           reduce using rule 10 (stmt -> RETURN .)
    FOR             reduce using rule 10 (stmt -> RETURN .)
    IF              reduce using rule 10 (stmt -> RETURN .)
    LBRACKET        reduce using rule 10 (stmt -> RETURN .)
    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

  ! LPARENT         [ reduce using rule 10 (stmt -> RETURN .) ]
  ! FLOAT           [ reduce using rule 10 (stmt -> RETURN .) ]
  ! ID              [ reduce using rule 10 (stmt -> RETURN .) ]
  ! UNARYMINUS      [ reduce using rule 10 (stmt -> RETURN .) ]
  ! INC             [ reduce using rule 10 (stmt -> RETURN .) ]
  ! DEC             [ reduce using rule 10 (stmt -> RETURN .) ]
  ! PI              [ reduce using rule 10 (stmt -> RETURN .) ]
  ! PHI             [ reduce using rule 10 (stmt -> RETURN .) ]
  ! GAMMA           [ reduce using rule 10 (stmt -> RETURN .) ]
  ! E               [ reduce using rule 10 (stmt -> RETURN .) ]
  ! DEG             [ reduce using rule 10 (stmt -> RETURN .) ]
  ! PREC            [ reduce using rule 10 (stmt -> RETURN .) ]
  ! SIN             [ reduce using rule 10 (stmt -> RETURN .) ]
  ! COS             [ reduce using rule 10 (stmt -> RETURN .) ]
  ! TAN             [ reduce using rule 10 (stmt -> RETURN .) ]
  ! ASIN            [ reduce using rule 10 (stmt -> RETURN .) ]
  ! ACOS            [ reduce using rule 10 (stmt -> RETURN .) ]
  ! ATAN            [ reduce using rule 10 (stmt -> RETURN .) ]
  ! SINH            [ reduce using rule 10 (stmt -> RETURN .) ]
  ! COSH            [ reduce using rule 10 (stmt -> RETURN .) ]
  ! TANH            [ reduce using rule 10 (stmt -> RETURN .) ]
  ! INT             [ reduce using rule 10 (stmt -> RETURN .) ]
  ! LOG             [ reduce using rule 10 (stmt -> RETURN .) ]
  ! LOG10           [ reduce using rule 10 (stmt -> RETURN .) ]
  ! SQRT            [ reduce using rule 10 (stmt -> RETURN .) ]
  ! ABS             [ reduce using rule 10 (stmt -> RETURN .) ]
  ! ERF             [ reduce using rule 10 (stmt -> RETURN .) ]
  ! ERFC            [ reduce using rule 10 (stmt -> RETURN .) ]

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 61
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 14

    (13) stmt -> PRINT . prlist
    (62) prlist -> . expr
    (63) prlist -> . STRING
    (64) prlist -> . prlist COMMA expr
    (65) prlist -> . prlist COMMA STRING
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    STRING          shift and go to state 62
    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 63
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    prlist                         shift and go to state 64
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 15

    (96) constant -> GAMMA .

    EXP             reduce using rule 96 (constant -> GAMMA .)
    PLUS            reduce using rule 96 (constant -> GAMMA .)
    MINUS           reduce using rule 96 (constant -> GAMMA .)
    TIMES           reduce using rule 96 (constant -> GAMMA .)
    DIVIDE          reduce using rule 96 (constant -> GAMMA .)
    MOD             reduce using rule 96 (constant -> GAMMA .)
    LT              reduce using rule 96 (constant -> GAMMA .)
    GT              reduce using rule 96 (constant -> GAMMA .)
    LE              reduce using rule 96 (constant -> GAMMA .)
    GE              reduce using rule 96 (constant -> GAMMA .)
    EQ              reduce using rule 96 (constant -> GAMMA .)
    NE              reduce using rule 96 (constant -> GAMMA .)
    OR              reduce using rule 96 (constant -> GAMMA .)
    AND             reduce using rule 96 (constant -> GAMMA .)
    NOT             reduce using rule 96 (constant -> GAMMA .)
    RPARENT         reduce using rule 96 (constant -> GAMMA .)
    NEWLINE         reduce using rule 96 (constant -> GAMMA .)
    RBRACKET        reduce using rule 96 (constant -> GAMMA .)
    RETURN          reduce using rule 96 (constant -> GAMMA .)
    PROCEDURE       reduce using rule 96 (constant -> GAMMA .)
    PRINT           reduce using rule 96 (constant -> GAMMA .)
    WHILE           reduce using rule 96 (constant -> GAMMA .)
    FOR             reduce using rule 96 (constant -> GAMMA .)
    IF              reduce using rule 96 (constant -> GAMMA .)
    LBRACKET        reduce using rule 96 (constant -> GAMMA .)
    LPARENT         reduce using rule 96 (constant -> GAMMA .)
    FLOAT           reduce using rule 96 (constant -> GAMMA .)
    ID              reduce using rule 96 (constant -> GAMMA .)
    UNARYMINUS      reduce using rule 96 (constant -> GAMMA .)
    INC             reduce using rule 96 (constant -> GAMMA .)
    DEC             reduce using rule 96 (constant -> GAMMA .)
    PI              reduce using rule 96 (constant -> GAMMA .)
    PHI             reduce using rule 96 (constant -> GAMMA .)
    GAMMA           reduce using rule 96 (constant -> GAMMA .)
    E               reduce using rule 96 (constant -> GAMMA .)
    DEG             reduce using rule 96 (constant -> GAMMA .)
    PREC            reduce using rule 96 (constant -> GAMMA .)
    SIN             reduce using rule 96 (constant -> GAMMA .)
    COS             reduce using rule 96 (constant -> GAMMA .)
    TAN             reduce using rule 96 (constant -> GAMMA .)
    ASIN            reduce using rule 96 (constant -> GAMMA .)
    ACOS            reduce using rule 96 (constant -> GAMMA .)
    ATAN            reduce using rule 96 (constant -> GAMMA .)
    SINH            reduce using rule 96 (constant -> GAMMA .)
    COSH            reduce using rule 96 (constant -> GAMMA .)
    TANH            reduce using rule 96 (constant -> GAMMA .)
    INT             reduce using rule 96 (constant -> GAMMA .)
    LOG             reduce using rule 96 (constant -> GAMMA .)
    LOG10           reduce using rule 96 (constant -> GAMMA .)
    SQRT            reduce using rule 96 (constant -> GAMMA .)
    ABS             reduce using rule 96 (constant -> GAMMA .)
    ERF             reduce using rule 96 (constant -> GAMMA .)
    ERFC            reduce using rule 96 (constant -> GAMMA .)
    END             reduce using rule 96 (constant -> GAMMA .)
    COMMA           reduce using rule 96 (constant -> GAMMA .)
    SEMICOLON       reduce using rule 96 (constant -> GAMMA .)


state 16

    (98) constant -> DEG .

    EXP             reduce using rule 98 (constant -> DEG .)
    PLUS            reduce using rule 98 (constant -> DEG .)
    MINUS           reduce using rule 98 (constant -> DEG .)
    TIMES           reduce using rule 98 (constant -> DEG .)
    DIVIDE          reduce using rule 98 (constant -> DEG .)
    MOD             reduce using rule 98 (constant -> DEG .)
    LT              reduce using rule 98 (constant -> DEG .)
    GT              reduce using rule 98 (constant -> DEG .)
    LE              reduce using rule 98 (constant -> DEG .)
    GE              reduce using rule 98 (constant -> DEG .)
    EQ              reduce using rule 98 (constant -> DEG .)
    NE              reduce using rule 98 (constant -> DEG .)
    OR              reduce using rule 98 (constant -> DEG .)
    AND             reduce using rule 98 (constant -> DEG .)
    NOT             reduce using rule 98 (constant -> DEG .)
    RPARENT         reduce using rule 98 (constant -> DEG .)
    NEWLINE         reduce using rule 98 (constant -> DEG .)
    RBRACKET        reduce using rule 98 (constant -> DEG .)
    RETURN          reduce using rule 98 (constant -> DEG .)
    PROCEDURE       reduce using rule 98 (constant -> DEG .)
    PRINT           reduce using rule 98 (constant -> DEG .)
    WHILE           reduce using rule 98 (constant -> DEG .)
    FOR             reduce using rule 98 (constant -> DEG .)
    IF              reduce using rule 98 (constant -> DEG .)
    LBRACKET        reduce using rule 98 (constant -> DEG .)
    LPARENT         reduce using rule 98 (constant -> DEG .)
    FLOAT           reduce using rule 98 (constant -> DEG .)
    ID              reduce using rule 98 (constant -> DEG .)
    UNARYMINUS      reduce using rule 98 (constant -> DEG .)
    INC             reduce using rule 98 (constant -> DEG .)
    DEC             reduce using rule 98 (constant -> DEG .)
    PI              reduce using rule 98 (constant -> DEG .)
    PHI             reduce using rule 98 (constant -> DEG .)
    GAMMA           reduce using rule 98 (constant -> DEG .)
    E               reduce using rule 98 (constant -> DEG .)
    DEG             reduce using rule 98 (constant -> DEG .)
    PREC            reduce using rule 98 (constant -> DEG .)
    SIN             reduce using rule 98 (constant -> DEG .)
    COS             reduce using rule 98 (constant -> DEG .)
    TAN             reduce using rule 98 (constant -> DEG .)
    ASIN            reduce using rule 98 (constant -> DEG .)
    ACOS            reduce using rule 98 (constant -> DEG .)
    ATAN            reduce using rule 98 (constant -> DEG .)
    SINH            reduce using rule 98 (constant -> DEG .)
    COSH            reduce using rule 98 (constant -> DEG .)
    TANH            reduce using rule 98 (constant -> DEG .)
    INT             reduce using rule 98 (constant -> DEG .)
    LOG             reduce using rule 98 (constant -> DEG .)
    LOG10           reduce using rule 98 (constant -> DEG .)
    SQRT            reduce using rule 98 (constant -> DEG .)
    ABS             reduce using rule 98 (constant -> DEG .)
    ERF             reduce using rule 98 (constant -> DEG .)
    ERFC            reduce using rule 98 (constant -> DEG .)
    END             reduce using rule 98 (constant -> DEG .)
    COMMA           reduce using rule 98 (constant -> DEG .)
    SEMICOLON       reduce using rule 98 (constant -> DEG .)


state 17

    (86) bltin -> TANH .

    LPARENT         reduce using rule 86 (bltin -> TANH .)


state 18

    (78) bltin -> SIN .

    LPARENT         reduce using rule 78 (bltin -> SIN .)


state 19

    (93) bltin -> ERFC .

    LPARENT         reduce using rule 93 (bltin -> ERFC .)


state 20

    (82) bltin -> ACOS .

    LPARENT         reduce using rule 82 (bltin -> ACOS .)


state 21

    (94) constant -> PI .

    EXP             reduce using rule 94 (constant -> PI .)
    PLUS            reduce using rule 94 (constant -> PI .)
    MINUS           reduce using rule 94 (constant -> PI .)
    TIMES           reduce using rule 94 (constant -> PI .)
    DIVIDE          reduce using rule 94 (constant -> PI .)
    MOD             reduce using rule 94 (constant -> PI .)
    LT              reduce using rule 94 (constant -> PI .)
    GT              reduce using rule 94 (constant -> PI .)
    LE              reduce using rule 94 (constant -> PI .)
    GE              reduce using rule 94 (constant -> PI .)
    EQ              reduce using rule 94 (constant -> PI .)
    NE              reduce using rule 94 (constant -> PI .)
    OR              reduce using rule 94 (constant -> PI .)
    AND             reduce using rule 94 (constant -> PI .)
    NOT             reduce using rule 94 (constant -> PI .)
    RPARENT         reduce using rule 94 (constant -> PI .)
    NEWLINE         reduce using rule 94 (constant -> PI .)
    RBRACKET        reduce using rule 94 (constant -> PI .)
    RETURN          reduce using rule 94 (constant -> PI .)
    PROCEDURE       reduce using rule 94 (constant -> PI .)
    PRINT           reduce using rule 94 (constant -> PI .)
    WHILE           reduce using rule 94 (constant -> PI .)
    FOR             reduce using rule 94 (constant -> PI .)
    IF              reduce using rule 94 (constant -> PI .)
    LBRACKET        reduce using rule 94 (constant -> PI .)
    LPARENT         reduce using rule 94 (constant -> PI .)
    FLOAT           reduce using rule 94 (constant -> PI .)
    ID              reduce using rule 94 (constant -> PI .)
    UNARYMINUS      reduce using rule 94 (constant -> PI .)
    INC             reduce using rule 94 (constant -> PI .)
    DEC             reduce using rule 94 (constant -> PI .)
    PI              reduce using rule 94 (constant -> PI .)
    PHI             reduce using rule 94 (constant -> PI .)
    GAMMA           reduce using rule 94 (constant -> PI .)
    E               reduce using rule 94 (constant -> PI .)
    DEG             reduce using rule 94 (constant -> PI .)
    PREC            reduce using rule 94 (constant -> PI .)
    SIN             reduce using rule 94 (constant -> PI .)
    COS             reduce using rule 94 (constant -> PI .)
    TAN             reduce using rule 94 (constant -> PI .)
    ASIN            reduce using rule 94 (constant -> PI .)
    ACOS            reduce using rule 94 (constant -> PI .)
    ATAN            reduce using rule 94 (constant -> PI .)
    SINH            reduce using rule 94 (constant -> PI .)
    COSH            reduce using rule 94 (constant -> PI .)
    TANH            reduce using rule 94 (constant -> PI .)
    INT             reduce using rule 94 (constant -> PI .)
    LOG             reduce using rule 94 (constant -> PI .)
    LOG10           reduce using rule 94 (constant -> PI .)
    SQRT            reduce using rule 94 (constant -> PI .)
    ABS             reduce using rule 94 (constant -> PI .)
    ERF             reduce using rule 94 (constant -> PI .)
    ERFC            reduce using rule 94 (constant -> PI .)
    END             reduce using rule 94 (constant -> PI .)
    COMMA           reduce using rule 94 (constant -> PI .)
    SEMICOLON       reduce using rule 94 (constant -> PI .)


state 22

    (31) unaryop -> UNARYMINUS . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 65
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 23

    (15) stmt -> FOR . LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END

    LPARENT         shift and go to state 66


state 24

    (5) list -> list stmt . NEWLINE

    NEWLINE         shift and go to state 67


state 25

    (66) defn -> FUNC . procname LPARENT formals RPARENT
    (70) procname -> . FUNCTION
    (71) procname -> . ID
    (72) procname -> . PROCEDURE
    (73) procname -> . bltin
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    FUNCTION        shift and go to state 69
    ID              shift and go to state 68
    PROCEDURE       shift and go to state 70
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    procname                       shift and go to state 72
    bltin                          shift and go to state 71

state 26

    (33) unaryop -> DEC . ID

    ID              shift and go to state 73


state 27

    (87) bltin -> INT .

    LPARENT         reduce using rule 87 (bltin -> INT .)


state 28

    (37) binaryop -> mathop .

    EXP             reduce using rule 37 (binaryop -> mathop .)
    PLUS            reduce using rule 37 (binaryop -> mathop .)
    MINUS           reduce using rule 37 (binaryop -> mathop .)
    TIMES           reduce using rule 37 (binaryop -> mathop .)
    DIVIDE          reduce using rule 37 (binaryop -> mathop .)
    MOD             reduce using rule 37 (binaryop -> mathop .)
    LT              reduce using rule 37 (binaryop -> mathop .)
    GT              reduce using rule 37 (binaryop -> mathop .)
    LE              reduce using rule 37 (binaryop -> mathop .)
    GE              reduce using rule 37 (binaryop -> mathop .)
    EQ              reduce using rule 37 (binaryop -> mathop .)
    NE              reduce using rule 37 (binaryop -> mathop .)
    OR              reduce using rule 37 (binaryop -> mathop .)
    AND             reduce using rule 37 (binaryop -> mathop .)
    NOT             reduce using rule 37 (binaryop -> mathop .)
    NEWLINE         reduce using rule 37 (binaryop -> mathop .)
    RBRACKET        reduce using rule 37 (binaryop -> mathop .)
    RETURN          reduce using rule 37 (binaryop -> mathop .)
    PROCEDURE       reduce using rule 37 (binaryop -> mathop .)
    PRINT           reduce using rule 37 (binaryop -> mathop .)
    WHILE           reduce using rule 37 (binaryop -> mathop .)
    FOR             reduce using rule 37 (binaryop -> mathop .)
    IF              reduce using rule 37 (binaryop -> mathop .)
    LBRACKET        reduce using rule 37 (binaryop -> mathop .)
    LPARENT         reduce using rule 37 (binaryop -> mathop .)
    FLOAT           reduce using rule 37 (binaryop -> mathop .)
    ID              reduce using rule 37 (binaryop -> mathop .)
    UNARYMINUS      reduce using rule 37 (binaryop -> mathop .)
    INC             reduce using rule 37 (binaryop -> mathop .)
    DEC             reduce using rule 37 (binaryop -> mathop .)
    PI              reduce using rule 37 (binaryop -> mathop .)
    PHI             reduce using rule 37 (binaryop -> mathop .)
    GAMMA           reduce using rule 37 (binaryop -> mathop .)
    E               reduce using rule 37 (binaryop -> mathop .)
    DEG             reduce using rule 37 (binaryop -> mathop .)
    PREC            reduce using rule 37 (binaryop -> mathop .)
    SIN             reduce using rule 37 (binaryop -> mathop .)
    COS             reduce using rule 37 (binaryop -> mathop .)
    TAN             reduce using rule 37 (binaryop -> mathop .)
    ASIN            reduce using rule 37 (binaryop -> mathop .)
    ACOS            reduce using rule 37 (binaryop -> mathop .)
    ATAN            reduce using rule 37 (binaryop -> mathop .)
    SINH            reduce using rule 37 (binaryop -> mathop .)
    COSH            reduce using rule 37 (binaryop -> mathop .)
    TANH            reduce using rule 37 (binaryop -> mathop .)
    INT             reduce using rule 37 (binaryop -> mathop .)
    LOG             reduce using rule 37 (binaryop -> mathop .)
    LOG10           reduce using rule 37 (binaryop -> mathop .)
    SQRT            reduce using rule 37 (binaryop -> mathop .)
    ABS             reduce using rule 37 (binaryop -> mathop .)
    ERF             reduce using rule 37 (binaryop -> mathop .)
    ERFC            reduce using rule 37 (binaryop -> mathop .)
    END             reduce using rule 37 (binaryop -> mathop .)
    COMMA           reduce using rule 37 (binaryop -> mathop .)
    RPARENT         reduce using rule 37 (binaryop -> mathop .)
    SEMICOLON       reduce using rule 37 (binaryop -> mathop .)


state 29

    (67) defn -> PROC . procname LPARENT formals RPARENT
    (70) procname -> . FUNCTION
    (71) procname -> . ID
    (72) procname -> . PROCEDURE
    (73) procname -> . bltin
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    FUNCTION        shift and go to state 69
    ID              shift and go to state 68
    PROCEDURE       shift and go to state 70
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    procname                       shift and go to state 74
    bltin                          shift and go to state 71

state 30

    (79) bltin -> COS .

    LPARENT         reduce using rule 79 (bltin -> COS .)


state 31

    (85) bltin -> COSH .

    LPARENT         reduce using rule 85 (bltin -> COSH .)


state 32

    (14) stmt -> WHILE . LPARENT cond RPARENT stmt END

    LPARENT         shift and go to state 75


state 33

    (89) bltin -> LOG10 .

    LPARENT         reduce using rule 89 (bltin -> LOG10 .)


state 34

    (26) expr -> LPARENT . expr RPARENT
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 76
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 35

    (4) list -> list defn . NEWLINE

    NEWLINE         shift and go to state 77


state 36

    (84) bltin -> SINH .

    LPARENT         reduce using rule 84 (bltin -> SINH .)


state 37

    (24) expr -> unaryop .

    EXP             reduce using rule 24 (expr -> unaryop .)
    PLUS            reduce using rule 24 (expr -> unaryop .)
    MINUS           reduce using rule 24 (expr -> unaryop .)
    TIMES           reduce using rule 24 (expr -> unaryop .)
    DIVIDE          reduce using rule 24 (expr -> unaryop .)
    MOD             reduce using rule 24 (expr -> unaryop .)
    LT              reduce using rule 24 (expr -> unaryop .)
    GT              reduce using rule 24 (expr -> unaryop .)
    LE              reduce using rule 24 (expr -> unaryop .)
    GE              reduce using rule 24 (expr -> unaryop .)
    EQ              reduce using rule 24 (expr -> unaryop .)
    NE              reduce using rule 24 (expr -> unaryop .)
    OR              reduce using rule 24 (expr -> unaryop .)
    AND             reduce using rule 24 (expr -> unaryop .)
    NOT             reduce using rule 24 (expr -> unaryop .)
    NEWLINE         reduce using rule 24 (expr -> unaryop .)
    RBRACKET        reduce using rule 24 (expr -> unaryop .)
    RETURN          reduce using rule 24 (expr -> unaryop .)
    PROCEDURE       reduce using rule 24 (expr -> unaryop .)
    PRINT           reduce using rule 24 (expr -> unaryop .)
    WHILE           reduce using rule 24 (expr -> unaryop .)
    FOR             reduce using rule 24 (expr -> unaryop .)
    IF              reduce using rule 24 (expr -> unaryop .)
    LBRACKET        reduce using rule 24 (expr -> unaryop .)
    LPARENT         reduce using rule 24 (expr -> unaryop .)
    FLOAT           reduce using rule 24 (expr -> unaryop .)
    ID              reduce using rule 24 (expr -> unaryop .)
    UNARYMINUS      reduce using rule 24 (expr -> unaryop .)
    INC             reduce using rule 24 (expr -> unaryop .)
    DEC             reduce using rule 24 (expr -> unaryop .)
    PI              reduce using rule 24 (expr -> unaryop .)
    PHI             reduce using rule 24 (expr -> unaryop .)
    GAMMA           reduce using rule 24 (expr -> unaryop .)
    E               reduce using rule 24 (expr -> unaryop .)
    DEG             reduce using rule 24 (expr -> unaryop .)
    PREC            reduce using rule 24 (expr -> unaryop .)
    SIN             reduce using rule 24 (expr -> unaryop .)
    COS             reduce using rule 24 (expr -> unaryop .)
    TAN             reduce using rule 24 (expr -> unaryop .)
    ASIN            reduce using rule 24 (expr -> unaryop .)
    ACOS            reduce using rule 24 (expr -> unaryop .)
    ATAN            reduce using rule 24 (expr -> unaryop .)
    SINH            reduce using rule 24 (expr -> unaryop .)
    COSH            reduce using rule 24 (expr -> unaryop .)
    TANH            reduce using rule 24 (expr -> unaryop .)
    INT             reduce using rule 24 (expr -> unaryop .)
    LOG             reduce using rule 24 (expr -> unaryop .)
    LOG10           reduce using rule 24 (expr -> unaryop .)
    SQRT            reduce using rule 24 (expr -> unaryop .)
    ABS             reduce using rule 24 (expr -> unaryop .)
    ERF             reduce using rule 24 (expr -> unaryop .)
    ERFC            reduce using rule 24 (expr -> unaryop .)
    END             reduce using rule 24 (expr -> unaryop .)
    COMMA           reduce using rule 24 (expr -> unaryop .)
    RPARENT         reduce using rule 24 (expr -> unaryop .)
    SEMICOLON       reduce using rule 24 (expr -> unaryop .)


state 38

    (6) list -> list expr . NEWLINE
    (9) stmt -> expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 82
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89

  ! NEWLINE         [ reduce using rule 9 (stmt -> expr .) ]


state 39

    (27) expr -> callfunc .

    EXP             reduce using rule 27 (expr -> callfunc .)
    PLUS            reduce using rule 27 (expr -> callfunc .)
    MINUS           reduce using rule 27 (expr -> callfunc .)
    TIMES           reduce using rule 27 (expr -> callfunc .)
    DIVIDE          reduce using rule 27 (expr -> callfunc .)
    MOD             reduce using rule 27 (expr -> callfunc .)
    LT              reduce using rule 27 (expr -> callfunc .)
    GT              reduce using rule 27 (expr -> callfunc .)
    LE              reduce using rule 27 (expr -> callfunc .)
    GE              reduce using rule 27 (expr -> callfunc .)
    EQ              reduce using rule 27 (expr -> callfunc .)
    NE              reduce using rule 27 (expr -> callfunc .)
    OR              reduce using rule 27 (expr -> callfunc .)
    AND             reduce using rule 27 (expr -> callfunc .)
    NOT             reduce using rule 27 (expr -> callfunc .)
    NEWLINE         reduce using rule 27 (expr -> callfunc .)
    RBRACKET        reduce using rule 27 (expr -> callfunc .)
    RETURN          reduce using rule 27 (expr -> callfunc .)
    PROCEDURE       reduce using rule 27 (expr -> callfunc .)
    PRINT           reduce using rule 27 (expr -> callfunc .)
    WHILE           reduce using rule 27 (expr -> callfunc .)
    FOR             reduce using rule 27 (expr -> callfunc .)
    IF              reduce using rule 27 (expr -> callfunc .)
    LBRACKET        reduce using rule 27 (expr -> callfunc .)
    LPARENT         reduce using rule 27 (expr -> callfunc .)
    FLOAT           reduce using rule 27 (expr -> callfunc .)
    ID              reduce using rule 27 (expr -> callfunc .)
    UNARYMINUS      reduce using rule 27 (expr -> callfunc .)
    INC             reduce using rule 27 (expr -> callfunc .)
    DEC             reduce using rule 27 (expr -> callfunc .)
    PI              reduce using rule 27 (expr -> callfunc .)
    PHI             reduce using rule 27 (expr -> callfunc .)
    GAMMA           reduce using rule 27 (expr -> callfunc .)
    E               reduce using rule 27 (expr -> callfunc .)
    DEG             reduce using rule 27 (expr -> callfunc .)
    PREC            reduce using rule 27 (expr -> callfunc .)
    SIN             reduce using rule 27 (expr -> callfunc .)
    COS             reduce using rule 27 (expr -> callfunc .)
    TAN             reduce using rule 27 (expr -> callfunc .)
    ASIN            reduce using rule 27 (expr -> callfunc .)
    ACOS            reduce using rule 27 (expr -> callfunc .)
    ATAN            reduce using rule 27 (expr -> callfunc .)
    SINH            reduce using rule 27 (expr -> callfunc .)
    COSH            reduce using rule 27 (expr -> callfunc .)
    TANH            reduce using rule 27 (expr -> callfunc .)
    INT             reduce using rule 27 (expr -> callfunc .)
    LOG             reduce using rule 27 (expr -> callfunc .)
    LOG10           reduce using rule 27 (expr -> callfunc .)
    SQRT            reduce using rule 27 (expr -> callfunc .)
    ABS             reduce using rule 27 (expr -> callfunc .)
    ERF             reduce using rule 27 (expr -> callfunc .)
    ERFC            reduce using rule 27 (expr -> callfunc .)
    END             reduce using rule 27 (expr -> callfunc .)
    COMMA           reduce using rule 27 (expr -> callfunc .)
    RPARENT         reduce using rule 27 (expr -> callfunc .)
    SEMICOLON       reduce using rule 27 (expr -> callfunc .)


state 40

    (99) constant -> PREC .

    EXP             reduce using rule 99 (constant -> PREC .)
    PLUS            reduce using rule 99 (constant -> PREC .)
    MINUS           reduce using rule 99 (constant -> PREC .)
    TIMES           reduce using rule 99 (constant -> PREC .)
    DIVIDE          reduce using rule 99 (constant -> PREC .)
    MOD             reduce using rule 99 (constant -> PREC .)
    LT              reduce using rule 99 (constant -> PREC .)
    GT              reduce using rule 99 (constant -> PREC .)
    LE              reduce using rule 99 (constant -> PREC .)
    GE              reduce using rule 99 (constant -> PREC .)
    EQ              reduce using rule 99 (constant -> PREC .)
    NE              reduce using rule 99 (constant -> PREC .)
    OR              reduce using rule 99 (constant -> PREC .)
    AND             reduce using rule 99 (constant -> PREC .)
    NOT             reduce using rule 99 (constant -> PREC .)
    RPARENT         reduce using rule 99 (constant -> PREC .)
    NEWLINE         reduce using rule 99 (constant -> PREC .)
    RBRACKET        reduce using rule 99 (constant -> PREC .)
    RETURN          reduce using rule 99 (constant -> PREC .)
    PROCEDURE       reduce using rule 99 (constant -> PREC .)
    PRINT           reduce using rule 99 (constant -> PREC .)
    WHILE           reduce using rule 99 (constant -> PREC .)
    FOR             reduce using rule 99 (constant -> PREC .)
    IF              reduce using rule 99 (constant -> PREC .)
    LBRACKET        reduce using rule 99 (constant -> PREC .)
    LPARENT         reduce using rule 99 (constant -> PREC .)
    FLOAT           reduce using rule 99 (constant -> PREC .)
    ID              reduce using rule 99 (constant -> PREC .)
    UNARYMINUS      reduce using rule 99 (constant -> PREC .)
    INC             reduce using rule 99 (constant -> PREC .)
    DEC             reduce using rule 99 (constant -> PREC .)
    PI              reduce using rule 99 (constant -> PREC .)
    PHI             reduce using rule 99 (constant -> PREC .)
    GAMMA           reduce using rule 99 (constant -> PREC .)
    E               reduce using rule 99 (constant -> PREC .)
    DEG             reduce using rule 99 (constant -> PREC .)
    PREC            reduce using rule 99 (constant -> PREC .)
    SIN             reduce using rule 99 (constant -> PREC .)
    COS             reduce using rule 99 (constant -> PREC .)
    TAN             reduce using rule 99 (constant -> PREC .)
    ASIN            reduce using rule 99 (constant -> PREC .)
    ACOS            reduce using rule 99 (constant -> PREC .)
    ATAN            reduce using rule 99 (constant -> PREC .)
    SINH            reduce using rule 99 (constant -> PREC .)
    COSH            reduce using rule 99 (constant -> PREC .)
    TANH            reduce using rule 99 (constant -> PREC .)
    INT             reduce using rule 99 (constant -> PREC .)
    LOG             reduce using rule 99 (constant -> PREC .)
    LOG10           reduce using rule 99 (constant -> PREC .)
    SQRT            reduce using rule 99 (constant -> PREC .)
    ABS             reduce using rule 99 (constant -> PREC .)
    ERF             reduce using rule 99 (constant -> PREC .)
    ERFC            reduce using rule 99 (constant -> PREC .)
    END             reduce using rule 99 (constant -> PREC .)
    COMMA           reduce using rule 99 (constant -> PREC .)
    SEMICOLON       reduce using rule 99 (constant -> PREC .)


state 41

    (25) expr -> binaryop .

    EXP             reduce using rule 25 (expr -> binaryop .)
    PLUS            reduce using rule 25 (expr -> binaryop .)
    MINUS           reduce using rule 25 (expr -> binaryop .)
    TIMES           reduce using rule 25 (expr -> binaryop .)
    DIVIDE          reduce using rule 25 (expr -> binaryop .)
    MOD             reduce using rule 25 (expr -> binaryop .)
    LT              reduce using rule 25 (expr -> binaryop .)
    GT              reduce using rule 25 (expr -> binaryop .)
    LE              reduce using rule 25 (expr -> binaryop .)
    GE              reduce using rule 25 (expr -> binaryop .)
    EQ              reduce using rule 25 (expr -> binaryop .)
    NE              reduce using rule 25 (expr -> binaryop .)
    OR              reduce using rule 25 (expr -> binaryop .)
    AND             reduce using rule 25 (expr -> binaryop .)
    NOT             reduce using rule 25 (expr -> binaryop .)
    NEWLINE         reduce using rule 25 (expr -> binaryop .)
    RBRACKET        reduce using rule 25 (expr -> binaryop .)
    RETURN          reduce using rule 25 (expr -> binaryop .)
    PROCEDURE       reduce using rule 25 (expr -> binaryop .)
    PRINT           reduce using rule 25 (expr -> binaryop .)
    WHILE           reduce using rule 25 (expr -> binaryop .)
    FOR             reduce using rule 25 (expr -> binaryop .)
    IF              reduce using rule 25 (expr -> binaryop .)
    LBRACKET        reduce using rule 25 (expr -> binaryop .)
    LPARENT         reduce using rule 25 (expr -> binaryop .)
    FLOAT           reduce using rule 25 (expr -> binaryop .)
    ID              reduce using rule 25 (expr -> binaryop .)
    UNARYMINUS      reduce using rule 25 (expr -> binaryop .)
    INC             reduce using rule 25 (expr -> binaryop .)
    DEC             reduce using rule 25 (expr -> binaryop .)
    PI              reduce using rule 25 (expr -> binaryop .)
    PHI             reduce using rule 25 (expr -> binaryop .)
    GAMMA           reduce using rule 25 (expr -> binaryop .)
    E               reduce using rule 25 (expr -> binaryop .)
    DEG             reduce using rule 25 (expr -> binaryop .)
    PREC            reduce using rule 25 (expr -> binaryop .)
    SIN             reduce using rule 25 (expr -> binaryop .)
    COS             reduce using rule 25 (expr -> binaryop .)
    TAN             reduce using rule 25 (expr -> binaryop .)
    ASIN            reduce using rule 25 (expr -> binaryop .)
    ACOS            reduce using rule 25 (expr -> binaryop .)
    ATAN            reduce using rule 25 (expr -> binaryop .)
    SINH            reduce using rule 25 (expr -> binaryop .)
    COSH            reduce using rule 25 (expr -> binaryop .)
    TANH            reduce using rule 25 (expr -> binaryop .)
    INT             reduce using rule 25 (expr -> binaryop .)
    LOG             reduce using rule 25 (expr -> binaryop .)
    LOG10           reduce using rule 25 (expr -> binaryop .)
    SQRT            reduce using rule 25 (expr -> binaryop .)
    ABS             reduce using rule 25 (expr -> binaryop .)
    ERF             reduce using rule 25 (expr -> binaryop .)
    ERFC            reduce using rule 25 (expr -> binaryop .)
    END             reduce using rule 25 (expr -> binaryop .)
    COMMA           reduce using rule 25 (expr -> binaryop .)
    RPARENT         reduce using rule 25 (expr -> binaryop .)
    SEMICOLON       reduce using rule 25 (expr -> binaryop .)


state 42

    (7) list -> list error . NEWLINE

    NEWLINE         shift and go to state 94


state 43

    (29) data -> constant .

    EXP             reduce using rule 29 (data -> constant .)
    PLUS            reduce using rule 29 (data -> constant .)
    MINUS           reduce using rule 29 (data -> constant .)
    TIMES           reduce using rule 29 (data -> constant .)
    DIVIDE          reduce using rule 29 (data -> constant .)
    MOD             reduce using rule 29 (data -> constant .)
    LT              reduce using rule 29 (data -> constant .)
    GT              reduce using rule 29 (data -> constant .)
    LE              reduce using rule 29 (data -> constant .)
    GE              reduce using rule 29 (data -> constant .)
    EQ              reduce using rule 29 (data -> constant .)
    NE              reduce using rule 29 (data -> constant .)
    OR              reduce using rule 29 (data -> constant .)
    AND             reduce using rule 29 (data -> constant .)
    NOT             reduce using rule 29 (data -> constant .)
    RPARENT         reduce using rule 29 (data -> constant .)
    NEWLINE         reduce using rule 29 (data -> constant .)
    RBRACKET        reduce using rule 29 (data -> constant .)
    RETURN          reduce using rule 29 (data -> constant .)
    PROCEDURE       reduce using rule 29 (data -> constant .)
    PRINT           reduce using rule 29 (data -> constant .)
    WHILE           reduce using rule 29 (data -> constant .)
    FOR             reduce using rule 29 (data -> constant .)
    IF              reduce using rule 29 (data -> constant .)
    LBRACKET        reduce using rule 29 (data -> constant .)
    LPARENT         reduce using rule 29 (data -> constant .)
    FLOAT           reduce using rule 29 (data -> constant .)
    ID              reduce using rule 29 (data -> constant .)
    UNARYMINUS      reduce using rule 29 (data -> constant .)
    INC             reduce using rule 29 (data -> constant .)
    DEC             reduce using rule 29 (data -> constant .)
    PI              reduce using rule 29 (data -> constant .)
    PHI             reduce using rule 29 (data -> constant .)
    GAMMA           reduce using rule 29 (data -> constant .)
    E               reduce using rule 29 (data -> constant .)
    DEG             reduce using rule 29 (data -> constant .)
    PREC            reduce using rule 29 (data -> constant .)
    SIN             reduce using rule 29 (data -> constant .)
    COS             reduce using rule 29 (data -> constant .)
    TAN             reduce using rule 29 (data -> constant .)
    ASIN            reduce using rule 29 (data -> constant .)
    ACOS            reduce using rule 29 (data -> constant .)
    ATAN            reduce using rule 29 (data -> constant .)
    SINH            reduce using rule 29 (data -> constant .)
    COSH            reduce using rule 29 (data -> constant .)
    TANH            reduce using rule 29 (data -> constant .)
    INT             reduce using rule 29 (data -> constant .)
    LOG             reduce using rule 29 (data -> constant .)
    LOG10           reduce using rule 29 (data -> constant .)
    SQRT            reduce using rule 29 (data -> constant .)
    ABS             reduce using rule 29 (data -> constant .)
    ERF             reduce using rule 29 (data -> constant .)
    ERFC            reduce using rule 29 (data -> constant .)
    END             reduce using rule 29 (data -> constant .)
    COMMA           reduce using rule 29 (data -> constant .)
    SEMICOLON       reduce using rule 29 (data -> constant .)


state 44

    (88) bltin -> LOG .

    LPARENT         reduce using rule 88 (bltin -> LOG .)


state 45

    (92) bltin -> ERF .

    LPARENT         reduce using rule 92 (bltin -> ERF .)


state 46

    (38) binaryop -> logicop .

    EXP             reduce using rule 38 (binaryop -> logicop .)
    PLUS            reduce using rule 38 (binaryop -> logicop .)
    MINUS           reduce using rule 38 (binaryop -> logicop .)
    TIMES           reduce using rule 38 (binaryop -> logicop .)
    DIVIDE          reduce using rule 38 (binaryop -> logicop .)
    MOD             reduce using rule 38 (binaryop -> logicop .)
    LT              reduce using rule 38 (binaryop -> logicop .)
    GT              reduce using rule 38 (binaryop -> logicop .)
    LE              reduce using rule 38 (binaryop -> logicop .)
    GE              reduce using rule 38 (binaryop -> logicop .)
    EQ              reduce using rule 38 (binaryop -> logicop .)
    NE              reduce using rule 38 (binaryop -> logicop .)
    OR              reduce using rule 38 (binaryop -> logicop .)
    AND             reduce using rule 38 (binaryop -> logicop .)
    NOT             reduce using rule 38 (binaryop -> logicop .)
    NEWLINE         reduce using rule 38 (binaryop -> logicop .)
    RBRACKET        reduce using rule 38 (binaryop -> logicop .)
    RETURN          reduce using rule 38 (binaryop -> logicop .)
    PROCEDURE       reduce using rule 38 (binaryop -> logicop .)
    PRINT           reduce using rule 38 (binaryop -> logicop .)
    WHILE           reduce using rule 38 (binaryop -> logicop .)
    FOR             reduce using rule 38 (binaryop -> logicop .)
    IF              reduce using rule 38 (binaryop -> logicop .)
    LBRACKET        reduce using rule 38 (binaryop -> logicop .)
    LPARENT         reduce using rule 38 (binaryop -> logicop .)
    FLOAT           reduce using rule 38 (binaryop -> logicop .)
    ID              reduce using rule 38 (binaryop -> logicop .)
    UNARYMINUS      reduce using rule 38 (binaryop -> logicop .)
    INC             reduce using rule 38 (binaryop -> logicop .)
    DEC             reduce using rule 38 (binaryop -> logicop .)
    PI              reduce using rule 38 (binaryop -> logicop .)
    PHI             reduce using rule 38 (binaryop -> logicop .)
    GAMMA           reduce using rule 38 (binaryop -> logicop .)
    E               reduce using rule 38 (binaryop -> logicop .)
    DEG             reduce using rule 38 (binaryop -> logicop .)
    PREC            reduce using rule 38 (binaryop -> logicop .)
    SIN             reduce using rule 38 (binaryop -> logicop .)
    COS             reduce using rule 38 (binaryop -> logicop .)
    TAN             reduce using rule 38 (binaryop -> logicop .)
    ASIN            reduce using rule 38 (binaryop -> logicop .)
    ACOS            reduce using rule 38 (binaryop -> logicop .)
    ATAN            reduce using rule 38 (binaryop -> logicop .)
    SINH            reduce using rule 38 (binaryop -> logicop .)
    COSH            reduce using rule 38 (binaryop -> logicop .)
    TANH            reduce using rule 38 (binaryop -> logicop .)
    INT             reduce using rule 38 (binaryop -> logicop .)
    LOG             reduce using rule 38 (binaryop -> logicop .)
    LOG10           reduce using rule 38 (binaryop -> logicop .)
    SQRT            reduce using rule 38 (binaryop -> logicop .)
    ABS             reduce using rule 38 (binaryop -> logicop .)
    ERF             reduce using rule 38 (binaryop -> logicop .)
    ERFC            reduce using rule 38 (binaryop -> logicop .)
    END             reduce using rule 38 (binaryop -> logicop .)
    COMMA           reduce using rule 38 (binaryop -> logicop .)
    RPARENT         reduce using rule 38 (binaryop -> logicop .)
    SEMICOLON       reduce using rule 38 (binaryop -> logicop .)


state 47

    (81) bltin -> ASIN .

    LPARENT         reduce using rule 81 (bltin -> ASIN .)


state 48

    (97) constant -> E .

    EXP             reduce using rule 97 (constant -> E .)
    PLUS            reduce using rule 97 (constant -> E .)
    MINUS           reduce using rule 97 (constant -> E .)
    TIMES           reduce using rule 97 (constant -> E .)
    DIVIDE          reduce using rule 97 (constant -> E .)
    MOD             reduce using rule 97 (constant -> E .)
    LT              reduce using rule 97 (constant -> E .)
    GT              reduce using rule 97 (constant -> E .)
    LE              reduce using rule 97 (constant -> E .)
    GE              reduce using rule 97 (constant -> E .)
    EQ              reduce using rule 97 (constant -> E .)
    NE              reduce using rule 97 (constant -> E .)
    OR              reduce using rule 97 (constant -> E .)
    AND             reduce using rule 97 (constant -> E .)
    NOT             reduce using rule 97 (constant -> E .)
    RPARENT         reduce using rule 97 (constant -> E .)
    NEWLINE         reduce using rule 97 (constant -> E .)
    RBRACKET        reduce using rule 97 (constant -> E .)
    RETURN          reduce using rule 97 (constant -> E .)
    PROCEDURE       reduce using rule 97 (constant -> E .)
    PRINT           reduce using rule 97 (constant -> E .)
    WHILE           reduce using rule 97 (constant -> E .)
    FOR             reduce using rule 97 (constant -> E .)
    IF              reduce using rule 97 (constant -> E .)
    LBRACKET        reduce using rule 97 (constant -> E .)
    LPARENT         reduce using rule 97 (constant -> E .)
    FLOAT           reduce using rule 97 (constant -> E .)
    ID              reduce using rule 97 (constant -> E .)
    UNARYMINUS      reduce using rule 97 (constant -> E .)
    INC             reduce using rule 97 (constant -> E .)
    DEC             reduce using rule 97 (constant -> E .)
    PI              reduce using rule 97 (constant -> E .)
    PHI             reduce using rule 97 (constant -> E .)
    GAMMA           reduce using rule 97 (constant -> E .)
    E               reduce using rule 97 (constant -> E .)
    DEG             reduce using rule 97 (constant -> E .)
    PREC            reduce using rule 97 (constant -> E .)
    SIN             reduce using rule 97 (constant -> E .)
    COS             reduce using rule 97 (constant -> E .)
    TAN             reduce using rule 97 (constant -> E .)
    ASIN            reduce using rule 97 (constant -> E .)
    ACOS            reduce using rule 97 (constant -> E .)
    ATAN            reduce using rule 97 (constant -> E .)
    SINH            reduce using rule 97 (constant -> E .)
    COSH            reduce using rule 97 (constant -> E .)
    TANH            reduce using rule 97 (constant -> E .)
    INT             reduce using rule 97 (constant -> E .)
    LOG             reduce using rule 97 (constant -> E .)
    LOG10           reduce using rule 97 (constant -> E .)
    SQRT            reduce using rule 97 (constant -> E .)
    ABS             reduce using rule 97 (constant -> E .)
    ERF             reduce using rule 97 (constant -> E .)
    ERFC            reduce using rule 97 (constant -> E .)
    END             reduce using rule 97 (constant -> E .)
    COMMA           reduce using rule 97 (constant -> E .)
    SEMICOLON       reduce using rule 97 (constant -> E .)


state 49

    (91) bltin -> ABS .

    LPARENT         reduce using rule 91 (bltin -> ABS .)


state 50

    (23) expr -> data .

    EXP             reduce using rule 23 (expr -> data .)
    PLUS            reduce using rule 23 (expr -> data .)
    MINUS           reduce using rule 23 (expr -> data .)
    TIMES           reduce using rule 23 (expr -> data .)
    DIVIDE          reduce using rule 23 (expr -> data .)
    MOD             reduce using rule 23 (expr -> data .)
    LT              reduce using rule 23 (expr -> data .)
    GT              reduce using rule 23 (expr -> data .)
    LE              reduce using rule 23 (expr -> data .)
    GE              reduce using rule 23 (expr -> data .)
    EQ              reduce using rule 23 (expr -> data .)
    NE              reduce using rule 23 (expr -> data .)
    OR              reduce using rule 23 (expr -> data .)
    AND             reduce using rule 23 (expr -> data .)
    NOT             reduce using rule 23 (expr -> data .)
    NEWLINE         reduce using rule 23 (expr -> data .)
    RBRACKET        reduce using rule 23 (expr -> data .)
    RETURN          reduce using rule 23 (expr -> data .)
    PROCEDURE       reduce using rule 23 (expr -> data .)
    PRINT           reduce using rule 23 (expr -> data .)
    WHILE           reduce using rule 23 (expr -> data .)
    FOR             reduce using rule 23 (expr -> data .)
    IF              reduce using rule 23 (expr -> data .)
    LBRACKET        reduce using rule 23 (expr -> data .)
    LPARENT         reduce using rule 23 (expr -> data .)
    FLOAT           reduce using rule 23 (expr -> data .)
    ID              reduce using rule 23 (expr -> data .)
    UNARYMINUS      reduce using rule 23 (expr -> data .)
    INC             reduce using rule 23 (expr -> data .)
    DEC             reduce using rule 23 (expr -> data .)
    PI              reduce using rule 23 (expr -> data .)
    PHI             reduce using rule 23 (expr -> data .)
    GAMMA           reduce using rule 23 (expr -> data .)
    E               reduce using rule 23 (expr -> data .)
    DEG             reduce using rule 23 (expr -> data .)
    PREC            reduce using rule 23 (expr -> data .)
    SIN             reduce using rule 23 (expr -> data .)
    COS             reduce using rule 23 (expr -> data .)
    TAN             reduce using rule 23 (expr -> data .)
    ASIN            reduce using rule 23 (expr -> data .)
    ACOS            reduce using rule 23 (expr -> data .)
    ATAN            reduce using rule 23 (expr -> data .)
    SINH            reduce using rule 23 (expr -> data .)
    COSH            reduce using rule 23 (expr -> data .)
    TANH            reduce using rule 23 (expr -> data .)
    INT             reduce using rule 23 (expr -> data .)
    LOG             reduce using rule 23 (expr -> data .)
    LOG10           reduce using rule 23 (expr -> data .)
    SQRT            reduce using rule 23 (expr -> data .)
    ABS             reduce using rule 23 (expr -> data .)
    ERF             reduce using rule 23 (expr -> data .)
    ERFC            reduce using rule 23 (expr -> data .)
    END             reduce using rule 23 (expr -> data .)
    COMMA           reduce using rule 23 (expr -> data .)
    RPARENT         reduce using rule 23 (expr -> data .)
    SEMICOLON       reduce using rule 23 (expr -> data .)


state 51

    (30) data -> ID .
    (34) unaryop -> ID . INC
    (35) unaryop -> ID . DEC
    (61) callfunc -> ID . LPARENT expr RPARENT
    (39) asgn -> ID . ASSIGN expr
    (40) asgn -> ID . ADDEQ expr
    (41) asgn -> ID . SUBEQ expr
    (42) asgn -> ID . MULEQ expr
    (43) asgn -> ID . DIVEQ expr
    (44) asgn -> ID . MODEQ expr

  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for LPARENT resolved as shift
    EXP             reduce using rule 30 (data -> ID .)
    PLUS            reduce using rule 30 (data -> ID .)
    MINUS           reduce using rule 30 (data -> ID .)
    TIMES           reduce using rule 30 (data -> ID .)
    DIVIDE          reduce using rule 30 (data -> ID .)
    MOD             reduce using rule 30 (data -> ID .)
    LT              reduce using rule 30 (data -> ID .)
    GT              reduce using rule 30 (data -> ID .)
    LE              reduce using rule 30 (data -> ID .)
    GE              reduce using rule 30 (data -> ID .)
    EQ              reduce using rule 30 (data -> ID .)
    NE              reduce using rule 30 (data -> ID .)
    OR              reduce using rule 30 (data -> ID .)
    AND             reduce using rule 30 (data -> ID .)
    NOT             reduce using rule 30 (data -> ID .)
    RPARENT         reduce using rule 30 (data -> ID .)
    NEWLINE         reduce using rule 30 (data -> ID .)
    RBRACKET        reduce using rule 30 (data -> ID .)
    RETURN          reduce using rule 30 (data -> ID .)
    PROCEDURE       reduce using rule 30 (data -> ID .)
    PRINT           reduce using rule 30 (data -> ID .)
    WHILE           reduce using rule 30 (data -> ID .)
    FOR             reduce using rule 30 (data -> ID .)
    IF              reduce using rule 30 (data -> ID .)
    LBRACKET        reduce using rule 30 (data -> ID .)
    FLOAT           reduce using rule 30 (data -> ID .)
    ID              reduce using rule 30 (data -> ID .)
    UNARYMINUS      reduce using rule 30 (data -> ID .)
    PI              reduce using rule 30 (data -> ID .)
    PHI             reduce using rule 30 (data -> ID .)
    GAMMA           reduce using rule 30 (data -> ID .)
    E               reduce using rule 30 (data -> ID .)
    DEG             reduce using rule 30 (data -> ID .)
    PREC            reduce using rule 30 (data -> ID .)
    SIN             reduce using rule 30 (data -> ID .)
    COS             reduce using rule 30 (data -> ID .)
    TAN             reduce using rule 30 (data -> ID .)
    ASIN            reduce using rule 30 (data -> ID .)
    ACOS            reduce using rule 30 (data -> ID .)
    ATAN            reduce using rule 30 (data -> ID .)
    SINH            reduce using rule 30 (data -> ID .)
    COSH            reduce using rule 30 (data -> ID .)
    TANH            reduce using rule 30 (data -> ID .)
    INT             reduce using rule 30 (data -> ID .)
    LOG             reduce using rule 30 (data -> ID .)
    LOG10           reduce using rule 30 (data -> ID .)
    SQRT            reduce using rule 30 (data -> ID .)
    ABS             reduce using rule 30 (data -> ID .)
    ERF             reduce using rule 30 (data -> ID .)
    ERFC            reduce using rule 30 (data -> ID .)
    END             reduce using rule 30 (data -> ID .)
    COMMA           reduce using rule 30 (data -> ID .)
    SEMICOLON       reduce using rule 30 (data -> ID .)
    INC             shift and go to state 103
    DEC             shift and go to state 101
    LPARENT         shift and go to state 95
    ASSIGN          shift and go to state 97
    ADDEQ           shift and go to state 99
    SUBEQ           shift and go to state 98
    MULEQ           shift and go to state 100
    DIVEQ           shift and go to state 102
    MODEQ           shift and go to state 96

  ! LPARENT         [ reduce using rule 30 (data -> ID .) ]
  ! INC             [ reduce using rule 30 (data -> ID .) ]
  ! DEC             [ reduce using rule 30 (data -> ID .) ]


state 52

    (16) stmt -> IF . LPARENT cond RPARENT stmt END
    (17) stmt -> IF . LPARENT cond RPARENT stmt END ELSE stmt END

    LPARENT         shift and go to state 104


state 53

    (28) data -> FLOAT .

    EXP             reduce using rule 28 (data -> FLOAT .)
    PLUS            reduce using rule 28 (data -> FLOAT .)
    MINUS           reduce using rule 28 (data -> FLOAT .)
    TIMES           reduce using rule 28 (data -> FLOAT .)
    DIVIDE          reduce using rule 28 (data -> FLOAT .)
    MOD             reduce using rule 28 (data -> FLOAT .)
    LT              reduce using rule 28 (data -> FLOAT .)
    GT              reduce using rule 28 (data -> FLOAT .)
    LE              reduce using rule 28 (data -> FLOAT .)
    GE              reduce using rule 28 (data -> FLOAT .)
    EQ              reduce using rule 28 (data -> FLOAT .)
    NE              reduce using rule 28 (data -> FLOAT .)
    OR              reduce using rule 28 (data -> FLOAT .)
    AND             reduce using rule 28 (data -> FLOAT .)
    NOT             reduce using rule 28 (data -> FLOAT .)
    RPARENT         reduce using rule 28 (data -> FLOAT .)
    NEWLINE         reduce using rule 28 (data -> FLOAT .)
    RBRACKET        reduce using rule 28 (data -> FLOAT .)
    RETURN          reduce using rule 28 (data -> FLOAT .)
    PROCEDURE       reduce using rule 28 (data -> FLOAT .)
    PRINT           reduce using rule 28 (data -> FLOAT .)
    WHILE           reduce using rule 28 (data -> FLOAT .)
    FOR             reduce using rule 28 (data -> FLOAT .)
    IF              reduce using rule 28 (data -> FLOAT .)
    LBRACKET        reduce using rule 28 (data -> FLOAT .)
    LPARENT         reduce using rule 28 (data -> FLOAT .)
    FLOAT           reduce using rule 28 (data -> FLOAT .)
    ID              reduce using rule 28 (data -> FLOAT .)
    UNARYMINUS      reduce using rule 28 (data -> FLOAT .)
    INC             reduce using rule 28 (data -> FLOAT .)
    DEC             reduce using rule 28 (data -> FLOAT .)
    PI              reduce using rule 28 (data -> FLOAT .)
    PHI             reduce using rule 28 (data -> FLOAT .)
    GAMMA           reduce using rule 28 (data -> FLOAT .)
    E               reduce using rule 28 (data -> FLOAT .)
    DEG             reduce using rule 28 (data -> FLOAT .)
    PREC            reduce using rule 28 (data -> FLOAT .)
    SIN             reduce using rule 28 (data -> FLOAT .)
    COS             reduce using rule 28 (data -> FLOAT .)
    TAN             reduce using rule 28 (data -> FLOAT .)
    ASIN            reduce using rule 28 (data -> FLOAT .)
    ACOS            reduce using rule 28 (data -> FLOAT .)
    ATAN            reduce using rule 28 (data -> FLOAT .)
    SINH            reduce using rule 28 (data -> FLOAT .)
    COSH            reduce using rule 28 (data -> FLOAT .)
    TANH            reduce using rule 28 (data -> FLOAT .)
    INT             reduce using rule 28 (data -> FLOAT .)
    LOG             reduce using rule 28 (data -> FLOAT .)
    LOG10           reduce using rule 28 (data -> FLOAT .)
    SQRT            reduce using rule 28 (data -> FLOAT .)
    ABS             reduce using rule 28 (data -> FLOAT .)
    ERF             reduce using rule 28 (data -> FLOAT .)
    ERFC            reduce using rule 28 (data -> FLOAT .)
    END             reduce using rule 28 (data -> FLOAT .)
    COMMA           reduce using rule 28 (data -> FLOAT .)
    SEMICOLON       reduce using rule 28 (data -> FLOAT .)


state 54

    (90) bltin -> SQRT .

    LPARENT         reduce using rule 90 (bltin -> SQRT .)


state 55

    (32) unaryop -> INC . ID

    ID              shift and go to state 105


state 56

    (18) stmt -> LBRACKET stmtlist . RBRACKET
    (21) stmtlist -> stmtlist . NEWLINE
    (22) stmtlist -> stmtlist . stmt
    (9) stmt -> . expr
    (10) stmt -> . RETURN
    (11) stmt -> . RETURN expr
    (12) stmt -> . PROCEDURE BEGIN LPARENT arglist RPARENT
    (13) stmt -> . PRINT prlist
    (14) stmt -> . WHILE LPARENT cond RPARENT stmt END
    (15) stmt -> . FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END
    (16) stmt -> . IF LPARENT cond RPARENT stmt END
    (17) stmt -> . IF LPARENT cond RPARENT stmt END ELSE stmt END
    (18) stmt -> . LBRACKET stmtlist RBRACKET
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    RBRACKET        shift and go to state 109
    NEWLINE         shift and go to state 106
    RETURN          shift and go to state 13
    PROCEDURE       shift and go to state 10
    PRINT           shift and go to state 14
    WHILE           shift and go to state 32
    FOR             shift and go to state 23
    IF              shift and go to state 52
    LBRACKET        shift and go to state 4
    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    binaryop                       shift and go to state 41
    unaryop                        shift and go to state 37
    expr                           shift and go to state 108
    callfunc                       shift and go to state 39
    stmt                           shift and go to state 107
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    logicop                        shift and go to state 46
    data                           shift and go to state 50
    bltin                          shift and go to state 12

state 57

    (20) stmtlist -> empty .

    RBRACKET        reduce using rule 20 (stmtlist -> empty .)
    NEWLINE         reduce using rule 20 (stmtlist -> empty .)
    RETURN          reduce using rule 20 (stmtlist -> empty .)
    PROCEDURE       reduce using rule 20 (stmtlist -> empty .)
    PRINT           reduce using rule 20 (stmtlist -> empty .)
    WHILE           reduce using rule 20 (stmtlist -> empty .)
    FOR             reduce using rule 20 (stmtlist -> empty .)
    IF              reduce using rule 20 (stmtlist -> empty .)
    LBRACKET        reduce using rule 20 (stmtlist -> empty .)
    LPARENT         reduce using rule 20 (stmtlist -> empty .)
    FLOAT           reduce using rule 20 (stmtlist -> empty .)
    ID              reduce using rule 20 (stmtlist -> empty .)
    UNARYMINUS      reduce using rule 20 (stmtlist -> empty .)
    INC             reduce using rule 20 (stmtlist -> empty .)
    DEC             reduce using rule 20 (stmtlist -> empty .)
    PI              reduce using rule 20 (stmtlist -> empty .)
    PHI             reduce using rule 20 (stmtlist -> empty .)
    GAMMA           reduce using rule 20 (stmtlist -> empty .)
    E               reduce using rule 20 (stmtlist -> empty .)
    DEG             reduce using rule 20 (stmtlist -> empty .)
    PREC            reduce using rule 20 (stmtlist -> empty .)
    SIN             reduce using rule 20 (stmtlist -> empty .)
    COS             reduce using rule 20 (stmtlist -> empty .)
    TAN             reduce using rule 20 (stmtlist -> empty .)
    ASIN            reduce using rule 20 (stmtlist -> empty .)
    ACOS            reduce using rule 20 (stmtlist -> empty .)
    ATAN            reduce using rule 20 (stmtlist -> empty .)
    SINH            reduce using rule 20 (stmtlist -> empty .)
    COSH            reduce using rule 20 (stmtlist -> empty .)
    TANH            reduce using rule 20 (stmtlist -> empty .)
    INT             reduce using rule 20 (stmtlist -> empty .)
    LOG             reduce using rule 20 (stmtlist -> empty .)
    LOG10           reduce using rule 20 (stmtlist -> empty .)
    SQRT            reduce using rule 20 (stmtlist -> empty .)
    ABS             reduce using rule 20 (stmtlist -> empty .)
    ERF             reduce using rule 20 (stmtlist -> empty .)
    ERFC            reduce using rule 20 (stmtlist -> empty .)


state 58

    (8) list -> list COMMENT NEWLINE .

    NEWLINE         reduce using rule 8 (list -> list COMMENT NEWLINE .)
    error           reduce using rule 8 (list -> list COMMENT NEWLINE .)
    COMMENT         reduce using rule 8 (list -> list COMMENT NEWLINE .)
    FUNC            reduce using rule 8 (list -> list COMMENT NEWLINE .)
    PROC            reduce using rule 8 (list -> list COMMENT NEWLINE .)
    RETURN          reduce using rule 8 (list -> list COMMENT NEWLINE .)
    PROCEDURE       reduce using rule 8 (list -> list COMMENT NEWLINE .)
    PRINT           reduce using rule 8 (list -> list COMMENT NEWLINE .)
    WHILE           reduce using rule 8 (list -> list COMMENT NEWLINE .)
    FOR             reduce using rule 8 (list -> list COMMENT NEWLINE .)
    IF              reduce using rule 8 (list -> list COMMENT NEWLINE .)
    LBRACKET        reduce using rule 8 (list -> list COMMENT NEWLINE .)
    LPARENT         reduce using rule 8 (list -> list COMMENT NEWLINE .)
    FLOAT           reduce using rule 8 (list -> list COMMENT NEWLINE .)
    ID              reduce using rule 8 (list -> list COMMENT NEWLINE .)
    UNARYMINUS      reduce using rule 8 (list -> list COMMENT NEWLINE .)
    INC             reduce using rule 8 (list -> list COMMENT NEWLINE .)
    DEC             reduce using rule 8 (list -> list COMMENT NEWLINE .)
    PI              reduce using rule 8 (list -> list COMMENT NEWLINE .)
    PHI             reduce using rule 8 (list -> list COMMENT NEWLINE .)
    GAMMA           reduce using rule 8 (list -> list COMMENT NEWLINE .)
    E               reduce using rule 8 (list -> list COMMENT NEWLINE .)
    DEG             reduce using rule 8 (list -> list COMMENT NEWLINE .)
    PREC            reduce using rule 8 (list -> list COMMENT NEWLINE .)
    SIN             reduce using rule 8 (list -> list COMMENT NEWLINE .)
    COS             reduce using rule 8 (list -> list COMMENT NEWLINE .)
    TAN             reduce using rule 8 (list -> list COMMENT NEWLINE .)
    ASIN            reduce using rule 8 (list -> list COMMENT NEWLINE .)
    ACOS            reduce using rule 8 (list -> list COMMENT NEWLINE .)
    ATAN            reduce using rule 8 (list -> list COMMENT NEWLINE .)
    SINH            reduce using rule 8 (list -> list COMMENT NEWLINE .)
    COSH            reduce using rule 8 (list -> list COMMENT NEWLINE .)
    TANH            reduce using rule 8 (list -> list COMMENT NEWLINE .)
    INT             reduce using rule 8 (list -> list COMMENT NEWLINE .)
    LOG             reduce using rule 8 (list -> list COMMENT NEWLINE .)
    LOG10           reduce using rule 8 (list -> list COMMENT NEWLINE .)
    SQRT            reduce using rule 8 (list -> list COMMENT NEWLINE .)
    ABS             reduce using rule 8 (list -> list COMMENT NEWLINE .)
    ERF             reduce using rule 8 (list -> list COMMENT NEWLINE .)
    ERFC            reduce using rule 8 (list -> list COMMENT NEWLINE .)
    $end            reduce using rule 8 (list -> list COMMENT NEWLINE .)


state 59

    (12) stmt -> PROCEDURE BEGIN . LPARENT arglist RPARENT

    LPARENT         shift and go to state 110


state 60

    (60) callfunc -> bltin LPARENT . expr RPARENT
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 111
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 61

    (11) stmt -> RETURN expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    END             reduce using rule 11 (stmt -> RETURN expr .)
    NEWLINE         reduce using rule 11 (stmt -> RETURN expr .)
    RBRACKET        reduce using rule 11 (stmt -> RETURN expr .)
    RETURN          reduce using rule 11 (stmt -> RETURN expr .)
    PROCEDURE       reduce using rule 11 (stmt -> RETURN expr .)
    PRINT           reduce using rule 11 (stmt -> RETURN expr .)
    WHILE           reduce using rule 11 (stmt -> RETURN expr .)
    FOR             reduce using rule 11 (stmt -> RETURN expr .)
    IF              reduce using rule 11 (stmt -> RETURN expr .)
    LBRACKET        reduce using rule 11 (stmt -> RETURN expr .)
    LPARENT         reduce using rule 11 (stmt -> RETURN expr .)
    FLOAT           reduce using rule 11 (stmt -> RETURN expr .)
    ID              reduce using rule 11 (stmt -> RETURN expr .)
    UNARYMINUS      reduce using rule 11 (stmt -> RETURN expr .)
    INC             reduce using rule 11 (stmt -> RETURN expr .)
    DEC             reduce using rule 11 (stmt -> RETURN expr .)
    PI              reduce using rule 11 (stmt -> RETURN expr .)
    PHI             reduce using rule 11 (stmt -> RETURN expr .)
    GAMMA           reduce using rule 11 (stmt -> RETURN expr .)
    E               reduce using rule 11 (stmt -> RETURN expr .)
    DEG             reduce using rule 11 (stmt -> RETURN expr .)
    PREC            reduce using rule 11 (stmt -> RETURN expr .)
    SIN             reduce using rule 11 (stmt -> RETURN expr .)
    COS             reduce using rule 11 (stmt -> RETURN expr .)
    TAN             reduce using rule 11 (stmt -> RETURN expr .)
    ASIN            reduce using rule 11 (stmt -> RETURN expr .)
    ACOS            reduce using rule 11 (stmt -> RETURN expr .)
    ATAN            reduce using rule 11 (stmt -> RETURN expr .)
    SINH            reduce using rule 11 (stmt -> RETURN expr .)
    COSH            reduce using rule 11 (stmt -> RETURN expr .)
    TANH            reduce using rule 11 (stmt -> RETURN expr .)
    INT             reduce using rule 11 (stmt -> RETURN expr .)
    LOG             reduce using rule 11 (stmt -> RETURN expr .)
    LOG10           reduce using rule 11 (stmt -> RETURN expr .)
    SQRT            reduce using rule 11 (stmt -> RETURN expr .)
    ABS             reduce using rule 11 (stmt -> RETURN expr .)
    ERF             reduce using rule 11 (stmt -> RETURN expr .)
    ERFC            reduce using rule 11 (stmt -> RETURN expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89


state 62

    (63) prlist -> STRING .

    COMMA           reduce using rule 63 (prlist -> STRING .)
    NEWLINE         reduce using rule 63 (prlist -> STRING .)
    RBRACKET        reduce using rule 63 (prlist -> STRING .)
    RETURN          reduce using rule 63 (prlist -> STRING .)
    PROCEDURE       reduce using rule 63 (prlist -> STRING .)
    PRINT           reduce using rule 63 (prlist -> STRING .)
    WHILE           reduce using rule 63 (prlist -> STRING .)
    FOR             reduce using rule 63 (prlist -> STRING .)
    IF              reduce using rule 63 (prlist -> STRING .)
    LBRACKET        reduce using rule 63 (prlist -> STRING .)
    LPARENT         reduce using rule 63 (prlist -> STRING .)
    FLOAT           reduce using rule 63 (prlist -> STRING .)
    ID              reduce using rule 63 (prlist -> STRING .)
    UNARYMINUS      reduce using rule 63 (prlist -> STRING .)
    INC             reduce using rule 63 (prlist -> STRING .)
    DEC             reduce using rule 63 (prlist -> STRING .)
    PI              reduce using rule 63 (prlist -> STRING .)
    PHI             reduce using rule 63 (prlist -> STRING .)
    GAMMA           reduce using rule 63 (prlist -> STRING .)
    E               reduce using rule 63 (prlist -> STRING .)
    DEG             reduce using rule 63 (prlist -> STRING .)
    PREC            reduce using rule 63 (prlist -> STRING .)
    SIN             reduce using rule 63 (prlist -> STRING .)
    COS             reduce using rule 63 (prlist -> STRING .)
    TAN             reduce using rule 63 (prlist -> STRING .)
    ASIN            reduce using rule 63 (prlist -> STRING .)
    ACOS            reduce using rule 63 (prlist -> STRING .)
    ATAN            reduce using rule 63 (prlist -> STRING .)
    SINH            reduce using rule 63 (prlist -> STRING .)
    COSH            reduce using rule 63 (prlist -> STRING .)
    TANH            reduce using rule 63 (prlist -> STRING .)
    INT             reduce using rule 63 (prlist -> STRING .)
    LOG             reduce using rule 63 (prlist -> STRING .)
    LOG10           reduce using rule 63 (prlist -> STRING .)
    SQRT            reduce using rule 63 (prlist -> STRING .)
    ABS             reduce using rule 63 (prlist -> STRING .)
    ERF             reduce using rule 63 (prlist -> STRING .)
    ERFC            reduce using rule 63 (prlist -> STRING .)
    END             reduce using rule 63 (prlist -> STRING .)


state 63

    (62) prlist -> expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    COMMA           reduce using rule 62 (prlist -> expr .)
    NEWLINE         reduce using rule 62 (prlist -> expr .)
    RBRACKET        reduce using rule 62 (prlist -> expr .)
    RETURN          reduce using rule 62 (prlist -> expr .)
    PROCEDURE       reduce using rule 62 (prlist -> expr .)
    PRINT           reduce using rule 62 (prlist -> expr .)
    WHILE           reduce using rule 62 (prlist -> expr .)
    FOR             reduce using rule 62 (prlist -> expr .)
    IF              reduce using rule 62 (prlist -> expr .)
    LBRACKET        reduce using rule 62 (prlist -> expr .)
    LPARENT         reduce using rule 62 (prlist -> expr .)
    FLOAT           reduce using rule 62 (prlist -> expr .)
    ID              reduce using rule 62 (prlist -> expr .)
    UNARYMINUS      reduce using rule 62 (prlist -> expr .)
    INC             reduce using rule 62 (prlist -> expr .)
    DEC             reduce using rule 62 (prlist -> expr .)
    PI              reduce using rule 62 (prlist -> expr .)
    PHI             reduce using rule 62 (prlist -> expr .)
    GAMMA           reduce using rule 62 (prlist -> expr .)
    E               reduce using rule 62 (prlist -> expr .)
    DEG             reduce using rule 62 (prlist -> expr .)
    PREC            reduce using rule 62 (prlist -> expr .)
    SIN             reduce using rule 62 (prlist -> expr .)
    COS             reduce using rule 62 (prlist -> expr .)
    TAN             reduce using rule 62 (prlist -> expr .)
    ASIN            reduce using rule 62 (prlist -> expr .)
    ACOS            reduce using rule 62 (prlist -> expr .)
    ATAN            reduce using rule 62 (prlist -> expr .)
    SINH            reduce using rule 62 (prlist -> expr .)
    COSH            reduce using rule 62 (prlist -> expr .)
    TANH            reduce using rule 62 (prlist -> expr .)
    INT             reduce using rule 62 (prlist -> expr .)
    LOG             reduce using rule 62 (prlist -> expr .)
    LOG10           reduce using rule 62 (prlist -> expr .)
    SQRT            reduce using rule 62 (prlist -> expr .)
    ABS             reduce using rule 62 (prlist -> expr .)
    ERF             reduce using rule 62 (prlist -> expr .)
    ERFC            reduce using rule 62 (prlist -> expr .)
    END             reduce using rule 62 (prlist -> expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89


state 64

    (13) stmt -> PRINT prlist .
    (64) prlist -> prlist . COMMA expr
    (65) prlist -> prlist . COMMA STRING

    END             reduce using rule 13 (stmt -> PRINT prlist .)
    NEWLINE         reduce using rule 13 (stmt -> PRINT prlist .)
    RBRACKET        reduce using rule 13 (stmt -> PRINT prlist .)
    RETURN          reduce using rule 13 (stmt -> PRINT prlist .)
    PROCEDURE       reduce using rule 13 (stmt -> PRINT prlist .)
    PRINT           reduce using rule 13 (stmt -> PRINT prlist .)
    WHILE           reduce using rule 13 (stmt -> PRINT prlist .)
    FOR             reduce using rule 13 (stmt -> PRINT prlist .)
    IF              reduce using rule 13 (stmt -> PRINT prlist .)
    LBRACKET        reduce using rule 13 (stmt -> PRINT prlist .)
    LPARENT         reduce using rule 13 (stmt -> PRINT prlist .)
    FLOAT           reduce using rule 13 (stmt -> PRINT prlist .)
    ID              reduce using rule 13 (stmt -> PRINT prlist .)
    UNARYMINUS      reduce using rule 13 (stmt -> PRINT prlist .)
    INC             reduce using rule 13 (stmt -> PRINT prlist .)
    DEC             reduce using rule 13 (stmt -> PRINT prlist .)
    PI              reduce using rule 13 (stmt -> PRINT prlist .)
    PHI             reduce using rule 13 (stmt -> PRINT prlist .)
    GAMMA           reduce using rule 13 (stmt -> PRINT prlist .)
    E               reduce using rule 13 (stmt -> PRINT prlist .)
    DEG             reduce using rule 13 (stmt -> PRINT prlist .)
    PREC            reduce using rule 13 (stmt -> PRINT prlist .)
    SIN             reduce using rule 13 (stmt -> PRINT prlist .)
    COS             reduce using rule 13 (stmt -> PRINT prlist .)
    TAN             reduce using rule 13 (stmt -> PRINT prlist .)
    ASIN            reduce using rule 13 (stmt -> PRINT prlist .)
    ACOS            reduce using rule 13 (stmt -> PRINT prlist .)
    ATAN            reduce using rule 13 (stmt -> PRINT prlist .)
    SINH            reduce using rule 13 (stmt -> PRINT prlist .)
    COSH            reduce using rule 13 (stmt -> PRINT prlist .)
    TANH            reduce using rule 13 (stmt -> PRINT prlist .)
    INT             reduce using rule 13 (stmt -> PRINT prlist .)
    LOG             reduce using rule 13 (stmt -> PRINT prlist .)
    LOG10           reduce using rule 13 (stmt -> PRINT prlist .)
    SQRT            reduce using rule 13 (stmt -> PRINT prlist .)
    ABS             reduce using rule 13 (stmt -> PRINT prlist .)
    ERF             reduce using rule 13 (stmt -> PRINT prlist .)
    ERFC            reduce using rule 13 (stmt -> PRINT prlist .)
    COMMA           shift and go to state 112


state 65

    (31) unaryop -> UNARYMINUS expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    PLUS            reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    MINUS           reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    TIMES           reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    DIVIDE          reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    MOD             reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    LT              reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    GT              reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    LE              reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    GE              reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    EQ              reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    NE              reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    OR              reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    AND             reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    NOT             reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    RPARENT         reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    NEWLINE         reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    RBRACKET        reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    RETURN          reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    PROCEDURE       reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    PRINT           reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    WHILE           reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    FOR             reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    IF              reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    LBRACKET        reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    LPARENT         reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    FLOAT           reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    ID              reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    UNARYMINUS      reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    INC             reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    DEC             reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    PI              reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    PHI             reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    GAMMA           reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    E               reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    DEG             reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    PREC            reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    SIN             reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    COS             reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    TAN             reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    ASIN            reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    ACOS            reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    ATAN            reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    SINH            reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    COSH            reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    TANH            reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    INT             reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    LOG             reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    LOG10           reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    SQRT            reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    ABS             reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    ERF             reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    ERFC            reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    END             reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    COMMA           reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    SEMICOLON       reduce using rule 31 (unaryop -> UNARYMINUS expr .)
    EXP             shift and go to state 88

  ! EXP             [ reduce using rule 31 (unaryop -> UNARYMINUS expr .) ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 91 ]
  ! TIMES           [ shift and go to state 84 ]
  ! DIVIDE          [ shift and go to state 81 ]
  ! MOD             [ shift and go to state 93 ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]
  ! NOT             [ shift and go to state 89 ]


state 66

    (15) stmt -> FOR LPARENT . cond SEMICOLON cond SEMICOLON cond RPARENT stmt END
    (19) cond -> . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 114
    callfunc                       shift and go to state 39
    asgn                           shift and go to state 7
    cond                           shift and go to state 113
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50
    bltin                          shift and go to state 12

state 67

    (5) list -> list stmt NEWLINE .

    NEWLINE         reduce using rule 5 (list -> list stmt NEWLINE .)
    error           reduce using rule 5 (list -> list stmt NEWLINE .)
    COMMENT         reduce using rule 5 (list -> list stmt NEWLINE .)
    FUNC            reduce using rule 5 (list -> list stmt NEWLINE .)
    PROC            reduce using rule 5 (list -> list stmt NEWLINE .)
    RETURN          reduce using rule 5 (list -> list stmt NEWLINE .)
    PROCEDURE       reduce using rule 5 (list -> list stmt NEWLINE .)
    PRINT           reduce using rule 5 (list -> list stmt NEWLINE .)
    WHILE           reduce using rule 5 (list -> list stmt NEWLINE .)
    FOR             reduce using rule 5 (list -> list stmt NEWLINE .)
    IF              reduce using rule 5 (list -> list stmt NEWLINE .)
    LBRACKET        reduce using rule 5 (list -> list stmt NEWLINE .)
    LPARENT         reduce using rule 5 (list -> list stmt NEWLINE .)
    FLOAT           reduce using rule 5 (list -> list stmt NEWLINE .)
    ID              reduce using rule 5 (list -> list stmt NEWLINE .)
    UNARYMINUS      reduce using rule 5 (list -> list stmt NEWLINE .)
    INC             reduce using rule 5 (list -> list stmt NEWLINE .)
    DEC             reduce using rule 5 (list -> list stmt NEWLINE .)
    PI              reduce using rule 5 (list -> list stmt NEWLINE .)
    PHI             reduce using rule 5 (list -> list stmt NEWLINE .)
    GAMMA           reduce using rule 5 (list -> list stmt NEWLINE .)
    E               reduce using rule 5 (list -> list stmt NEWLINE .)
    DEG             reduce using rule 5 (list -> list stmt NEWLINE .)
    PREC            reduce using rule 5 (list -> list stmt NEWLINE .)
    SIN             reduce using rule 5 (list -> list stmt NEWLINE .)
    COS             reduce using rule 5 (list -> list stmt NEWLINE .)
    TAN             reduce using rule 5 (list -> list stmt NEWLINE .)
    ASIN            reduce using rule 5 (list -> list stmt NEWLINE .)
    ACOS            reduce using rule 5 (list -> list stmt NEWLINE .)
    ATAN            reduce using rule 5 (list -> list stmt NEWLINE .)
    SINH            reduce using rule 5 (list -> list stmt NEWLINE .)
    COSH            reduce using rule 5 (list -> list stmt NEWLINE .)
    TANH            reduce using rule 5 (list -> list stmt NEWLINE .)
    INT             reduce using rule 5 (list -> list stmt NEWLINE .)
    LOG             reduce using rule 5 (list -> list stmt NEWLINE .)
    LOG10           reduce using rule 5 (list -> list stmt NEWLINE .)
    SQRT            reduce using rule 5 (list -> list stmt NEWLINE .)
    ABS             reduce using rule 5 (list -> list stmt NEWLINE .)
    ERF             reduce using rule 5 (list -> list stmt NEWLINE .)
    ERFC            reduce using rule 5 (list -> list stmt NEWLINE .)
    $end            reduce using rule 5 (list -> list stmt NEWLINE .)


state 68

    (71) procname -> ID .

    LPARENT         reduce using rule 71 (procname -> ID .)


state 69

    (70) procname -> FUNCTION .

    LPARENT         reduce using rule 70 (procname -> FUNCTION .)


state 70

    (72) procname -> PROCEDURE .

    LPARENT         reduce using rule 72 (procname -> PROCEDURE .)


state 71

    (73) procname -> bltin .

    LPARENT         reduce using rule 73 (procname -> bltin .)


state 72

    (66) defn -> FUNC procname . LPARENT formals RPARENT

    LPARENT         shift and go to state 115


state 73

    (33) unaryop -> DEC ID .

    EXP             reduce using rule 33 (unaryop -> DEC ID .)
    PLUS            reduce using rule 33 (unaryop -> DEC ID .)
    MINUS           reduce using rule 33 (unaryop -> DEC ID .)
    TIMES           reduce using rule 33 (unaryop -> DEC ID .)
    DIVIDE          reduce using rule 33 (unaryop -> DEC ID .)
    MOD             reduce using rule 33 (unaryop -> DEC ID .)
    LT              reduce using rule 33 (unaryop -> DEC ID .)
    GT              reduce using rule 33 (unaryop -> DEC ID .)
    LE              reduce using rule 33 (unaryop -> DEC ID .)
    GE              reduce using rule 33 (unaryop -> DEC ID .)
    EQ              reduce using rule 33 (unaryop -> DEC ID .)
    NE              reduce using rule 33 (unaryop -> DEC ID .)
    OR              reduce using rule 33 (unaryop -> DEC ID .)
    AND             reduce using rule 33 (unaryop -> DEC ID .)
    NOT             reduce using rule 33 (unaryop -> DEC ID .)
    RPARENT         reduce using rule 33 (unaryop -> DEC ID .)
    NEWLINE         reduce using rule 33 (unaryop -> DEC ID .)
    RBRACKET        reduce using rule 33 (unaryop -> DEC ID .)
    RETURN          reduce using rule 33 (unaryop -> DEC ID .)
    PROCEDURE       reduce using rule 33 (unaryop -> DEC ID .)
    PRINT           reduce using rule 33 (unaryop -> DEC ID .)
    WHILE           reduce using rule 33 (unaryop -> DEC ID .)
    FOR             reduce using rule 33 (unaryop -> DEC ID .)
    IF              reduce using rule 33 (unaryop -> DEC ID .)
    LBRACKET        reduce using rule 33 (unaryop -> DEC ID .)
    LPARENT         reduce using rule 33 (unaryop -> DEC ID .)
    FLOAT           reduce using rule 33 (unaryop -> DEC ID .)
    ID              reduce using rule 33 (unaryop -> DEC ID .)
    UNARYMINUS      reduce using rule 33 (unaryop -> DEC ID .)
    INC             reduce using rule 33 (unaryop -> DEC ID .)
    DEC             reduce using rule 33 (unaryop -> DEC ID .)
    PI              reduce using rule 33 (unaryop -> DEC ID .)
    PHI             reduce using rule 33 (unaryop -> DEC ID .)
    GAMMA           reduce using rule 33 (unaryop -> DEC ID .)
    E               reduce using rule 33 (unaryop -> DEC ID .)
    DEG             reduce using rule 33 (unaryop -> DEC ID .)
    PREC            reduce using rule 33 (unaryop -> DEC ID .)
    SIN             reduce using rule 33 (unaryop -> DEC ID .)
    COS             reduce using rule 33 (unaryop -> DEC ID .)
    TAN             reduce using rule 33 (unaryop -> DEC ID .)
    ASIN            reduce using rule 33 (unaryop -> DEC ID .)
    ACOS            reduce using rule 33 (unaryop -> DEC ID .)
    ATAN            reduce using rule 33 (unaryop -> DEC ID .)
    SINH            reduce using rule 33 (unaryop -> DEC ID .)
    COSH            reduce using rule 33 (unaryop -> DEC ID .)
    TANH            reduce using rule 33 (unaryop -> DEC ID .)
    INT             reduce using rule 33 (unaryop -> DEC ID .)
    LOG             reduce using rule 33 (unaryop -> DEC ID .)
    LOG10           reduce using rule 33 (unaryop -> DEC ID .)
    SQRT            reduce using rule 33 (unaryop -> DEC ID .)
    ABS             reduce using rule 33 (unaryop -> DEC ID .)
    ERF             reduce using rule 33 (unaryop -> DEC ID .)
    ERFC            reduce using rule 33 (unaryop -> DEC ID .)
    END             reduce using rule 33 (unaryop -> DEC ID .)
    COMMA           reduce using rule 33 (unaryop -> DEC ID .)
    SEMICOLON       reduce using rule 33 (unaryop -> DEC ID .)


state 74

    (67) defn -> PROC procname . LPARENT formals RPARENT

    LPARENT         shift and go to state 116


state 75

    (14) stmt -> WHILE LPARENT . cond RPARENT stmt END
    (19) cond -> . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 114
    callfunc                       shift and go to state 39
    asgn                           shift and go to state 7
    cond                           shift and go to state 117
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50
    bltin                          shift and go to state 12

state 76

    (26) expr -> LPARENT expr . RPARENT
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    RPARENT         shift and go to state 118
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89


state 77

    (4) list -> list defn NEWLINE .

    NEWLINE         reduce using rule 4 (list -> list defn NEWLINE .)
    error           reduce using rule 4 (list -> list defn NEWLINE .)
    COMMENT         reduce using rule 4 (list -> list defn NEWLINE .)
    FUNC            reduce using rule 4 (list -> list defn NEWLINE .)
    PROC            reduce using rule 4 (list -> list defn NEWLINE .)
    RETURN          reduce using rule 4 (list -> list defn NEWLINE .)
    PROCEDURE       reduce using rule 4 (list -> list defn NEWLINE .)
    PRINT           reduce using rule 4 (list -> list defn NEWLINE .)
    WHILE           reduce using rule 4 (list -> list defn NEWLINE .)
    FOR             reduce using rule 4 (list -> list defn NEWLINE .)
    IF              reduce using rule 4 (list -> list defn NEWLINE .)
    LBRACKET        reduce using rule 4 (list -> list defn NEWLINE .)
    LPARENT         reduce using rule 4 (list -> list defn NEWLINE .)
    FLOAT           reduce using rule 4 (list -> list defn NEWLINE .)
    ID              reduce using rule 4 (list -> list defn NEWLINE .)
    UNARYMINUS      reduce using rule 4 (list -> list defn NEWLINE .)
    INC             reduce using rule 4 (list -> list defn NEWLINE .)
    DEC             reduce using rule 4 (list -> list defn NEWLINE .)
    PI              reduce using rule 4 (list -> list defn NEWLINE .)
    PHI             reduce using rule 4 (list -> list defn NEWLINE .)
    GAMMA           reduce using rule 4 (list -> list defn NEWLINE .)
    E               reduce using rule 4 (list -> list defn NEWLINE .)
    DEG             reduce using rule 4 (list -> list defn NEWLINE .)
    PREC            reduce using rule 4 (list -> list defn NEWLINE .)
    SIN             reduce using rule 4 (list -> list defn NEWLINE .)
    COS             reduce using rule 4 (list -> list defn NEWLINE .)
    TAN             reduce using rule 4 (list -> list defn NEWLINE .)
    ASIN            reduce using rule 4 (list -> list defn NEWLINE .)
    ACOS            reduce using rule 4 (list -> list defn NEWLINE .)
    ATAN            reduce using rule 4 (list -> list defn NEWLINE .)
    SINH            reduce using rule 4 (list -> list defn NEWLINE .)
    COSH            reduce using rule 4 (list -> list defn NEWLINE .)
    TANH            reduce using rule 4 (list -> list defn NEWLINE .)
    INT             reduce using rule 4 (list -> list defn NEWLINE .)
    LOG             reduce using rule 4 (list -> list defn NEWLINE .)
    LOG10           reduce using rule 4 (list -> list defn NEWLINE .)
    SQRT            reduce using rule 4 (list -> list defn NEWLINE .)
    ABS             reduce using rule 4 (list -> list defn NEWLINE .)
    ERF             reduce using rule 4 (list -> list defn NEWLINE .)
    ERFC            reduce using rule 4 (list -> list defn NEWLINE .)
    $end            reduce using rule 4 (list -> list defn NEWLINE .)


state 78

    (58) logicop -> expr AND . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 119
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 79

    (57) logicop -> expr OR . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 120
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 80

    (52) logicop -> expr GT . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 121
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 81

    (49) mathop -> expr DIVIDE . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 122
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 82

    (6) list -> list expr NEWLINE .

    NEWLINE         reduce using rule 6 (list -> list expr NEWLINE .)
    error           reduce using rule 6 (list -> list expr NEWLINE .)
    COMMENT         reduce using rule 6 (list -> list expr NEWLINE .)
    FUNC            reduce using rule 6 (list -> list expr NEWLINE .)
    PROC            reduce using rule 6 (list -> list expr NEWLINE .)
    RETURN          reduce using rule 6 (list -> list expr NEWLINE .)
    PROCEDURE       reduce using rule 6 (list -> list expr NEWLINE .)
    PRINT           reduce using rule 6 (list -> list expr NEWLINE .)
    WHILE           reduce using rule 6 (list -> list expr NEWLINE .)
    FOR             reduce using rule 6 (list -> list expr NEWLINE .)
    IF              reduce using rule 6 (list -> list expr NEWLINE .)
    LBRACKET        reduce using rule 6 (list -> list expr NEWLINE .)
    LPARENT         reduce using rule 6 (list -> list expr NEWLINE .)
    FLOAT           reduce using rule 6 (list -> list expr NEWLINE .)
    ID              reduce using rule 6 (list -> list expr NEWLINE .)
    UNARYMINUS      reduce using rule 6 (list -> list expr NEWLINE .)
    INC             reduce using rule 6 (list -> list expr NEWLINE .)
    DEC             reduce using rule 6 (list -> list expr NEWLINE .)
    PI              reduce using rule 6 (list -> list expr NEWLINE .)
    PHI             reduce using rule 6 (list -> list expr NEWLINE .)
    GAMMA           reduce using rule 6 (list -> list expr NEWLINE .)
    E               reduce using rule 6 (list -> list expr NEWLINE .)
    DEG             reduce using rule 6 (list -> list expr NEWLINE .)
    PREC            reduce using rule 6 (list -> list expr NEWLINE .)
    SIN             reduce using rule 6 (list -> list expr NEWLINE .)
    COS             reduce using rule 6 (list -> list expr NEWLINE .)
    TAN             reduce using rule 6 (list -> list expr NEWLINE .)
    ASIN            reduce using rule 6 (list -> list expr NEWLINE .)
    ACOS            reduce using rule 6 (list -> list expr NEWLINE .)
    ATAN            reduce using rule 6 (list -> list expr NEWLINE .)
    SINH            reduce using rule 6 (list -> list expr NEWLINE .)
    COSH            reduce using rule 6 (list -> list expr NEWLINE .)
    TANH            reduce using rule 6 (list -> list expr NEWLINE .)
    INT             reduce using rule 6 (list -> list expr NEWLINE .)
    LOG             reduce using rule 6 (list -> list expr NEWLINE .)
    LOG10           reduce using rule 6 (list -> list expr NEWLINE .)
    SQRT            reduce using rule 6 (list -> list expr NEWLINE .)
    ABS             reduce using rule 6 (list -> list expr NEWLINE .)
    ERF             reduce using rule 6 (list -> list expr NEWLINE .)
    ERFC            reduce using rule 6 (list -> list expr NEWLINE .)
    $end            reduce using rule 6 (list -> list expr NEWLINE .)


state 83

    (54) logicop -> expr GE . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 123
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 84

    (48) mathop -> expr TIMES . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 124
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 85

    (51) logicop -> expr LT . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 125
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 86

    (53) logicop -> expr LE . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 126
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 87

    (46) mathop -> expr PLUS . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 127
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 88

    (45) mathop -> expr EXP . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 128
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 89

    (59) logicop -> expr NOT . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 129
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 90

    (55) logicop -> expr EQ . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 130
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 91

    (47) mathop -> expr MINUS . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 131
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 92

    (56) logicop -> expr NE . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 132
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 93

    (50) mathop -> expr MOD . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 133
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 94

    (7) list -> list error NEWLINE .

    NEWLINE         reduce using rule 7 (list -> list error NEWLINE .)
    error           reduce using rule 7 (list -> list error NEWLINE .)
    COMMENT         reduce using rule 7 (list -> list error NEWLINE .)
    FUNC            reduce using rule 7 (list -> list error NEWLINE .)
    PROC            reduce using rule 7 (list -> list error NEWLINE .)
    RETURN          reduce using rule 7 (list -> list error NEWLINE .)
    PROCEDURE       reduce using rule 7 (list -> list error NEWLINE .)
    PRINT           reduce using rule 7 (list -> list error NEWLINE .)
    WHILE           reduce using rule 7 (list -> list error NEWLINE .)
    FOR             reduce using rule 7 (list -> list error NEWLINE .)
    IF              reduce using rule 7 (list -> list error NEWLINE .)
    LBRACKET        reduce using rule 7 (list -> list error NEWLINE .)
    LPARENT         reduce using rule 7 (list -> list error NEWLINE .)
    FLOAT           reduce using rule 7 (list -> list error NEWLINE .)
    ID              reduce using rule 7 (list -> list error NEWLINE .)
    UNARYMINUS      reduce using rule 7 (list -> list error NEWLINE .)
    INC             reduce using rule 7 (list -> list error NEWLINE .)
    DEC             reduce using rule 7 (list -> list error NEWLINE .)
    PI              reduce using rule 7 (list -> list error NEWLINE .)
    PHI             reduce using rule 7 (list -> list error NEWLINE .)
    GAMMA           reduce using rule 7 (list -> list error NEWLINE .)
    E               reduce using rule 7 (list -> list error NEWLINE .)
    DEG             reduce using rule 7 (list -> list error NEWLINE .)
    PREC            reduce using rule 7 (list -> list error NEWLINE .)
    SIN             reduce using rule 7 (list -> list error NEWLINE .)
    COS             reduce using rule 7 (list -> list error NEWLINE .)
    TAN             reduce using rule 7 (list -> list error NEWLINE .)
    ASIN            reduce using rule 7 (list -> list error NEWLINE .)
    ACOS            reduce using rule 7 (list -> list error NEWLINE .)
    ATAN            reduce using rule 7 (list -> list error NEWLINE .)
    SINH            reduce using rule 7 (list -> list error NEWLINE .)
    COSH            reduce using rule 7 (list -> list error NEWLINE .)
    TANH            reduce using rule 7 (list -> list error NEWLINE .)
    INT             reduce using rule 7 (list -> list error NEWLINE .)
    LOG             reduce using rule 7 (list -> list error NEWLINE .)
    LOG10           reduce using rule 7 (list -> list error NEWLINE .)
    SQRT            reduce using rule 7 (list -> list error NEWLINE .)
    ABS             reduce using rule 7 (list -> list error NEWLINE .)
    ERF             reduce using rule 7 (list -> list error NEWLINE .)
    ERFC            reduce using rule 7 (list -> list error NEWLINE .)
    $end            reduce using rule 7 (list -> list error NEWLINE .)


state 95

    (61) callfunc -> ID LPARENT . expr RPARENT
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 134
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 96

    (44) asgn -> ID MODEQ . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 135
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 97

    (39) asgn -> ID ASSIGN . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 136
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 98

    (41) asgn -> ID SUBEQ . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 137
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 99

    (40) asgn -> ID ADDEQ . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 138
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 100

    (42) asgn -> ID MULEQ . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 139
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 101

    (35) unaryop -> ID DEC .

    EXP             reduce using rule 35 (unaryop -> ID DEC .)
    PLUS            reduce using rule 35 (unaryop -> ID DEC .)
    MINUS           reduce using rule 35 (unaryop -> ID DEC .)
    TIMES           reduce using rule 35 (unaryop -> ID DEC .)
    DIVIDE          reduce using rule 35 (unaryop -> ID DEC .)
    MOD             reduce using rule 35 (unaryop -> ID DEC .)
    LT              reduce using rule 35 (unaryop -> ID DEC .)
    GT              reduce using rule 35 (unaryop -> ID DEC .)
    LE              reduce using rule 35 (unaryop -> ID DEC .)
    GE              reduce using rule 35 (unaryop -> ID DEC .)
    EQ              reduce using rule 35 (unaryop -> ID DEC .)
    NE              reduce using rule 35 (unaryop -> ID DEC .)
    OR              reduce using rule 35 (unaryop -> ID DEC .)
    AND             reduce using rule 35 (unaryop -> ID DEC .)
    NOT             reduce using rule 35 (unaryop -> ID DEC .)
    RPARENT         reduce using rule 35 (unaryop -> ID DEC .)
    NEWLINE         reduce using rule 35 (unaryop -> ID DEC .)
    RBRACKET        reduce using rule 35 (unaryop -> ID DEC .)
    RETURN          reduce using rule 35 (unaryop -> ID DEC .)
    PROCEDURE       reduce using rule 35 (unaryop -> ID DEC .)
    PRINT           reduce using rule 35 (unaryop -> ID DEC .)
    WHILE           reduce using rule 35 (unaryop -> ID DEC .)
    FOR             reduce using rule 35 (unaryop -> ID DEC .)
    IF              reduce using rule 35 (unaryop -> ID DEC .)
    LBRACKET        reduce using rule 35 (unaryop -> ID DEC .)
    LPARENT         reduce using rule 35 (unaryop -> ID DEC .)
    FLOAT           reduce using rule 35 (unaryop -> ID DEC .)
    ID              reduce using rule 35 (unaryop -> ID DEC .)
    UNARYMINUS      reduce using rule 35 (unaryop -> ID DEC .)
    INC             reduce using rule 35 (unaryop -> ID DEC .)
    DEC             reduce using rule 35 (unaryop -> ID DEC .)
    PI              reduce using rule 35 (unaryop -> ID DEC .)
    PHI             reduce using rule 35 (unaryop -> ID DEC .)
    GAMMA           reduce using rule 35 (unaryop -> ID DEC .)
    E               reduce using rule 35 (unaryop -> ID DEC .)
    DEG             reduce using rule 35 (unaryop -> ID DEC .)
    PREC            reduce using rule 35 (unaryop -> ID DEC .)
    SIN             reduce using rule 35 (unaryop -> ID DEC .)
    COS             reduce using rule 35 (unaryop -> ID DEC .)
    TAN             reduce using rule 35 (unaryop -> ID DEC .)
    ASIN            reduce using rule 35 (unaryop -> ID DEC .)
    ACOS            reduce using rule 35 (unaryop -> ID DEC .)
    ATAN            reduce using rule 35 (unaryop -> ID DEC .)
    SINH            reduce using rule 35 (unaryop -> ID DEC .)
    COSH            reduce using rule 35 (unaryop -> ID DEC .)
    TANH            reduce using rule 35 (unaryop -> ID DEC .)
    INT             reduce using rule 35 (unaryop -> ID DEC .)
    LOG             reduce using rule 35 (unaryop -> ID DEC .)
    LOG10           reduce using rule 35 (unaryop -> ID DEC .)
    SQRT            reduce using rule 35 (unaryop -> ID DEC .)
    ABS             reduce using rule 35 (unaryop -> ID DEC .)
    ERF             reduce using rule 35 (unaryop -> ID DEC .)
    ERFC            reduce using rule 35 (unaryop -> ID DEC .)
    END             reduce using rule 35 (unaryop -> ID DEC .)
    COMMA           reduce using rule 35 (unaryop -> ID DEC .)
    SEMICOLON       reduce using rule 35 (unaryop -> ID DEC .)


state 102

    (43) asgn -> ID DIVEQ . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 140
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 103

    (34) unaryop -> ID INC .

    EXP             reduce using rule 34 (unaryop -> ID INC .)
    PLUS            reduce using rule 34 (unaryop -> ID INC .)
    MINUS           reduce using rule 34 (unaryop -> ID INC .)
    TIMES           reduce using rule 34 (unaryop -> ID INC .)
    DIVIDE          reduce using rule 34 (unaryop -> ID INC .)
    MOD             reduce using rule 34 (unaryop -> ID INC .)
    LT              reduce using rule 34 (unaryop -> ID INC .)
    GT              reduce using rule 34 (unaryop -> ID INC .)
    LE              reduce using rule 34 (unaryop -> ID INC .)
    GE              reduce using rule 34 (unaryop -> ID INC .)
    EQ              reduce using rule 34 (unaryop -> ID INC .)
    NE              reduce using rule 34 (unaryop -> ID INC .)
    OR              reduce using rule 34 (unaryop -> ID INC .)
    AND             reduce using rule 34 (unaryop -> ID INC .)
    NOT             reduce using rule 34 (unaryop -> ID INC .)
    RPARENT         reduce using rule 34 (unaryop -> ID INC .)
    NEWLINE         reduce using rule 34 (unaryop -> ID INC .)
    RBRACKET        reduce using rule 34 (unaryop -> ID INC .)
    RETURN          reduce using rule 34 (unaryop -> ID INC .)
    PROCEDURE       reduce using rule 34 (unaryop -> ID INC .)
    PRINT           reduce using rule 34 (unaryop -> ID INC .)
    WHILE           reduce using rule 34 (unaryop -> ID INC .)
    FOR             reduce using rule 34 (unaryop -> ID INC .)
    IF              reduce using rule 34 (unaryop -> ID INC .)
    LBRACKET        reduce using rule 34 (unaryop -> ID INC .)
    LPARENT         reduce using rule 34 (unaryop -> ID INC .)
    FLOAT           reduce using rule 34 (unaryop -> ID INC .)
    ID              reduce using rule 34 (unaryop -> ID INC .)
    UNARYMINUS      reduce using rule 34 (unaryop -> ID INC .)
    INC             reduce using rule 34 (unaryop -> ID INC .)
    DEC             reduce using rule 34 (unaryop -> ID INC .)
    PI              reduce using rule 34 (unaryop -> ID INC .)
    PHI             reduce using rule 34 (unaryop -> ID INC .)
    GAMMA           reduce using rule 34 (unaryop -> ID INC .)
    E               reduce using rule 34 (unaryop -> ID INC .)
    DEG             reduce using rule 34 (unaryop -> ID INC .)
    PREC            reduce using rule 34 (unaryop -> ID INC .)
    SIN             reduce using rule 34 (unaryop -> ID INC .)
    COS             reduce using rule 34 (unaryop -> ID INC .)
    TAN             reduce using rule 34 (unaryop -> ID INC .)
    ASIN            reduce using rule 34 (unaryop -> ID INC .)
    ACOS            reduce using rule 34 (unaryop -> ID INC .)
    ATAN            reduce using rule 34 (unaryop -> ID INC .)
    SINH            reduce using rule 34 (unaryop -> ID INC .)
    COSH            reduce using rule 34 (unaryop -> ID INC .)
    TANH            reduce using rule 34 (unaryop -> ID INC .)
    INT             reduce using rule 34 (unaryop -> ID INC .)
    LOG             reduce using rule 34 (unaryop -> ID INC .)
    LOG10           reduce using rule 34 (unaryop -> ID INC .)
    SQRT            reduce using rule 34 (unaryop -> ID INC .)
    ABS             reduce using rule 34 (unaryop -> ID INC .)
    ERF             reduce using rule 34 (unaryop -> ID INC .)
    ERFC            reduce using rule 34 (unaryop -> ID INC .)
    END             reduce using rule 34 (unaryop -> ID INC .)
    COMMA           reduce using rule 34 (unaryop -> ID INC .)
    SEMICOLON       reduce using rule 34 (unaryop -> ID INC .)


state 104

    (16) stmt -> IF LPARENT . cond RPARENT stmt END
    (17) stmt -> IF LPARENT . cond RPARENT stmt END ELSE stmt END
    (19) cond -> . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 114
    callfunc                       shift and go to state 39
    asgn                           shift and go to state 7
    cond                           shift and go to state 141
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50
    bltin                          shift and go to state 12

state 105

    (32) unaryop -> INC ID .

    EXP             reduce using rule 32 (unaryop -> INC ID .)
    PLUS            reduce using rule 32 (unaryop -> INC ID .)
    MINUS           reduce using rule 32 (unaryop -> INC ID .)
    TIMES           reduce using rule 32 (unaryop -> INC ID .)
    DIVIDE          reduce using rule 32 (unaryop -> INC ID .)
    MOD             reduce using rule 32 (unaryop -> INC ID .)
    LT              reduce using rule 32 (unaryop -> INC ID .)
    GT              reduce using rule 32 (unaryop -> INC ID .)
    LE              reduce using rule 32 (unaryop -> INC ID .)
    GE              reduce using rule 32 (unaryop -> INC ID .)
    EQ              reduce using rule 32 (unaryop -> INC ID .)
    NE              reduce using rule 32 (unaryop -> INC ID .)
    OR              reduce using rule 32 (unaryop -> INC ID .)
    AND             reduce using rule 32 (unaryop -> INC ID .)
    NOT             reduce using rule 32 (unaryop -> INC ID .)
    RPARENT         reduce using rule 32 (unaryop -> INC ID .)
    NEWLINE         reduce using rule 32 (unaryop -> INC ID .)
    RBRACKET        reduce using rule 32 (unaryop -> INC ID .)
    RETURN          reduce using rule 32 (unaryop -> INC ID .)
    PROCEDURE       reduce using rule 32 (unaryop -> INC ID .)
    PRINT           reduce using rule 32 (unaryop -> INC ID .)
    WHILE           reduce using rule 32 (unaryop -> INC ID .)
    FOR             reduce using rule 32 (unaryop -> INC ID .)
    IF              reduce using rule 32 (unaryop -> INC ID .)
    LBRACKET        reduce using rule 32 (unaryop -> INC ID .)
    LPARENT         reduce using rule 32 (unaryop -> INC ID .)
    FLOAT           reduce using rule 32 (unaryop -> INC ID .)
    ID              reduce using rule 32 (unaryop -> INC ID .)
    UNARYMINUS      reduce using rule 32 (unaryop -> INC ID .)
    INC             reduce using rule 32 (unaryop -> INC ID .)
    DEC             reduce using rule 32 (unaryop -> INC ID .)
    PI              reduce using rule 32 (unaryop -> INC ID .)
    PHI             reduce using rule 32 (unaryop -> INC ID .)
    GAMMA           reduce using rule 32 (unaryop -> INC ID .)
    E               reduce using rule 32 (unaryop -> INC ID .)
    DEG             reduce using rule 32 (unaryop -> INC ID .)
    PREC            reduce using rule 32 (unaryop -> INC ID .)
    SIN             reduce using rule 32 (unaryop -> INC ID .)
    COS             reduce using rule 32 (unaryop -> INC ID .)
    TAN             reduce using rule 32 (unaryop -> INC ID .)
    ASIN            reduce using rule 32 (unaryop -> INC ID .)
    ACOS            reduce using rule 32 (unaryop -> INC ID .)
    ATAN            reduce using rule 32 (unaryop -> INC ID .)
    SINH            reduce using rule 32 (unaryop -> INC ID .)
    COSH            reduce using rule 32 (unaryop -> INC ID .)
    TANH            reduce using rule 32 (unaryop -> INC ID .)
    INT             reduce using rule 32 (unaryop -> INC ID .)
    LOG             reduce using rule 32 (unaryop -> INC ID .)
    LOG10           reduce using rule 32 (unaryop -> INC ID .)
    SQRT            reduce using rule 32 (unaryop -> INC ID .)
    ABS             reduce using rule 32 (unaryop -> INC ID .)
    ERF             reduce using rule 32 (unaryop -> INC ID .)
    ERFC            reduce using rule 32 (unaryop -> INC ID .)
    END             reduce using rule 32 (unaryop -> INC ID .)
    COMMA           reduce using rule 32 (unaryop -> INC ID .)
    SEMICOLON       reduce using rule 32 (unaryop -> INC ID .)


state 106

    (21) stmtlist -> stmtlist NEWLINE .

    RBRACKET        reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    NEWLINE         reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    RETURN          reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    PROCEDURE       reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    PRINT           reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    WHILE           reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    FOR             reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    IF              reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    LBRACKET        reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    LPARENT         reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    FLOAT           reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    ID              reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    UNARYMINUS      reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    INC             reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    DEC             reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    PI              reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    PHI             reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    GAMMA           reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    E               reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    DEG             reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    PREC            reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    SIN             reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    COS             reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    TAN             reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    ASIN            reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    ACOS            reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    ATAN            reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    SINH            reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    COSH            reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    TANH            reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    INT             reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    LOG             reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    LOG10           reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    SQRT            reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    ABS             reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    ERF             reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)
    ERFC            reduce using rule 21 (stmtlist -> stmtlist NEWLINE .)


state 107

    (22) stmtlist -> stmtlist stmt .

    RBRACKET        reduce using rule 22 (stmtlist -> stmtlist stmt .)
    NEWLINE         reduce using rule 22 (stmtlist -> stmtlist stmt .)
    RETURN          reduce using rule 22 (stmtlist -> stmtlist stmt .)
    PROCEDURE       reduce using rule 22 (stmtlist -> stmtlist stmt .)
    PRINT           reduce using rule 22 (stmtlist -> stmtlist stmt .)
    WHILE           reduce using rule 22 (stmtlist -> stmtlist stmt .)
    FOR             reduce using rule 22 (stmtlist -> stmtlist stmt .)
    IF              reduce using rule 22 (stmtlist -> stmtlist stmt .)
    LBRACKET        reduce using rule 22 (stmtlist -> stmtlist stmt .)
    LPARENT         reduce using rule 22 (stmtlist -> stmtlist stmt .)
    FLOAT           reduce using rule 22 (stmtlist -> stmtlist stmt .)
    ID              reduce using rule 22 (stmtlist -> stmtlist stmt .)
    UNARYMINUS      reduce using rule 22 (stmtlist -> stmtlist stmt .)
    INC             reduce using rule 22 (stmtlist -> stmtlist stmt .)
    DEC             reduce using rule 22 (stmtlist -> stmtlist stmt .)
    PI              reduce using rule 22 (stmtlist -> stmtlist stmt .)
    PHI             reduce using rule 22 (stmtlist -> stmtlist stmt .)
    GAMMA           reduce using rule 22 (stmtlist -> stmtlist stmt .)
    E               reduce using rule 22 (stmtlist -> stmtlist stmt .)
    DEG             reduce using rule 22 (stmtlist -> stmtlist stmt .)
    PREC            reduce using rule 22 (stmtlist -> stmtlist stmt .)
    SIN             reduce using rule 22 (stmtlist -> stmtlist stmt .)
    COS             reduce using rule 22 (stmtlist -> stmtlist stmt .)
    TAN             reduce using rule 22 (stmtlist -> stmtlist stmt .)
    ASIN            reduce using rule 22 (stmtlist -> stmtlist stmt .)
    ACOS            reduce using rule 22 (stmtlist -> stmtlist stmt .)
    ATAN            reduce using rule 22 (stmtlist -> stmtlist stmt .)
    SINH            reduce using rule 22 (stmtlist -> stmtlist stmt .)
    COSH            reduce using rule 22 (stmtlist -> stmtlist stmt .)
    TANH            reduce using rule 22 (stmtlist -> stmtlist stmt .)
    INT             reduce using rule 22 (stmtlist -> stmtlist stmt .)
    LOG             reduce using rule 22 (stmtlist -> stmtlist stmt .)
    LOG10           reduce using rule 22 (stmtlist -> stmtlist stmt .)
    SQRT            reduce using rule 22 (stmtlist -> stmtlist stmt .)
    ABS             reduce using rule 22 (stmtlist -> stmtlist stmt .)
    ERF             reduce using rule 22 (stmtlist -> stmtlist stmt .)
    ERFC            reduce using rule 22 (stmtlist -> stmtlist stmt .)


state 108

    (9) stmt -> expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    END             reduce using rule 9 (stmt -> expr .)
    RBRACKET        reduce using rule 9 (stmt -> expr .)
    NEWLINE         reduce using rule 9 (stmt -> expr .)
    RETURN          reduce using rule 9 (stmt -> expr .)
    PROCEDURE       reduce using rule 9 (stmt -> expr .)
    PRINT           reduce using rule 9 (stmt -> expr .)
    WHILE           reduce using rule 9 (stmt -> expr .)
    FOR             reduce using rule 9 (stmt -> expr .)
    IF              reduce using rule 9 (stmt -> expr .)
    LBRACKET        reduce using rule 9 (stmt -> expr .)
    LPARENT         reduce using rule 9 (stmt -> expr .)
    FLOAT           reduce using rule 9 (stmt -> expr .)
    ID              reduce using rule 9 (stmt -> expr .)
    UNARYMINUS      reduce using rule 9 (stmt -> expr .)
    INC             reduce using rule 9 (stmt -> expr .)
    DEC             reduce using rule 9 (stmt -> expr .)
    PI              reduce using rule 9 (stmt -> expr .)
    PHI             reduce using rule 9 (stmt -> expr .)
    GAMMA           reduce using rule 9 (stmt -> expr .)
    E               reduce using rule 9 (stmt -> expr .)
    DEG             reduce using rule 9 (stmt -> expr .)
    PREC            reduce using rule 9 (stmt -> expr .)
    SIN             reduce using rule 9 (stmt -> expr .)
    COS             reduce using rule 9 (stmt -> expr .)
    TAN             reduce using rule 9 (stmt -> expr .)
    ASIN            reduce using rule 9 (stmt -> expr .)
    ACOS            reduce using rule 9 (stmt -> expr .)
    ATAN            reduce using rule 9 (stmt -> expr .)
    SINH            reduce using rule 9 (stmt -> expr .)
    COSH            reduce using rule 9 (stmt -> expr .)
    TANH            reduce using rule 9 (stmt -> expr .)
    INT             reduce using rule 9 (stmt -> expr .)
    LOG             reduce using rule 9 (stmt -> expr .)
    LOG10           reduce using rule 9 (stmt -> expr .)
    SQRT            reduce using rule 9 (stmt -> expr .)
    ABS             reduce using rule 9 (stmt -> expr .)
    ERF             reduce using rule 9 (stmt -> expr .)
    ERFC            reduce using rule 9 (stmt -> expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89


state 109

    (18) stmt -> LBRACKET stmtlist RBRACKET .

    END             reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    NEWLINE         reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    RBRACKET        reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    RETURN          reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    PROCEDURE       reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    PRINT           reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    WHILE           reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    FOR             reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    IF              reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    LBRACKET        reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    LPARENT         reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    FLOAT           reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    ID              reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    UNARYMINUS      reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    INC             reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    DEC             reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    PI              reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    PHI             reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    GAMMA           reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    E               reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    DEG             reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    PREC            reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    SIN             reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    COS             reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    TAN             reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    ASIN            reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    ACOS            reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    ATAN            reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    SINH            reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    COSH            reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    TANH            reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    INT             reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    LOG             reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    LOG10           reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    SQRT            reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    ABS             reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    ERF             reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)
    ERFC            reduce using rule 18 (stmt -> LBRACKET stmtlist RBRACKET .)


state 110

    (12) stmt -> PROCEDURE BEGIN LPARENT . arglist RPARENT
    (74) arglist -> . empty
    (75) arglist -> . expr
    (76) arglist -> . arglist COMMA expr
    (77) empty -> .
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    RPARENT         reduce using rule 77 (empty -> .)
    COMMA           reduce using rule 77 (empty -> .)
    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 144
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    arglist                        shift and go to state 142
    data                           shift and go to state 50
    empty                          shift and go to state 143

state 111

    (60) callfunc -> bltin LPARENT expr . RPARENT
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    RPARENT         shift and go to state 145
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89


state 112

    (64) prlist -> prlist COMMA . expr
    (65) prlist -> prlist COMMA . STRING
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    STRING          shift and go to state 146
    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 147
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 113

    (15) stmt -> FOR LPARENT cond . SEMICOLON cond SEMICOLON cond RPARENT stmt END

    SEMICOLON       shift and go to state 148


state 114

    (19) cond -> expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    SEMICOLON       reduce using rule 19 (cond -> expr .)
    RPARENT         reduce using rule 19 (cond -> expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89


state 115

    (66) defn -> FUNC procname LPARENT . formals RPARENT
    (68) formals -> . ID
    (69) formals -> . ID COMMA formals

    ID              shift and go to state 149

    formals                        shift and go to state 150

state 116

    (67) defn -> PROC procname LPARENT . formals RPARENT
    (68) formals -> . ID
    (69) formals -> . ID COMMA formals

    ID              shift and go to state 149

    formals                        shift and go to state 151

state 117

    (14) stmt -> WHILE LPARENT cond . RPARENT stmt END

    RPARENT         shift and go to state 152


state 118

    (26) expr -> LPARENT expr RPARENT .

    EXP             reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    PLUS            reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    MINUS           reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    TIMES           reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    DIVIDE          reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    MOD             reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    LT              reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    GT              reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    LE              reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    GE              reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    EQ              reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    NE              reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    OR              reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    AND             reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    NOT             reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    NEWLINE         reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    RBRACKET        reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    RETURN          reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    PROCEDURE       reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    PRINT           reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    WHILE           reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    FOR             reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    IF              reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    LBRACKET        reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    LPARENT         reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    FLOAT           reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    ID              reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    UNARYMINUS      reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    INC             reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    DEC             reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    PI              reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    PHI             reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    GAMMA           reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    E               reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    DEG             reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    PREC            reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    SIN             reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    COS             reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    TAN             reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    ASIN            reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    ACOS            reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    ATAN            reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    SINH            reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    COSH            reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    TANH            reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    INT             reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    LOG             reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    LOG10           reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    SQRT            reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    ABS             reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    ERF             reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    ERFC            reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    END             reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    COMMA           reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    RPARENT         reduce using rule 26 (expr -> LPARENT expr RPARENT .)
    SEMICOLON       reduce using rule 26 (expr -> LPARENT expr RPARENT .)


state 119

    (58) logicop -> expr AND expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    RPARENT         reduce using rule 58 (logicop -> expr AND expr .)
    OR              reduce using rule 58 (logicop -> expr AND expr .)
    AND             reduce using rule 58 (logicop -> expr AND expr .)
    NEWLINE         reduce using rule 58 (logicop -> expr AND expr .)
    RBRACKET        reduce using rule 58 (logicop -> expr AND expr .)
    RETURN          reduce using rule 58 (logicop -> expr AND expr .)
    PROCEDURE       reduce using rule 58 (logicop -> expr AND expr .)
    PRINT           reduce using rule 58 (logicop -> expr AND expr .)
    WHILE           reduce using rule 58 (logicop -> expr AND expr .)
    FOR             reduce using rule 58 (logicop -> expr AND expr .)
    IF              reduce using rule 58 (logicop -> expr AND expr .)
    LBRACKET        reduce using rule 58 (logicop -> expr AND expr .)
    LPARENT         reduce using rule 58 (logicop -> expr AND expr .)
    FLOAT           reduce using rule 58 (logicop -> expr AND expr .)
    ID              reduce using rule 58 (logicop -> expr AND expr .)
    UNARYMINUS      reduce using rule 58 (logicop -> expr AND expr .)
    INC             reduce using rule 58 (logicop -> expr AND expr .)
    DEC             reduce using rule 58 (logicop -> expr AND expr .)
    PI              reduce using rule 58 (logicop -> expr AND expr .)
    PHI             reduce using rule 58 (logicop -> expr AND expr .)
    GAMMA           reduce using rule 58 (logicop -> expr AND expr .)
    E               reduce using rule 58 (logicop -> expr AND expr .)
    DEG             reduce using rule 58 (logicop -> expr AND expr .)
    PREC            reduce using rule 58 (logicop -> expr AND expr .)
    SIN             reduce using rule 58 (logicop -> expr AND expr .)
    COS             reduce using rule 58 (logicop -> expr AND expr .)
    TAN             reduce using rule 58 (logicop -> expr AND expr .)
    ASIN            reduce using rule 58 (logicop -> expr AND expr .)
    ACOS            reduce using rule 58 (logicop -> expr AND expr .)
    ATAN            reduce using rule 58 (logicop -> expr AND expr .)
    SINH            reduce using rule 58 (logicop -> expr AND expr .)
    COSH            reduce using rule 58 (logicop -> expr AND expr .)
    TANH            reduce using rule 58 (logicop -> expr AND expr .)
    INT             reduce using rule 58 (logicop -> expr AND expr .)
    LOG             reduce using rule 58 (logicop -> expr AND expr .)
    LOG10           reduce using rule 58 (logicop -> expr AND expr .)
    SQRT            reduce using rule 58 (logicop -> expr AND expr .)
    ABS             reduce using rule 58 (logicop -> expr AND expr .)
    ERF             reduce using rule 58 (logicop -> expr AND expr .)
    ERFC            reduce using rule 58 (logicop -> expr AND expr .)
    END             reduce using rule 58 (logicop -> expr AND expr .)
    COMMA           reduce using rule 58 (logicop -> expr AND expr .)
    SEMICOLON       reduce using rule 58 (logicop -> expr AND expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 58 (logicop -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 58 (logicop -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 58 (logicop -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 58 (logicop -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 58 (logicop -> expr AND expr .) ]
  ! MOD             [ reduce using rule 58 (logicop -> expr AND expr .) ]
  ! LT              [ reduce using rule 58 (logicop -> expr AND expr .) ]
  ! GT              [ reduce using rule 58 (logicop -> expr AND expr .) ]
  ! LE              [ reduce using rule 58 (logicop -> expr AND expr .) ]
  ! GE              [ reduce using rule 58 (logicop -> expr AND expr .) ]
  ! EQ              [ reduce using rule 58 (logicop -> expr AND expr .) ]
  ! NE              [ reduce using rule 58 (logicop -> expr AND expr .) ]
  ! NOT             [ reduce using rule 58 (logicop -> expr AND expr .) ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]


state 120

    (57) logicop -> expr OR expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    RPARENT         reduce using rule 57 (logicop -> expr OR expr .)
    OR              reduce using rule 57 (logicop -> expr OR expr .)
    NEWLINE         reduce using rule 57 (logicop -> expr OR expr .)
    RBRACKET        reduce using rule 57 (logicop -> expr OR expr .)
    RETURN          reduce using rule 57 (logicop -> expr OR expr .)
    PROCEDURE       reduce using rule 57 (logicop -> expr OR expr .)
    PRINT           reduce using rule 57 (logicop -> expr OR expr .)
    WHILE           reduce using rule 57 (logicop -> expr OR expr .)
    FOR             reduce using rule 57 (logicop -> expr OR expr .)
    IF              reduce using rule 57 (logicop -> expr OR expr .)
    LBRACKET        reduce using rule 57 (logicop -> expr OR expr .)
    LPARENT         reduce using rule 57 (logicop -> expr OR expr .)
    FLOAT           reduce using rule 57 (logicop -> expr OR expr .)
    ID              reduce using rule 57 (logicop -> expr OR expr .)
    UNARYMINUS      reduce using rule 57 (logicop -> expr OR expr .)
    INC             reduce using rule 57 (logicop -> expr OR expr .)
    DEC             reduce using rule 57 (logicop -> expr OR expr .)
    PI              reduce using rule 57 (logicop -> expr OR expr .)
    PHI             reduce using rule 57 (logicop -> expr OR expr .)
    GAMMA           reduce using rule 57 (logicop -> expr OR expr .)
    E               reduce using rule 57 (logicop -> expr OR expr .)
    DEG             reduce using rule 57 (logicop -> expr OR expr .)
    PREC            reduce using rule 57 (logicop -> expr OR expr .)
    SIN             reduce using rule 57 (logicop -> expr OR expr .)
    COS             reduce using rule 57 (logicop -> expr OR expr .)
    TAN             reduce using rule 57 (logicop -> expr OR expr .)
    ASIN            reduce using rule 57 (logicop -> expr OR expr .)
    ACOS            reduce using rule 57 (logicop -> expr OR expr .)
    ATAN            reduce using rule 57 (logicop -> expr OR expr .)
    SINH            reduce using rule 57 (logicop -> expr OR expr .)
    COSH            reduce using rule 57 (logicop -> expr OR expr .)
    TANH            reduce using rule 57 (logicop -> expr OR expr .)
    INT             reduce using rule 57 (logicop -> expr OR expr .)
    LOG             reduce using rule 57 (logicop -> expr OR expr .)
    LOG10           reduce using rule 57 (logicop -> expr OR expr .)
    SQRT            reduce using rule 57 (logicop -> expr OR expr .)
    ABS             reduce using rule 57 (logicop -> expr OR expr .)
    ERF             reduce using rule 57 (logicop -> expr OR expr .)
    ERFC            reduce using rule 57 (logicop -> expr OR expr .)
    END             reduce using rule 57 (logicop -> expr OR expr .)
    COMMA           reduce using rule 57 (logicop -> expr OR expr .)
    SEMICOLON       reduce using rule 57 (logicop -> expr OR expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    AND             shift and go to state 78
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 57 (logicop -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 57 (logicop -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 57 (logicop -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 57 (logicop -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 57 (logicop -> expr OR expr .) ]
  ! MOD             [ reduce using rule 57 (logicop -> expr OR expr .) ]
  ! LT              [ reduce using rule 57 (logicop -> expr OR expr .) ]
  ! GT              [ reduce using rule 57 (logicop -> expr OR expr .) ]
  ! LE              [ reduce using rule 57 (logicop -> expr OR expr .) ]
  ! GE              [ reduce using rule 57 (logicop -> expr OR expr .) ]
  ! EQ              [ reduce using rule 57 (logicop -> expr OR expr .) ]
  ! NE              [ reduce using rule 57 (logicop -> expr OR expr .) ]
  ! AND             [ reduce using rule 57 (logicop -> expr OR expr .) ]
  ! NOT             [ reduce using rule 57 (logicop -> expr OR expr .) ]
  ! OR              [ shift and go to state 79 ]


state 121

    (52) logicop -> expr GT expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    RPARENT         reduce using rule 52 (logicop -> expr GT expr .)
    LT              reduce using rule 52 (logicop -> expr GT expr .)
    GT              reduce using rule 52 (logicop -> expr GT expr .)
    LE              reduce using rule 52 (logicop -> expr GT expr .)
    GE              reduce using rule 52 (logicop -> expr GT expr .)
    EQ              reduce using rule 52 (logicop -> expr GT expr .)
    NE              reduce using rule 52 (logicop -> expr GT expr .)
    OR              reduce using rule 52 (logicop -> expr GT expr .)
    AND             reduce using rule 52 (logicop -> expr GT expr .)
    NEWLINE         reduce using rule 52 (logicop -> expr GT expr .)
    RBRACKET        reduce using rule 52 (logicop -> expr GT expr .)
    RETURN          reduce using rule 52 (logicop -> expr GT expr .)
    PROCEDURE       reduce using rule 52 (logicop -> expr GT expr .)
    PRINT           reduce using rule 52 (logicop -> expr GT expr .)
    WHILE           reduce using rule 52 (logicop -> expr GT expr .)
    FOR             reduce using rule 52 (logicop -> expr GT expr .)
    IF              reduce using rule 52 (logicop -> expr GT expr .)
    LBRACKET        reduce using rule 52 (logicop -> expr GT expr .)
    LPARENT         reduce using rule 52 (logicop -> expr GT expr .)
    FLOAT           reduce using rule 52 (logicop -> expr GT expr .)
    ID              reduce using rule 52 (logicop -> expr GT expr .)
    UNARYMINUS      reduce using rule 52 (logicop -> expr GT expr .)
    INC             reduce using rule 52 (logicop -> expr GT expr .)
    DEC             reduce using rule 52 (logicop -> expr GT expr .)
    PI              reduce using rule 52 (logicop -> expr GT expr .)
    PHI             reduce using rule 52 (logicop -> expr GT expr .)
    GAMMA           reduce using rule 52 (logicop -> expr GT expr .)
    E               reduce using rule 52 (logicop -> expr GT expr .)
    DEG             reduce using rule 52 (logicop -> expr GT expr .)
    PREC            reduce using rule 52 (logicop -> expr GT expr .)
    SIN             reduce using rule 52 (logicop -> expr GT expr .)
    COS             reduce using rule 52 (logicop -> expr GT expr .)
    TAN             reduce using rule 52 (logicop -> expr GT expr .)
    ASIN            reduce using rule 52 (logicop -> expr GT expr .)
    ACOS            reduce using rule 52 (logicop -> expr GT expr .)
    ATAN            reduce using rule 52 (logicop -> expr GT expr .)
    SINH            reduce using rule 52 (logicop -> expr GT expr .)
    COSH            reduce using rule 52 (logicop -> expr GT expr .)
    TANH            reduce using rule 52 (logicop -> expr GT expr .)
    INT             reduce using rule 52 (logicop -> expr GT expr .)
    LOG             reduce using rule 52 (logicop -> expr GT expr .)
    LOG10           reduce using rule 52 (logicop -> expr GT expr .)
    SQRT            reduce using rule 52 (logicop -> expr GT expr .)
    ABS             reduce using rule 52 (logicop -> expr GT expr .)
    ERF             reduce using rule 52 (logicop -> expr GT expr .)
    ERFC            reduce using rule 52 (logicop -> expr GT expr .)
    END             reduce using rule 52 (logicop -> expr GT expr .)
    COMMA           reduce using rule 52 (logicop -> expr GT expr .)
    SEMICOLON       reduce using rule 52 (logicop -> expr GT expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 52 (logicop -> expr GT expr .) ]
  ! PLUS            [ reduce using rule 52 (logicop -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 52 (logicop -> expr GT expr .) ]
  ! TIMES           [ reduce using rule 52 (logicop -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 52 (logicop -> expr GT expr .) ]
  ! MOD             [ reduce using rule 52 (logicop -> expr GT expr .) ]
  ! NOT             [ reduce using rule 52 (logicop -> expr GT expr .) ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]


state 122

    (49) mathop -> expr DIVIDE expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    PLUS            reduce using rule 49 (mathop -> expr DIVIDE expr .)
    MINUS           reduce using rule 49 (mathop -> expr DIVIDE expr .)
    TIMES           reduce using rule 49 (mathop -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 49 (mathop -> expr DIVIDE expr .)
    MOD             reduce using rule 49 (mathop -> expr DIVIDE expr .)
    LT              reduce using rule 49 (mathop -> expr DIVIDE expr .)
    GT              reduce using rule 49 (mathop -> expr DIVIDE expr .)
    LE              reduce using rule 49 (mathop -> expr DIVIDE expr .)
    GE              reduce using rule 49 (mathop -> expr DIVIDE expr .)
    EQ              reduce using rule 49 (mathop -> expr DIVIDE expr .)
    NE              reduce using rule 49 (mathop -> expr DIVIDE expr .)
    OR              reduce using rule 49 (mathop -> expr DIVIDE expr .)
    AND             reduce using rule 49 (mathop -> expr DIVIDE expr .)
    SEMICOLON       reduce using rule 49 (mathop -> expr DIVIDE expr .)
    NEWLINE         reduce using rule 49 (mathop -> expr DIVIDE expr .)
    RBRACKET        reduce using rule 49 (mathop -> expr DIVIDE expr .)
    RETURN          reduce using rule 49 (mathop -> expr DIVIDE expr .)
    PROCEDURE       reduce using rule 49 (mathop -> expr DIVIDE expr .)
    PRINT           reduce using rule 49 (mathop -> expr DIVIDE expr .)
    WHILE           reduce using rule 49 (mathop -> expr DIVIDE expr .)
    FOR             reduce using rule 49 (mathop -> expr DIVIDE expr .)
    IF              reduce using rule 49 (mathop -> expr DIVIDE expr .)
    LBRACKET        reduce using rule 49 (mathop -> expr DIVIDE expr .)
    LPARENT         reduce using rule 49 (mathop -> expr DIVIDE expr .)
    FLOAT           reduce using rule 49 (mathop -> expr DIVIDE expr .)
    ID              reduce using rule 49 (mathop -> expr DIVIDE expr .)
    UNARYMINUS      reduce using rule 49 (mathop -> expr DIVIDE expr .)
    INC             reduce using rule 49 (mathop -> expr DIVIDE expr .)
    DEC             reduce using rule 49 (mathop -> expr DIVIDE expr .)
    PI              reduce using rule 49 (mathop -> expr DIVIDE expr .)
    PHI             reduce using rule 49 (mathop -> expr DIVIDE expr .)
    GAMMA           reduce using rule 49 (mathop -> expr DIVIDE expr .)
    E               reduce using rule 49 (mathop -> expr DIVIDE expr .)
    DEG             reduce using rule 49 (mathop -> expr DIVIDE expr .)
    PREC            reduce using rule 49 (mathop -> expr DIVIDE expr .)
    SIN             reduce using rule 49 (mathop -> expr DIVIDE expr .)
    COS             reduce using rule 49 (mathop -> expr DIVIDE expr .)
    TAN             reduce using rule 49 (mathop -> expr DIVIDE expr .)
    ASIN            reduce using rule 49 (mathop -> expr DIVIDE expr .)
    ACOS            reduce using rule 49 (mathop -> expr DIVIDE expr .)
    ATAN            reduce using rule 49 (mathop -> expr DIVIDE expr .)
    SINH            reduce using rule 49 (mathop -> expr DIVIDE expr .)
    COSH            reduce using rule 49 (mathop -> expr DIVIDE expr .)
    TANH            reduce using rule 49 (mathop -> expr DIVIDE expr .)
    INT             reduce using rule 49 (mathop -> expr DIVIDE expr .)
    LOG             reduce using rule 49 (mathop -> expr DIVIDE expr .)
    LOG10           reduce using rule 49 (mathop -> expr DIVIDE expr .)
    SQRT            reduce using rule 49 (mathop -> expr DIVIDE expr .)
    ABS             reduce using rule 49 (mathop -> expr DIVIDE expr .)
    ERF             reduce using rule 49 (mathop -> expr DIVIDE expr .)
    ERFC            reduce using rule 49 (mathop -> expr DIVIDE expr .)
    END             reduce using rule 49 (mathop -> expr DIVIDE expr .)
    COMMA           reduce using rule 49 (mathop -> expr DIVIDE expr .)
    RPARENT         reduce using rule 49 (mathop -> expr DIVIDE expr .)
    EXP             shift and go to state 88
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 49 (mathop -> expr DIVIDE expr .) ]
  ! NOT             [ reduce using rule 49 (mathop -> expr DIVIDE expr .) ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 91 ]
  ! TIMES           [ shift and go to state 84 ]
  ! DIVIDE          [ shift and go to state 81 ]
  ! MOD             [ shift and go to state 93 ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]


state 123

    (54) logicop -> expr GE expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    RPARENT         reduce using rule 54 (logicop -> expr GE expr .)
    LT              reduce using rule 54 (logicop -> expr GE expr .)
    GT              reduce using rule 54 (logicop -> expr GE expr .)
    LE              reduce using rule 54 (logicop -> expr GE expr .)
    GE              reduce using rule 54 (logicop -> expr GE expr .)
    EQ              reduce using rule 54 (logicop -> expr GE expr .)
    NE              reduce using rule 54 (logicop -> expr GE expr .)
    OR              reduce using rule 54 (logicop -> expr GE expr .)
    AND             reduce using rule 54 (logicop -> expr GE expr .)
    NEWLINE         reduce using rule 54 (logicop -> expr GE expr .)
    RBRACKET        reduce using rule 54 (logicop -> expr GE expr .)
    RETURN          reduce using rule 54 (logicop -> expr GE expr .)
    PROCEDURE       reduce using rule 54 (logicop -> expr GE expr .)
    PRINT           reduce using rule 54 (logicop -> expr GE expr .)
    WHILE           reduce using rule 54 (logicop -> expr GE expr .)
    FOR             reduce using rule 54 (logicop -> expr GE expr .)
    IF              reduce using rule 54 (logicop -> expr GE expr .)
    LBRACKET        reduce using rule 54 (logicop -> expr GE expr .)
    LPARENT         reduce using rule 54 (logicop -> expr GE expr .)
    FLOAT           reduce using rule 54 (logicop -> expr GE expr .)
    ID              reduce using rule 54 (logicop -> expr GE expr .)
    UNARYMINUS      reduce using rule 54 (logicop -> expr GE expr .)
    INC             reduce using rule 54 (logicop -> expr GE expr .)
    DEC             reduce using rule 54 (logicop -> expr GE expr .)
    PI              reduce using rule 54 (logicop -> expr GE expr .)
    PHI             reduce using rule 54 (logicop -> expr GE expr .)
    GAMMA           reduce using rule 54 (logicop -> expr GE expr .)
    E               reduce using rule 54 (logicop -> expr GE expr .)
    DEG             reduce using rule 54 (logicop -> expr GE expr .)
    PREC            reduce using rule 54 (logicop -> expr GE expr .)
    SIN             reduce using rule 54 (logicop -> expr GE expr .)
    COS             reduce using rule 54 (logicop -> expr GE expr .)
    TAN             reduce using rule 54 (logicop -> expr GE expr .)
    ASIN            reduce using rule 54 (logicop -> expr GE expr .)
    ACOS            reduce using rule 54 (logicop -> expr GE expr .)
    ATAN            reduce using rule 54 (logicop -> expr GE expr .)
    SINH            reduce using rule 54 (logicop -> expr GE expr .)
    COSH            reduce using rule 54 (logicop -> expr GE expr .)
    TANH            reduce using rule 54 (logicop -> expr GE expr .)
    INT             reduce using rule 54 (logicop -> expr GE expr .)
    LOG             reduce using rule 54 (logicop -> expr GE expr .)
    LOG10           reduce using rule 54 (logicop -> expr GE expr .)
    SQRT            reduce using rule 54 (logicop -> expr GE expr .)
    ABS             reduce using rule 54 (logicop -> expr GE expr .)
    ERF             reduce using rule 54 (logicop -> expr GE expr .)
    ERFC            reduce using rule 54 (logicop -> expr GE expr .)
    END             reduce using rule 54 (logicop -> expr GE expr .)
    COMMA           reduce using rule 54 (logicop -> expr GE expr .)
    SEMICOLON       reduce using rule 54 (logicop -> expr GE expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 54 (logicop -> expr GE expr .) ]
  ! PLUS            [ reduce using rule 54 (logicop -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 54 (logicop -> expr GE expr .) ]
  ! TIMES           [ reduce using rule 54 (logicop -> expr GE expr .) ]
  ! DIVIDE          [ reduce using rule 54 (logicop -> expr GE expr .) ]
  ! MOD             [ reduce using rule 54 (logicop -> expr GE expr .) ]
  ! NOT             [ reduce using rule 54 (logicop -> expr GE expr .) ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]


state 124

    (48) mathop -> expr TIMES expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    PLUS            reduce using rule 48 (mathop -> expr TIMES expr .)
    MINUS           reduce using rule 48 (mathop -> expr TIMES expr .)
    TIMES           reduce using rule 48 (mathop -> expr TIMES expr .)
    DIVIDE          reduce using rule 48 (mathop -> expr TIMES expr .)
    MOD             reduce using rule 48 (mathop -> expr TIMES expr .)
    LT              reduce using rule 48 (mathop -> expr TIMES expr .)
    GT              reduce using rule 48 (mathop -> expr TIMES expr .)
    LE              reduce using rule 48 (mathop -> expr TIMES expr .)
    GE              reduce using rule 48 (mathop -> expr TIMES expr .)
    EQ              reduce using rule 48 (mathop -> expr TIMES expr .)
    NE              reduce using rule 48 (mathop -> expr TIMES expr .)
    OR              reduce using rule 48 (mathop -> expr TIMES expr .)
    AND             reduce using rule 48 (mathop -> expr TIMES expr .)
    SEMICOLON       reduce using rule 48 (mathop -> expr TIMES expr .)
    NEWLINE         reduce using rule 48 (mathop -> expr TIMES expr .)
    RBRACKET        reduce using rule 48 (mathop -> expr TIMES expr .)
    RETURN          reduce using rule 48 (mathop -> expr TIMES expr .)
    PROCEDURE       reduce using rule 48 (mathop -> expr TIMES expr .)
    PRINT           reduce using rule 48 (mathop -> expr TIMES expr .)
    WHILE           reduce using rule 48 (mathop -> expr TIMES expr .)
    FOR             reduce using rule 48 (mathop -> expr TIMES expr .)
    IF              reduce using rule 48 (mathop -> expr TIMES expr .)
    LBRACKET        reduce using rule 48 (mathop -> expr TIMES expr .)
    LPARENT         reduce using rule 48 (mathop -> expr TIMES expr .)
    FLOAT           reduce using rule 48 (mathop -> expr TIMES expr .)
    ID              reduce using rule 48 (mathop -> expr TIMES expr .)
    UNARYMINUS      reduce using rule 48 (mathop -> expr TIMES expr .)
    INC             reduce using rule 48 (mathop -> expr TIMES expr .)
    DEC             reduce using rule 48 (mathop -> expr TIMES expr .)
    PI              reduce using rule 48 (mathop -> expr TIMES expr .)
    PHI             reduce using rule 48 (mathop -> expr TIMES expr .)
    GAMMA           reduce using rule 48 (mathop -> expr TIMES expr .)
    E               reduce using rule 48 (mathop -> expr TIMES expr .)
    DEG             reduce using rule 48 (mathop -> expr TIMES expr .)
    PREC            reduce using rule 48 (mathop -> expr TIMES expr .)
    SIN             reduce using rule 48 (mathop -> expr TIMES expr .)
    COS             reduce using rule 48 (mathop -> expr TIMES expr .)
    TAN             reduce using rule 48 (mathop -> expr TIMES expr .)
    ASIN            reduce using rule 48 (mathop -> expr TIMES expr .)
    ACOS            reduce using rule 48 (mathop -> expr TIMES expr .)
    ATAN            reduce using rule 48 (mathop -> expr TIMES expr .)
    SINH            reduce using rule 48 (mathop -> expr TIMES expr .)
    COSH            reduce using rule 48 (mathop -> expr TIMES expr .)
    TANH            reduce using rule 48 (mathop -> expr TIMES expr .)
    INT             reduce using rule 48 (mathop -> expr TIMES expr .)
    LOG             reduce using rule 48 (mathop -> expr TIMES expr .)
    LOG10           reduce using rule 48 (mathop -> expr TIMES expr .)
    SQRT            reduce using rule 48 (mathop -> expr TIMES expr .)
    ABS             reduce using rule 48 (mathop -> expr TIMES expr .)
    ERF             reduce using rule 48 (mathop -> expr TIMES expr .)
    ERFC            reduce using rule 48 (mathop -> expr TIMES expr .)
    END             reduce using rule 48 (mathop -> expr TIMES expr .)
    COMMA           reduce using rule 48 (mathop -> expr TIMES expr .)
    RPARENT         reduce using rule 48 (mathop -> expr TIMES expr .)
    EXP             shift and go to state 88
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 48 (mathop -> expr TIMES expr .) ]
  ! NOT             [ reduce using rule 48 (mathop -> expr TIMES expr .) ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 91 ]
  ! TIMES           [ shift and go to state 84 ]
  ! DIVIDE          [ shift and go to state 81 ]
  ! MOD             [ shift and go to state 93 ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]


state 125

    (51) logicop -> expr LT expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    RPARENT         reduce using rule 51 (logicop -> expr LT expr .)
    LT              reduce using rule 51 (logicop -> expr LT expr .)
    GT              reduce using rule 51 (logicop -> expr LT expr .)
    LE              reduce using rule 51 (logicop -> expr LT expr .)
    GE              reduce using rule 51 (logicop -> expr LT expr .)
    EQ              reduce using rule 51 (logicop -> expr LT expr .)
    NE              reduce using rule 51 (logicop -> expr LT expr .)
    OR              reduce using rule 51 (logicop -> expr LT expr .)
    AND             reduce using rule 51 (logicop -> expr LT expr .)
    NEWLINE         reduce using rule 51 (logicop -> expr LT expr .)
    RBRACKET        reduce using rule 51 (logicop -> expr LT expr .)
    RETURN          reduce using rule 51 (logicop -> expr LT expr .)
    PROCEDURE       reduce using rule 51 (logicop -> expr LT expr .)
    PRINT           reduce using rule 51 (logicop -> expr LT expr .)
    WHILE           reduce using rule 51 (logicop -> expr LT expr .)
    FOR             reduce using rule 51 (logicop -> expr LT expr .)
    IF              reduce using rule 51 (logicop -> expr LT expr .)
    LBRACKET        reduce using rule 51 (logicop -> expr LT expr .)
    LPARENT         reduce using rule 51 (logicop -> expr LT expr .)
    FLOAT           reduce using rule 51 (logicop -> expr LT expr .)
    ID              reduce using rule 51 (logicop -> expr LT expr .)
    UNARYMINUS      reduce using rule 51 (logicop -> expr LT expr .)
    INC             reduce using rule 51 (logicop -> expr LT expr .)
    DEC             reduce using rule 51 (logicop -> expr LT expr .)
    PI              reduce using rule 51 (logicop -> expr LT expr .)
    PHI             reduce using rule 51 (logicop -> expr LT expr .)
    GAMMA           reduce using rule 51 (logicop -> expr LT expr .)
    E               reduce using rule 51 (logicop -> expr LT expr .)
    DEG             reduce using rule 51 (logicop -> expr LT expr .)
    PREC            reduce using rule 51 (logicop -> expr LT expr .)
    SIN             reduce using rule 51 (logicop -> expr LT expr .)
    COS             reduce using rule 51 (logicop -> expr LT expr .)
    TAN             reduce using rule 51 (logicop -> expr LT expr .)
    ASIN            reduce using rule 51 (logicop -> expr LT expr .)
    ACOS            reduce using rule 51 (logicop -> expr LT expr .)
    ATAN            reduce using rule 51 (logicop -> expr LT expr .)
    SINH            reduce using rule 51 (logicop -> expr LT expr .)
    COSH            reduce using rule 51 (logicop -> expr LT expr .)
    TANH            reduce using rule 51 (logicop -> expr LT expr .)
    INT             reduce using rule 51 (logicop -> expr LT expr .)
    LOG             reduce using rule 51 (logicop -> expr LT expr .)
    LOG10           reduce using rule 51 (logicop -> expr LT expr .)
    SQRT            reduce using rule 51 (logicop -> expr LT expr .)
    ABS             reduce using rule 51 (logicop -> expr LT expr .)
    ERF             reduce using rule 51 (logicop -> expr LT expr .)
    ERFC            reduce using rule 51 (logicop -> expr LT expr .)
    END             reduce using rule 51 (logicop -> expr LT expr .)
    COMMA           reduce using rule 51 (logicop -> expr LT expr .)
    SEMICOLON       reduce using rule 51 (logicop -> expr LT expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 51 (logicop -> expr LT expr .) ]
  ! PLUS            [ reduce using rule 51 (logicop -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 51 (logicop -> expr LT expr .) ]
  ! TIMES           [ reduce using rule 51 (logicop -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 51 (logicop -> expr LT expr .) ]
  ! MOD             [ reduce using rule 51 (logicop -> expr LT expr .) ]
  ! NOT             [ reduce using rule 51 (logicop -> expr LT expr .) ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]


state 126

    (53) logicop -> expr LE expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    RPARENT         reduce using rule 53 (logicop -> expr LE expr .)
    LT              reduce using rule 53 (logicop -> expr LE expr .)
    GT              reduce using rule 53 (logicop -> expr LE expr .)
    LE              reduce using rule 53 (logicop -> expr LE expr .)
    GE              reduce using rule 53 (logicop -> expr LE expr .)
    EQ              reduce using rule 53 (logicop -> expr LE expr .)
    NE              reduce using rule 53 (logicop -> expr LE expr .)
    OR              reduce using rule 53 (logicop -> expr LE expr .)
    AND             reduce using rule 53 (logicop -> expr LE expr .)
    NEWLINE         reduce using rule 53 (logicop -> expr LE expr .)
    RBRACKET        reduce using rule 53 (logicop -> expr LE expr .)
    RETURN          reduce using rule 53 (logicop -> expr LE expr .)
    PROCEDURE       reduce using rule 53 (logicop -> expr LE expr .)
    PRINT           reduce using rule 53 (logicop -> expr LE expr .)
    WHILE           reduce using rule 53 (logicop -> expr LE expr .)
    FOR             reduce using rule 53 (logicop -> expr LE expr .)
    IF              reduce using rule 53 (logicop -> expr LE expr .)
    LBRACKET        reduce using rule 53 (logicop -> expr LE expr .)
    LPARENT         reduce using rule 53 (logicop -> expr LE expr .)
    FLOAT           reduce using rule 53 (logicop -> expr LE expr .)
    ID              reduce using rule 53 (logicop -> expr LE expr .)
    UNARYMINUS      reduce using rule 53 (logicop -> expr LE expr .)
    INC             reduce using rule 53 (logicop -> expr LE expr .)
    DEC             reduce using rule 53 (logicop -> expr LE expr .)
    PI              reduce using rule 53 (logicop -> expr LE expr .)
    PHI             reduce using rule 53 (logicop -> expr LE expr .)
    GAMMA           reduce using rule 53 (logicop -> expr LE expr .)
    E               reduce using rule 53 (logicop -> expr LE expr .)
    DEG             reduce using rule 53 (logicop -> expr LE expr .)
    PREC            reduce using rule 53 (logicop -> expr LE expr .)
    SIN             reduce using rule 53 (logicop -> expr LE expr .)
    COS             reduce using rule 53 (logicop -> expr LE expr .)
    TAN             reduce using rule 53 (logicop -> expr LE expr .)
    ASIN            reduce using rule 53 (logicop -> expr LE expr .)
    ACOS            reduce using rule 53 (logicop -> expr LE expr .)
    ATAN            reduce using rule 53 (logicop -> expr LE expr .)
    SINH            reduce using rule 53 (logicop -> expr LE expr .)
    COSH            reduce using rule 53 (logicop -> expr LE expr .)
    TANH            reduce using rule 53 (logicop -> expr LE expr .)
    INT             reduce using rule 53 (logicop -> expr LE expr .)
    LOG             reduce using rule 53 (logicop -> expr LE expr .)
    LOG10           reduce using rule 53 (logicop -> expr LE expr .)
    SQRT            reduce using rule 53 (logicop -> expr LE expr .)
    ABS             reduce using rule 53 (logicop -> expr LE expr .)
    ERF             reduce using rule 53 (logicop -> expr LE expr .)
    ERFC            reduce using rule 53 (logicop -> expr LE expr .)
    END             reduce using rule 53 (logicop -> expr LE expr .)
    COMMA           reduce using rule 53 (logicop -> expr LE expr .)
    SEMICOLON       reduce using rule 53 (logicop -> expr LE expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 53 (logicop -> expr LE expr .) ]
  ! PLUS            [ reduce using rule 53 (logicop -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 53 (logicop -> expr LE expr .) ]
  ! TIMES           [ reduce using rule 53 (logicop -> expr LE expr .) ]
  ! DIVIDE          [ reduce using rule 53 (logicop -> expr LE expr .) ]
  ! MOD             [ reduce using rule 53 (logicop -> expr LE expr .) ]
  ! NOT             [ reduce using rule 53 (logicop -> expr LE expr .) ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]


state 127

    (46) mathop -> expr PLUS expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    PLUS            reduce using rule 46 (mathop -> expr PLUS expr .)
    MINUS           reduce using rule 46 (mathop -> expr PLUS expr .)
    LT              reduce using rule 46 (mathop -> expr PLUS expr .)
    GT              reduce using rule 46 (mathop -> expr PLUS expr .)
    LE              reduce using rule 46 (mathop -> expr PLUS expr .)
    GE              reduce using rule 46 (mathop -> expr PLUS expr .)
    EQ              reduce using rule 46 (mathop -> expr PLUS expr .)
    NE              reduce using rule 46 (mathop -> expr PLUS expr .)
    OR              reduce using rule 46 (mathop -> expr PLUS expr .)
    AND             reduce using rule 46 (mathop -> expr PLUS expr .)
    SEMICOLON       reduce using rule 46 (mathop -> expr PLUS expr .)
    NEWLINE         reduce using rule 46 (mathop -> expr PLUS expr .)
    RBRACKET        reduce using rule 46 (mathop -> expr PLUS expr .)
    RETURN          reduce using rule 46 (mathop -> expr PLUS expr .)
    PROCEDURE       reduce using rule 46 (mathop -> expr PLUS expr .)
    PRINT           reduce using rule 46 (mathop -> expr PLUS expr .)
    WHILE           reduce using rule 46 (mathop -> expr PLUS expr .)
    FOR             reduce using rule 46 (mathop -> expr PLUS expr .)
    IF              reduce using rule 46 (mathop -> expr PLUS expr .)
    LBRACKET        reduce using rule 46 (mathop -> expr PLUS expr .)
    LPARENT         reduce using rule 46 (mathop -> expr PLUS expr .)
    FLOAT           reduce using rule 46 (mathop -> expr PLUS expr .)
    ID              reduce using rule 46 (mathop -> expr PLUS expr .)
    UNARYMINUS      reduce using rule 46 (mathop -> expr PLUS expr .)
    INC             reduce using rule 46 (mathop -> expr PLUS expr .)
    DEC             reduce using rule 46 (mathop -> expr PLUS expr .)
    PI              reduce using rule 46 (mathop -> expr PLUS expr .)
    PHI             reduce using rule 46 (mathop -> expr PLUS expr .)
    GAMMA           reduce using rule 46 (mathop -> expr PLUS expr .)
    E               reduce using rule 46 (mathop -> expr PLUS expr .)
    DEG             reduce using rule 46 (mathop -> expr PLUS expr .)
    PREC            reduce using rule 46 (mathop -> expr PLUS expr .)
    SIN             reduce using rule 46 (mathop -> expr PLUS expr .)
    COS             reduce using rule 46 (mathop -> expr PLUS expr .)
    TAN             reduce using rule 46 (mathop -> expr PLUS expr .)
    ASIN            reduce using rule 46 (mathop -> expr PLUS expr .)
    ACOS            reduce using rule 46 (mathop -> expr PLUS expr .)
    ATAN            reduce using rule 46 (mathop -> expr PLUS expr .)
    SINH            reduce using rule 46 (mathop -> expr PLUS expr .)
    COSH            reduce using rule 46 (mathop -> expr PLUS expr .)
    TANH            reduce using rule 46 (mathop -> expr PLUS expr .)
    INT             reduce using rule 46 (mathop -> expr PLUS expr .)
    LOG             reduce using rule 46 (mathop -> expr PLUS expr .)
    LOG10           reduce using rule 46 (mathop -> expr PLUS expr .)
    SQRT            reduce using rule 46 (mathop -> expr PLUS expr .)
    ABS             reduce using rule 46 (mathop -> expr PLUS expr .)
    ERF             reduce using rule 46 (mathop -> expr PLUS expr .)
    ERFC            reduce using rule 46 (mathop -> expr PLUS expr .)
    END             reduce using rule 46 (mathop -> expr PLUS expr .)
    COMMA           reduce using rule 46 (mathop -> expr PLUS expr .)
    RPARENT         reduce using rule 46 (mathop -> expr PLUS expr .)
    EXP             shift and go to state 88
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 46 (mathop -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 46 (mathop -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 46 (mathop -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 46 (mathop -> expr PLUS expr .) ]
  ! NOT             [ reduce using rule 46 (mathop -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 91 ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]


state 128

    (45) mathop -> expr EXP expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    EXP             reduce using rule 45 (mathop -> expr EXP expr .)
    PLUS            reduce using rule 45 (mathop -> expr EXP expr .)
    MINUS           reduce using rule 45 (mathop -> expr EXP expr .)
    TIMES           reduce using rule 45 (mathop -> expr EXP expr .)
    DIVIDE          reduce using rule 45 (mathop -> expr EXP expr .)
    MOD             reduce using rule 45 (mathop -> expr EXP expr .)
    LT              reduce using rule 45 (mathop -> expr EXP expr .)
    GT              reduce using rule 45 (mathop -> expr EXP expr .)
    LE              reduce using rule 45 (mathop -> expr EXP expr .)
    GE              reduce using rule 45 (mathop -> expr EXP expr .)
    EQ              reduce using rule 45 (mathop -> expr EXP expr .)
    NE              reduce using rule 45 (mathop -> expr EXP expr .)
    OR              reduce using rule 45 (mathop -> expr EXP expr .)
    AND             reduce using rule 45 (mathop -> expr EXP expr .)
    NOT             reduce using rule 45 (mathop -> expr EXP expr .)
    SEMICOLON       reduce using rule 45 (mathop -> expr EXP expr .)
    NEWLINE         reduce using rule 45 (mathop -> expr EXP expr .)
    RBRACKET        reduce using rule 45 (mathop -> expr EXP expr .)
    RETURN          reduce using rule 45 (mathop -> expr EXP expr .)
    PROCEDURE       reduce using rule 45 (mathop -> expr EXP expr .)
    PRINT           reduce using rule 45 (mathop -> expr EXP expr .)
    WHILE           reduce using rule 45 (mathop -> expr EXP expr .)
    FOR             reduce using rule 45 (mathop -> expr EXP expr .)
    IF              reduce using rule 45 (mathop -> expr EXP expr .)
    LBRACKET        reduce using rule 45 (mathop -> expr EXP expr .)
    LPARENT         reduce using rule 45 (mathop -> expr EXP expr .)
    FLOAT           reduce using rule 45 (mathop -> expr EXP expr .)
    ID              reduce using rule 45 (mathop -> expr EXP expr .)
    UNARYMINUS      reduce using rule 45 (mathop -> expr EXP expr .)
    INC             reduce using rule 45 (mathop -> expr EXP expr .)
    DEC             reduce using rule 45 (mathop -> expr EXP expr .)
    PI              reduce using rule 45 (mathop -> expr EXP expr .)
    PHI             reduce using rule 45 (mathop -> expr EXP expr .)
    GAMMA           reduce using rule 45 (mathop -> expr EXP expr .)
    E               reduce using rule 45 (mathop -> expr EXP expr .)
    DEG             reduce using rule 45 (mathop -> expr EXP expr .)
    PREC            reduce using rule 45 (mathop -> expr EXP expr .)
    SIN             reduce using rule 45 (mathop -> expr EXP expr .)
    COS             reduce using rule 45 (mathop -> expr EXP expr .)
    TAN             reduce using rule 45 (mathop -> expr EXP expr .)
    ASIN            reduce using rule 45 (mathop -> expr EXP expr .)
    ACOS            reduce using rule 45 (mathop -> expr EXP expr .)
    ATAN            reduce using rule 45 (mathop -> expr EXP expr .)
    SINH            reduce using rule 45 (mathop -> expr EXP expr .)
    COSH            reduce using rule 45 (mathop -> expr EXP expr .)
    TANH            reduce using rule 45 (mathop -> expr EXP expr .)
    INT             reduce using rule 45 (mathop -> expr EXP expr .)
    LOG             reduce using rule 45 (mathop -> expr EXP expr .)
    LOG10           reduce using rule 45 (mathop -> expr EXP expr .)
    SQRT            reduce using rule 45 (mathop -> expr EXP expr .)
    ABS             reduce using rule 45 (mathop -> expr EXP expr .)
    ERF             reduce using rule 45 (mathop -> expr EXP expr .)
    ERFC            reduce using rule 45 (mathop -> expr EXP expr .)
    END             reduce using rule 45 (mathop -> expr EXP expr .)
    COMMA           reduce using rule 45 (mathop -> expr EXP expr .)
    RPARENT         reduce using rule 45 (mathop -> expr EXP expr .)

  ! EXP             [ shift and go to state 88 ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 91 ]
  ! TIMES           [ shift and go to state 84 ]
  ! DIVIDE          [ shift and go to state 81 ]
  ! MOD             [ shift and go to state 93 ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]
  ! NOT             [ shift and go to state 89 ]


state 129

    (59) logicop -> expr NOT expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    RPARENT         reduce using rule 59 (logicop -> expr NOT expr .)
    PLUS            reduce using rule 59 (logicop -> expr NOT expr .)
    MINUS           reduce using rule 59 (logicop -> expr NOT expr .)
    TIMES           reduce using rule 59 (logicop -> expr NOT expr .)
    DIVIDE          reduce using rule 59 (logicop -> expr NOT expr .)
    MOD             reduce using rule 59 (logicop -> expr NOT expr .)
    LT              reduce using rule 59 (logicop -> expr NOT expr .)
    GT              reduce using rule 59 (logicop -> expr NOT expr .)
    LE              reduce using rule 59 (logicop -> expr NOT expr .)
    GE              reduce using rule 59 (logicop -> expr NOT expr .)
    EQ              reduce using rule 59 (logicop -> expr NOT expr .)
    NE              reduce using rule 59 (logicop -> expr NOT expr .)
    OR              reduce using rule 59 (logicop -> expr NOT expr .)
    AND             reduce using rule 59 (logicop -> expr NOT expr .)
    NOT             reduce using rule 59 (logicop -> expr NOT expr .)
    NEWLINE         reduce using rule 59 (logicop -> expr NOT expr .)
    RBRACKET        reduce using rule 59 (logicop -> expr NOT expr .)
    RETURN          reduce using rule 59 (logicop -> expr NOT expr .)
    PROCEDURE       reduce using rule 59 (logicop -> expr NOT expr .)
    PRINT           reduce using rule 59 (logicop -> expr NOT expr .)
    WHILE           reduce using rule 59 (logicop -> expr NOT expr .)
    FOR             reduce using rule 59 (logicop -> expr NOT expr .)
    IF              reduce using rule 59 (logicop -> expr NOT expr .)
    LBRACKET        reduce using rule 59 (logicop -> expr NOT expr .)
    LPARENT         reduce using rule 59 (logicop -> expr NOT expr .)
    FLOAT           reduce using rule 59 (logicop -> expr NOT expr .)
    ID              reduce using rule 59 (logicop -> expr NOT expr .)
    UNARYMINUS      reduce using rule 59 (logicop -> expr NOT expr .)
    INC             reduce using rule 59 (logicop -> expr NOT expr .)
    DEC             reduce using rule 59 (logicop -> expr NOT expr .)
    PI              reduce using rule 59 (logicop -> expr NOT expr .)
    PHI             reduce using rule 59 (logicop -> expr NOT expr .)
    GAMMA           reduce using rule 59 (logicop -> expr NOT expr .)
    E               reduce using rule 59 (logicop -> expr NOT expr .)
    DEG             reduce using rule 59 (logicop -> expr NOT expr .)
    PREC            reduce using rule 59 (logicop -> expr NOT expr .)
    SIN             reduce using rule 59 (logicop -> expr NOT expr .)
    COS             reduce using rule 59 (logicop -> expr NOT expr .)
    TAN             reduce using rule 59 (logicop -> expr NOT expr .)
    ASIN            reduce using rule 59 (logicop -> expr NOT expr .)
    ACOS            reduce using rule 59 (logicop -> expr NOT expr .)
    ATAN            reduce using rule 59 (logicop -> expr NOT expr .)
    SINH            reduce using rule 59 (logicop -> expr NOT expr .)
    COSH            reduce using rule 59 (logicop -> expr NOT expr .)
    TANH            reduce using rule 59 (logicop -> expr NOT expr .)
    INT             reduce using rule 59 (logicop -> expr NOT expr .)
    LOG             reduce using rule 59 (logicop -> expr NOT expr .)
    LOG10           reduce using rule 59 (logicop -> expr NOT expr .)
    SQRT            reduce using rule 59 (logicop -> expr NOT expr .)
    ABS             reduce using rule 59 (logicop -> expr NOT expr .)
    ERF             reduce using rule 59 (logicop -> expr NOT expr .)
    ERFC            reduce using rule 59 (logicop -> expr NOT expr .)
    END             reduce using rule 59 (logicop -> expr NOT expr .)
    COMMA           reduce using rule 59 (logicop -> expr NOT expr .)
    SEMICOLON       reduce using rule 59 (logicop -> expr NOT expr .)
    EXP             shift and go to state 88

  ! EXP             [ reduce using rule 59 (logicop -> expr NOT expr .) ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 91 ]
  ! TIMES           [ shift and go to state 84 ]
  ! DIVIDE          [ shift and go to state 81 ]
  ! MOD             [ shift and go to state 93 ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]
  ! NOT             [ shift and go to state 89 ]


state 130

    (55) logicop -> expr EQ expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    RPARENT         reduce using rule 55 (logicop -> expr EQ expr .)
    LT              reduce using rule 55 (logicop -> expr EQ expr .)
    GT              reduce using rule 55 (logicop -> expr EQ expr .)
    LE              reduce using rule 55 (logicop -> expr EQ expr .)
    GE              reduce using rule 55 (logicop -> expr EQ expr .)
    EQ              reduce using rule 55 (logicop -> expr EQ expr .)
    NE              reduce using rule 55 (logicop -> expr EQ expr .)
    OR              reduce using rule 55 (logicop -> expr EQ expr .)
    AND             reduce using rule 55 (logicop -> expr EQ expr .)
    NEWLINE         reduce using rule 55 (logicop -> expr EQ expr .)
    RBRACKET        reduce using rule 55 (logicop -> expr EQ expr .)
    RETURN          reduce using rule 55 (logicop -> expr EQ expr .)
    PROCEDURE       reduce using rule 55 (logicop -> expr EQ expr .)
    PRINT           reduce using rule 55 (logicop -> expr EQ expr .)
    WHILE           reduce using rule 55 (logicop -> expr EQ expr .)
    FOR             reduce using rule 55 (logicop -> expr EQ expr .)
    IF              reduce using rule 55 (logicop -> expr EQ expr .)
    LBRACKET        reduce using rule 55 (logicop -> expr EQ expr .)
    LPARENT         reduce using rule 55 (logicop -> expr EQ expr .)
    FLOAT           reduce using rule 55 (logicop -> expr EQ expr .)
    ID              reduce using rule 55 (logicop -> expr EQ expr .)
    UNARYMINUS      reduce using rule 55 (logicop -> expr EQ expr .)
    INC             reduce using rule 55 (logicop -> expr EQ expr .)
    DEC             reduce using rule 55 (logicop -> expr EQ expr .)
    PI              reduce using rule 55 (logicop -> expr EQ expr .)
    PHI             reduce using rule 55 (logicop -> expr EQ expr .)
    GAMMA           reduce using rule 55 (logicop -> expr EQ expr .)
    E               reduce using rule 55 (logicop -> expr EQ expr .)
    DEG             reduce using rule 55 (logicop -> expr EQ expr .)
    PREC            reduce using rule 55 (logicop -> expr EQ expr .)
    SIN             reduce using rule 55 (logicop -> expr EQ expr .)
    COS             reduce using rule 55 (logicop -> expr EQ expr .)
    TAN             reduce using rule 55 (logicop -> expr EQ expr .)
    ASIN            reduce using rule 55 (logicop -> expr EQ expr .)
    ACOS            reduce using rule 55 (logicop -> expr EQ expr .)
    ATAN            reduce using rule 55 (logicop -> expr EQ expr .)
    SINH            reduce using rule 55 (logicop -> expr EQ expr .)
    COSH            reduce using rule 55 (logicop -> expr EQ expr .)
    TANH            reduce using rule 55 (logicop -> expr EQ expr .)
    INT             reduce using rule 55 (logicop -> expr EQ expr .)
    LOG             reduce using rule 55 (logicop -> expr EQ expr .)
    LOG10           reduce using rule 55 (logicop -> expr EQ expr .)
    SQRT            reduce using rule 55 (logicop -> expr EQ expr .)
    ABS             reduce using rule 55 (logicop -> expr EQ expr .)
    ERF             reduce using rule 55 (logicop -> expr EQ expr .)
    ERFC            reduce using rule 55 (logicop -> expr EQ expr .)
    END             reduce using rule 55 (logicop -> expr EQ expr .)
    COMMA           reduce using rule 55 (logicop -> expr EQ expr .)
    SEMICOLON       reduce using rule 55 (logicop -> expr EQ expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 55 (logicop -> expr EQ expr .) ]
  ! PLUS            [ reduce using rule 55 (logicop -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 55 (logicop -> expr EQ expr .) ]
  ! TIMES           [ reduce using rule 55 (logicop -> expr EQ expr .) ]
  ! DIVIDE          [ reduce using rule 55 (logicop -> expr EQ expr .) ]
  ! MOD             [ reduce using rule 55 (logicop -> expr EQ expr .) ]
  ! NOT             [ reduce using rule 55 (logicop -> expr EQ expr .) ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]


state 131

    (47) mathop -> expr MINUS expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    PLUS            reduce using rule 47 (mathop -> expr MINUS expr .)
    MINUS           reduce using rule 47 (mathop -> expr MINUS expr .)
    LT              reduce using rule 47 (mathop -> expr MINUS expr .)
    GT              reduce using rule 47 (mathop -> expr MINUS expr .)
    LE              reduce using rule 47 (mathop -> expr MINUS expr .)
    GE              reduce using rule 47 (mathop -> expr MINUS expr .)
    EQ              reduce using rule 47 (mathop -> expr MINUS expr .)
    NE              reduce using rule 47 (mathop -> expr MINUS expr .)
    OR              reduce using rule 47 (mathop -> expr MINUS expr .)
    AND             reduce using rule 47 (mathop -> expr MINUS expr .)
    SEMICOLON       reduce using rule 47 (mathop -> expr MINUS expr .)
    NEWLINE         reduce using rule 47 (mathop -> expr MINUS expr .)
    RBRACKET        reduce using rule 47 (mathop -> expr MINUS expr .)
    RETURN          reduce using rule 47 (mathop -> expr MINUS expr .)
    PROCEDURE       reduce using rule 47 (mathop -> expr MINUS expr .)
    PRINT           reduce using rule 47 (mathop -> expr MINUS expr .)
    WHILE           reduce using rule 47 (mathop -> expr MINUS expr .)
    FOR             reduce using rule 47 (mathop -> expr MINUS expr .)
    IF              reduce using rule 47 (mathop -> expr MINUS expr .)
    LBRACKET        reduce using rule 47 (mathop -> expr MINUS expr .)
    LPARENT         reduce using rule 47 (mathop -> expr MINUS expr .)
    FLOAT           reduce using rule 47 (mathop -> expr MINUS expr .)
    ID              reduce using rule 47 (mathop -> expr MINUS expr .)
    UNARYMINUS      reduce using rule 47 (mathop -> expr MINUS expr .)
    INC             reduce using rule 47 (mathop -> expr MINUS expr .)
    DEC             reduce using rule 47 (mathop -> expr MINUS expr .)
    PI              reduce using rule 47 (mathop -> expr MINUS expr .)
    PHI             reduce using rule 47 (mathop -> expr MINUS expr .)
    GAMMA           reduce using rule 47 (mathop -> expr MINUS expr .)
    E               reduce using rule 47 (mathop -> expr MINUS expr .)
    DEG             reduce using rule 47 (mathop -> expr MINUS expr .)
    PREC            reduce using rule 47 (mathop -> expr MINUS expr .)
    SIN             reduce using rule 47 (mathop -> expr MINUS expr .)
    COS             reduce using rule 47 (mathop -> expr MINUS expr .)
    TAN             reduce using rule 47 (mathop -> expr MINUS expr .)
    ASIN            reduce using rule 47 (mathop -> expr MINUS expr .)
    ACOS            reduce using rule 47 (mathop -> expr MINUS expr .)
    ATAN            reduce using rule 47 (mathop -> expr MINUS expr .)
    SINH            reduce using rule 47 (mathop -> expr MINUS expr .)
    COSH            reduce using rule 47 (mathop -> expr MINUS expr .)
    TANH            reduce using rule 47 (mathop -> expr MINUS expr .)
    INT             reduce using rule 47 (mathop -> expr MINUS expr .)
    LOG             reduce using rule 47 (mathop -> expr MINUS expr .)
    LOG10           reduce using rule 47 (mathop -> expr MINUS expr .)
    SQRT            reduce using rule 47 (mathop -> expr MINUS expr .)
    ABS             reduce using rule 47 (mathop -> expr MINUS expr .)
    ERF             reduce using rule 47 (mathop -> expr MINUS expr .)
    ERFC            reduce using rule 47 (mathop -> expr MINUS expr .)
    END             reduce using rule 47 (mathop -> expr MINUS expr .)
    COMMA           reduce using rule 47 (mathop -> expr MINUS expr .)
    RPARENT         reduce using rule 47 (mathop -> expr MINUS expr .)
    EXP             shift and go to state 88
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 47 (mathop -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 47 (mathop -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 47 (mathop -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 47 (mathop -> expr MINUS expr .) ]
  ! NOT             [ reduce using rule 47 (mathop -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 91 ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]


state 132

    (56) logicop -> expr NE expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    RPARENT         reduce using rule 56 (logicop -> expr NE expr .)
    LT              reduce using rule 56 (logicop -> expr NE expr .)
    GT              reduce using rule 56 (logicop -> expr NE expr .)
    LE              reduce using rule 56 (logicop -> expr NE expr .)
    GE              reduce using rule 56 (logicop -> expr NE expr .)
    EQ              reduce using rule 56 (logicop -> expr NE expr .)
    NE              reduce using rule 56 (logicop -> expr NE expr .)
    OR              reduce using rule 56 (logicop -> expr NE expr .)
    AND             reduce using rule 56 (logicop -> expr NE expr .)
    NEWLINE         reduce using rule 56 (logicop -> expr NE expr .)
    RBRACKET        reduce using rule 56 (logicop -> expr NE expr .)
    RETURN          reduce using rule 56 (logicop -> expr NE expr .)
    PROCEDURE       reduce using rule 56 (logicop -> expr NE expr .)
    PRINT           reduce using rule 56 (logicop -> expr NE expr .)
    WHILE           reduce using rule 56 (logicop -> expr NE expr .)
    FOR             reduce using rule 56 (logicop -> expr NE expr .)
    IF              reduce using rule 56 (logicop -> expr NE expr .)
    LBRACKET        reduce using rule 56 (logicop -> expr NE expr .)
    LPARENT         reduce using rule 56 (logicop -> expr NE expr .)
    FLOAT           reduce using rule 56 (logicop -> expr NE expr .)
    ID              reduce using rule 56 (logicop -> expr NE expr .)
    UNARYMINUS      reduce using rule 56 (logicop -> expr NE expr .)
    INC             reduce using rule 56 (logicop -> expr NE expr .)
    DEC             reduce using rule 56 (logicop -> expr NE expr .)
    PI              reduce using rule 56 (logicop -> expr NE expr .)
    PHI             reduce using rule 56 (logicop -> expr NE expr .)
    GAMMA           reduce using rule 56 (logicop -> expr NE expr .)
    E               reduce using rule 56 (logicop -> expr NE expr .)
    DEG             reduce using rule 56 (logicop -> expr NE expr .)
    PREC            reduce using rule 56 (logicop -> expr NE expr .)
    SIN             reduce using rule 56 (logicop -> expr NE expr .)
    COS             reduce using rule 56 (logicop -> expr NE expr .)
    TAN             reduce using rule 56 (logicop -> expr NE expr .)
    ASIN            reduce using rule 56 (logicop -> expr NE expr .)
    ACOS            reduce using rule 56 (logicop -> expr NE expr .)
    ATAN            reduce using rule 56 (logicop -> expr NE expr .)
    SINH            reduce using rule 56 (logicop -> expr NE expr .)
    COSH            reduce using rule 56 (logicop -> expr NE expr .)
    TANH            reduce using rule 56 (logicop -> expr NE expr .)
    INT             reduce using rule 56 (logicop -> expr NE expr .)
    LOG             reduce using rule 56 (logicop -> expr NE expr .)
    LOG10           reduce using rule 56 (logicop -> expr NE expr .)
    SQRT            reduce using rule 56 (logicop -> expr NE expr .)
    ABS             reduce using rule 56 (logicop -> expr NE expr .)
    ERF             reduce using rule 56 (logicop -> expr NE expr .)
    ERFC            reduce using rule 56 (logicop -> expr NE expr .)
    END             reduce using rule 56 (logicop -> expr NE expr .)
    COMMA           reduce using rule 56 (logicop -> expr NE expr .)
    SEMICOLON       reduce using rule 56 (logicop -> expr NE expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 56 (logicop -> expr NE expr .) ]
  ! PLUS            [ reduce using rule 56 (logicop -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 56 (logicop -> expr NE expr .) ]
  ! TIMES           [ reduce using rule 56 (logicop -> expr NE expr .) ]
  ! DIVIDE          [ reduce using rule 56 (logicop -> expr NE expr .) ]
  ! MOD             [ reduce using rule 56 (logicop -> expr NE expr .) ]
  ! NOT             [ reduce using rule 56 (logicop -> expr NE expr .) ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]


state 133

    (50) mathop -> expr MOD expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    PLUS            reduce using rule 50 (mathop -> expr MOD expr .)
    MINUS           reduce using rule 50 (mathop -> expr MOD expr .)
    TIMES           reduce using rule 50 (mathop -> expr MOD expr .)
    DIVIDE          reduce using rule 50 (mathop -> expr MOD expr .)
    MOD             reduce using rule 50 (mathop -> expr MOD expr .)
    LT              reduce using rule 50 (mathop -> expr MOD expr .)
    GT              reduce using rule 50 (mathop -> expr MOD expr .)
    LE              reduce using rule 50 (mathop -> expr MOD expr .)
    GE              reduce using rule 50 (mathop -> expr MOD expr .)
    EQ              reduce using rule 50 (mathop -> expr MOD expr .)
    NE              reduce using rule 50 (mathop -> expr MOD expr .)
    OR              reduce using rule 50 (mathop -> expr MOD expr .)
    AND             reduce using rule 50 (mathop -> expr MOD expr .)
    SEMICOLON       reduce using rule 50 (mathop -> expr MOD expr .)
    NEWLINE         reduce using rule 50 (mathop -> expr MOD expr .)
    RBRACKET        reduce using rule 50 (mathop -> expr MOD expr .)
    RETURN          reduce using rule 50 (mathop -> expr MOD expr .)
    PROCEDURE       reduce using rule 50 (mathop -> expr MOD expr .)
    PRINT           reduce using rule 50 (mathop -> expr MOD expr .)
    WHILE           reduce using rule 50 (mathop -> expr MOD expr .)
    FOR             reduce using rule 50 (mathop -> expr MOD expr .)
    IF              reduce using rule 50 (mathop -> expr MOD expr .)
    LBRACKET        reduce using rule 50 (mathop -> expr MOD expr .)
    LPARENT         reduce using rule 50 (mathop -> expr MOD expr .)
    FLOAT           reduce using rule 50 (mathop -> expr MOD expr .)
    ID              reduce using rule 50 (mathop -> expr MOD expr .)
    UNARYMINUS      reduce using rule 50 (mathop -> expr MOD expr .)
    INC             reduce using rule 50 (mathop -> expr MOD expr .)
    DEC             reduce using rule 50 (mathop -> expr MOD expr .)
    PI              reduce using rule 50 (mathop -> expr MOD expr .)
    PHI             reduce using rule 50 (mathop -> expr MOD expr .)
    GAMMA           reduce using rule 50 (mathop -> expr MOD expr .)
    E               reduce using rule 50 (mathop -> expr MOD expr .)
    DEG             reduce using rule 50 (mathop -> expr MOD expr .)
    PREC            reduce using rule 50 (mathop -> expr MOD expr .)
    SIN             reduce using rule 50 (mathop -> expr MOD expr .)
    COS             reduce using rule 50 (mathop -> expr MOD expr .)
    TAN             reduce using rule 50 (mathop -> expr MOD expr .)
    ASIN            reduce using rule 50 (mathop -> expr MOD expr .)
    ACOS            reduce using rule 50 (mathop -> expr MOD expr .)
    ATAN            reduce using rule 50 (mathop -> expr MOD expr .)
    SINH            reduce using rule 50 (mathop -> expr MOD expr .)
    COSH            reduce using rule 50 (mathop -> expr MOD expr .)
    TANH            reduce using rule 50 (mathop -> expr MOD expr .)
    INT             reduce using rule 50 (mathop -> expr MOD expr .)
    LOG             reduce using rule 50 (mathop -> expr MOD expr .)
    LOG10           reduce using rule 50 (mathop -> expr MOD expr .)
    SQRT            reduce using rule 50 (mathop -> expr MOD expr .)
    ABS             reduce using rule 50 (mathop -> expr MOD expr .)
    ERF             reduce using rule 50 (mathop -> expr MOD expr .)
    ERFC            reduce using rule 50 (mathop -> expr MOD expr .)
    END             reduce using rule 50 (mathop -> expr MOD expr .)
    COMMA           reduce using rule 50 (mathop -> expr MOD expr .)
    RPARENT         reduce using rule 50 (mathop -> expr MOD expr .)
    EXP             shift and go to state 88
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 50 (mathop -> expr MOD expr .) ]
  ! NOT             [ reduce using rule 50 (mathop -> expr MOD expr .) ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 91 ]
  ! TIMES           [ shift and go to state 84 ]
  ! DIVIDE          [ shift and go to state 81 ]
  ! MOD             [ shift and go to state 93 ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]


state 134

    (61) callfunc -> ID LPARENT expr . RPARENT
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    RPARENT         shift and go to state 153
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89


state 135

    (44) asgn -> ID MODEQ expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    SEMICOLON       reduce using rule 44 (asgn -> ID MODEQ expr .)
    COMMA           reduce using rule 44 (asgn -> ID MODEQ expr .)
    NEWLINE         reduce using rule 44 (asgn -> ID MODEQ expr .)
    RBRACKET        reduce using rule 44 (asgn -> ID MODEQ expr .)
    RETURN          reduce using rule 44 (asgn -> ID MODEQ expr .)
    PROCEDURE       reduce using rule 44 (asgn -> ID MODEQ expr .)
    PRINT           reduce using rule 44 (asgn -> ID MODEQ expr .)
    WHILE           reduce using rule 44 (asgn -> ID MODEQ expr .)
    FOR             reduce using rule 44 (asgn -> ID MODEQ expr .)
    IF              reduce using rule 44 (asgn -> ID MODEQ expr .)
    LBRACKET        reduce using rule 44 (asgn -> ID MODEQ expr .)
    LPARENT         reduce using rule 44 (asgn -> ID MODEQ expr .)
    FLOAT           reduce using rule 44 (asgn -> ID MODEQ expr .)
    ID              reduce using rule 44 (asgn -> ID MODEQ expr .)
    UNARYMINUS      reduce using rule 44 (asgn -> ID MODEQ expr .)
    INC             reduce using rule 44 (asgn -> ID MODEQ expr .)
    DEC             reduce using rule 44 (asgn -> ID MODEQ expr .)
    PI              reduce using rule 44 (asgn -> ID MODEQ expr .)
    PHI             reduce using rule 44 (asgn -> ID MODEQ expr .)
    GAMMA           reduce using rule 44 (asgn -> ID MODEQ expr .)
    E               reduce using rule 44 (asgn -> ID MODEQ expr .)
    DEG             reduce using rule 44 (asgn -> ID MODEQ expr .)
    PREC            reduce using rule 44 (asgn -> ID MODEQ expr .)
    SIN             reduce using rule 44 (asgn -> ID MODEQ expr .)
    COS             reduce using rule 44 (asgn -> ID MODEQ expr .)
    TAN             reduce using rule 44 (asgn -> ID MODEQ expr .)
    ASIN            reduce using rule 44 (asgn -> ID MODEQ expr .)
    ACOS            reduce using rule 44 (asgn -> ID MODEQ expr .)
    ATAN            reduce using rule 44 (asgn -> ID MODEQ expr .)
    SINH            reduce using rule 44 (asgn -> ID MODEQ expr .)
    COSH            reduce using rule 44 (asgn -> ID MODEQ expr .)
    TANH            reduce using rule 44 (asgn -> ID MODEQ expr .)
    INT             reduce using rule 44 (asgn -> ID MODEQ expr .)
    LOG             reduce using rule 44 (asgn -> ID MODEQ expr .)
    LOG10           reduce using rule 44 (asgn -> ID MODEQ expr .)
    SQRT            reduce using rule 44 (asgn -> ID MODEQ expr .)
    ABS             reduce using rule 44 (asgn -> ID MODEQ expr .)
    ERF             reduce using rule 44 (asgn -> ID MODEQ expr .)
    ERFC            reduce using rule 44 (asgn -> ID MODEQ expr .)
    END             reduce using rule 44 (asgn -> ID MODEQ expr .)
    RPARENT         reduce using rule 44 (asgn -> ID MODEQ expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 44 (asgn -> ID MODEQ expr .) ]
  ! PLUS            [ reduce using rule 44 (asgn -> ID MODEQ expr .) ]
  ! MINUS           [ reduce using rule 44 (asgn -> ID MODEQ expr .) ]
  ! TIMES           [ reduce using rule 44 (asgn -> ID MODEQ expr .) ]
  ! DIVIDE          [ reduce using rule 44 (asgn -> ID MODEQ expr .) ]
  ! MOD             [ reduce using rule 44 (asgn -> ID MODEQ expr .) ]
  ! LT              [ reduce using rule 44 (asgn -> ID MODEQ expr .) ]
  ! GT              [ reduce using rule 44 (asgn -> ID MODEQ expr .) ]
  ! LE              [ reduce using rule 44 (asgn -> ID MODEQ expr .) ]
  ! GE              [ reduce using rule 44 (asgn -> ID MODEQ expr .) ]
  ! EQ              [ reduce using rule 44 (asgn -> ID MODEQ expr .) ]
  ! NE              [ reduce using rule 44 (asgn -> ID MODEQ expr .) ]
  ! OR              [ reduce using rule 44 (asgn -> ID MODEQ expr .) ]
  ! AND             [ reduce using rule 44 (asgn -> ID MODEQ expr .) ]
  ! NOT             [ reduce using rule 44 (asgn -> ID MODEQ expr .) ]


state 136

    (39) asgn -> ID ASSIGN expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    SEMICOLON       reduce using rule 39 (asgn -> ID ASSIGN expr .)
    COMMA           reduce using rule 39 (asgn -> ID ASSIGN expr .)
    NEWLINE         reduce using rule 39 (asgn -> ID ASSIGN expr .)
    RBRACKET        reduce using rule 39 (asgn -> ID ASSIGN expr .)
    RETURN          reduce using rule 39 (asgn -> ID ASSIGN expr .)
    PROCEDURE       reduce using rule 39 (asgn -> ID ASSIGN expr .)
    PRINT           reduce using rule 39 (asgn -> ID ASSIGN expr .)
    WHILE           reduce using rule 39 (asgn -> ID ASSIGN expr .)
    FOR             reduce using rule 39 (asgn -> ID ASSIGN expr .)
    IF              reduce using rule 39 (asgn -> ID ASSIGN expr .)
    LBRACKET        reduce using rule 39 (asgn -> ID ASSIGN expr .)
    LPARENT         reduce using rule 39 (asgn -> ID ASSIGN expr .)
    FLOAT           reduce using rule 39 (asgn -> ID ASSIGN expr .)
    ID              reduce using rule 39 (asgn -> ID ASSIGN expr .)
    UNARYMINUS      reduce using rule 39 (asgn -> ID ASSIGN expr .)
    INC             reduce using rule 39 (asgn -> ID ASSIGN expr .)
    DEC             reduce using rule 39 (asgn -> ID ASSIGN expr .)
    PI              reduce using rule 39 (asgn -> ID ASSIGN expr .)
    PHI             reduce using rule 39 (asgn -> ID ASSIGN expr .)
    GAMMA           reduce using rule 39 (asgn -> ID ASSIGN expr .)
    E               reduce using rule 39 (asgn -> ID ASSIGN expr .)
    DEG             reduce using rule 39 (asgn -> ID ASSIGN expr .)
    PREC            reduce using rule 39 (asgn -> ID ASSIGN expr .)
    SIN             reduce using rule 39 (asgn -> ID ASSIGN expr .)
    COS             reduce using rule 39 (asgn -> ID ASSIGN expr .)
    TAN             reduce using rule 39 (asgn -> ID ASSIGN expr .)
    ASIN            reduce using rule 39 (asgn -> ID ASSIGN expr .)
    ACOS            reduce using rule 39 (asgn -> ID ASSIGN expr .)
    ATAN            reduce using rule 39 (asgn -> ID ASSIGN expr .)
    SINH            reduce using rule 39 (asgn -> ID ASSIGN expr .)
    COSH            reduce using rule 39 (asgn -> ID ASSIGN expr .)
    TANH            reduce using rule 39 (asgn -> ID ASSIGN expr .)
    INT             reduce using rule 39 (asgn -> ID ASSIGN expr .)
    LOG             reduce using rule 39 (asgn -> ID ASSIGN expr .)
    LOG10           reduce using rule 39 (asgn -> ID ASSIGN expr .)
    SQRT            reduce using rule 39 (asgn -> ID ASSIGN expr .)
    ABS             reduce using rule 39 (asgn -> ID ASSIGN expr .)
    ERF             reduce using rule 39 (asgn -> ID ASSIGN expr .)
    ERFC            reduce using rule 39 (asgn -> ID ASSIGN expr .)
    END             reduce using rule 39 (asgn -> ID ASSIGN expr .)
    RPARENT         reduce using rule 39 (asgn -> ID ASSIGN expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 39 (asgn -> ID ASSIGN expr .) ]
  ! PLUS            [ reduce using rule 39 (asgn -> ID ASSIGN expr .) ]
  ! MINUS           [ reduce using rule 39 (asgn -> ID ASSIGN expr .) ]
  ! TIMES           [ reduce using rule 39 (asgn -> ID ASSIGN expr .) ]
  ! DIVIDE          [ reduce using rule 39 (asgn -> ID ASSIGN expr .) ]
  ! MOD             [ reduce using rule 39 (asgn -> ID ASSIGN expr .) ]
  ! LT              [ reduce using rule 39 (asgn -> ID ASSIGN expr .) ]
  ! GT              [ reduce using rule 39 (asgn -> ID ASSIGN expr .) ]
  ! LE              [ reduce using rule 39 (asgn -> ID ASSIGN expr .) ]
  ! GE              [ reduce using rule 39 (asgn -> ID ASSIGN expr .) ]
  ! EQ              [ reduce using rule 39 (asgn -> ID ASSIGN expr .) ]
  ! NE              [ reduce using rule 39 (asgn -> ID ASSIGN expr .) ]
  ! OR              [ reduce using rule 39 (asgn -> ID ASSIGN expr .) ]
  ! AND             [ reduce using rule 39 (asgn -> ID ASSIGN expr .) ]
  ! NOT             [ reduce using rule 39 (asgn -> ID ASSIGN expr .) ]


state 137

    (41) asgn -> ID SUBEQ expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    SEMICOLON       reduce using rule 41 (asgn -> ID SUBEQ expr .)
    COMMA           reduce using rule 41 (asgn -> ID SUBEQ expr .)
    NEWLINE         reduce using rule 41 (asgn -> ID SUBEQ expr .)
    RBRACKET        reduce using rule 41 (asgn -> ID SUBEQ expr .)
    RETURN          reduce using rule 41 (asgn -> ID SUBEQ expr .)
    PROCEDURE       reduce using rule 41 (asgn -> ID SUBEQ expr .)
    PRINT           reduce using rule 41 (asgn -> ID SUBEQ expr .)
    WHILE           reduce using rule 41 (asgn -> ID SUBEQ expr .)
    FOR             reduce using rule 41 (asgn -> ID SUBEQ expr .)
    IF              reduce using rule 41 (asgn -> ID SUBEQ expr .)
    LBRACKET        reduce using rule 41 (asgn -> ID SUBEQ expr .)
    LPARENT         reduce using rule 41 (asgn -> ID SUBEQ expr .)
    FLOAT           reduce using rule 41 (asgn -> ID SUBEQ expr .)
    ID              reduce using rule 41 (asgn -> ID SUBEQ expr .)
    UNARYMINUS      reduce using rule 41 (asgn -> ID SUBEQ expr .)
    INC             reduce using rule 41 (asgn -> ID SUBEQ expr .)
    DEC             reduce using rule 41 (asgn -> ID SUBEQ expr .)
    PI              reduce using rule 41 (asgn -> ID SUBEQ expr .)
    PHI             reduce using rule 41 (asgn -> ID SUBEQ expr .)
    GAMMA           reduce using rule 41 (asgn -> ID SUBEQ expr .)
    E               reduce using rule 41 (asgn -> ID SUBEQ expr .)
    DEG             reduce using rule 41 (asgn -> ID SUBEQ expr .)
    PREC            reduce using rule 41 (asgn -> ID SUBEQ expr .)
    SIN             reduce using rule 41 (asgn -> ID SUBEQ expr .)
    COS             reduce using rule 41 (asgn -> ID SUBEQ expr .)
    TAN             reduce using rule 41 (asgn -> ID SUBEQ expr .)
    ASIN            reduce using rule 41 (asgn -> ID SUBEQ expr .)
    ACOS            reduce using rule 41 (asgn -> ID SUBEQ expr .)
    ATAN            reduce using rule 41 (asgn -> ID SUBEQ expr .)
    SINH            reduce using rule 41 (asgn -> ID SUBEQ expr .)
    COSH            reduce using rule 41 (asgn -> ID SUBEQ expr .)
    TANH            reduce using rule 41 (asgn -> ID SUBEQ expr .)
    INT             reduce using rule 41 (asgn -> ID SUBEQ expr .)
    LOG             reduce using rule 41 (asgn -> ID SUBEQ expr .)
    LOG10           reduce using rule 41 (asgn -> ID SUBEQ expr .)
    SQRT            reduce using rule 41 (asgn -> ID SUBEQ expr .)
    ABS             reduce using rule 41 (asgn -> ID SUBEQ expr .)
    ERF             reduce using rule 41 (asgn -> ID SUBEQ expr .)
    ERFC            reduce using rule 41 (asgn -> ID SUBEQ expr .)
    END             reduce using rule 41 (asgn -> ID SUBEQ expr .)
    RPARENT         reduce using rule 41 (asgn -> ID SUBEQ expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 41 (asgn -> ID SUBEQ expr .) ]
  ! PLUS            [ reduce using rule 41 (asgn -> ID SUBEQ expr .) ]
  ! MINUS           [ reduce using rule 41 (asgn -> ID SUBEQ expr .) ]
  ! TIMES           [ reduce using rule 41 (asgn -> ID SUBEQ expr .) ]
  ! DIVIDE          [ reduce using rule 41 (asgn -> ID SUBEQ expr .) ]
  ! MOD             [ reduce using rule 41 (asgn -> ID SUBEQ expr .) ]
  ! LT              [ reduce using rule 41 (asgn -> ID SUBEQ expr .) ]
  ! GT              [ reduce using rule 41 (asgn -> ID SUBEQ expr .) ]
  ! LE              [ reduce using rule 41 (asgn -> ID SUBEQ expr .) ]
  ! GE              [ reduce using rule 41 (asgn -> ID SUBEQ expr .) ]
  ! EQ              [ reduce using rule 41 (asgn -> ID SUBEQ expr .) ]
  ! NE              [ reduce using rule 41 (asgn -> ID SUBEQ expr .) ]
  ! OR              [ reduce using rule 41 (asgn -> ID SUBEQ expr .) ]
  ! AND             [ reduce using rule 41 (asgn -> ID SUBEQ expr .) ]
  ! NOT             [ reduce using rule 41 (asgn -> ID SUBEQ expr .) ]


state 138

    (40) asgn -> ID ADDEQ expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    SEMICOLON       reduce using rule 40 (asgn -> ID ADDEQ expr .)
    COMMA           reduce using rule 40 (asgn -> ID ADDEQ expr .)
    NEWLINE         reduce using rule 40 (asgn -> ID ADDEQ expr .)
    RBRACKET        reduce using rule 40 (asgn -> ID ADDEQ expr .)
    RETURN          reduce using rule 40 (asgn -> ID ADDEQ expr .)
    PROCEDURE       reduce using rule 40 (asgn -> ID ADDEQ expr .)
    PRINT           reduce using rule 40 (asgn -> ID ADDEQ expr .)
    WHILE           reduce using rule 40 (asgn -> ID ADDEQ expr .)
    FOR             reduce using rule 40 (asgn -> ID ADDEQ expr .)
    IF              reduce using rule 40 (asgn -> ID ADDEQ expr .)
    LBRACKET        reduce using rule 40 (asgn -> ID ADDEQ expr .)
    LPARENT         reduce using rule 40 (asgn -> ID ADDEQ expr .)
    FLOAT           reduce using rule 40 (asgn -> ID ADDEQ expr .)
    ID              reduce using rule 40 (asgn -> ID ADDEQ expr .)
    UNARYMINUS      reduce using rule 40 (asgn -> ID ADDEQ expr .)
    INC             reduce using rule 40 (asgn -> ID ADDEQ expr .)
    DEC             reduce using rule 40 (asgn -> ID ADDEQ expr .)
    PI              reduce using rule 40 (asgn -> ID ADDEQ expr .)
    PHI             reduce using rule 40 (asgn -> ID ADDEQ expr .)
    GAMMA           reduce using rule 40 (asgn -> ID ADDEQ expr .)
    E               reduce using rule 40 (asgn -> ID ADDEQ expr .)
    DEG             reduce using rule 40 (asgn -> ID ADDEQ expr .)
    PREC            reduce using rule 40 (asgn -> ID ADDEQ expr .)
    SIN             reduce using rule 40 (asgn -> ID ADDEQ expr .)
    COS             reduce using rule 40 (asgn -> ID ADDEQ expr .)
    TAN             reduce using rule 40 (asgn -> ID ADDEQ expr .)
    ASIN            reduce using rule 40 (asgn -> ID ADDEQ expr .)
    ACOS            reduce using rule 40 (asgn -> ID ADDEQ expr .)
    ATAN            reduce using rule 40 (asgn -> ID ADDEQ expr .)
    SINH            reduce using rule 40 (asgn -> ID ADDEQ expr .)
    COSH            reduce using rule 40 (asgn -> ID ADDEQ expr .)
    TANH            reduce using rule 40 (asgn -> ID ADDEQ expr .)
    INT             reduce using rule 40 (asgn -> ID ADDEQ expr .)
    LOG             reduce using rule 40 (asgn -> ID ADDEQ expr .)
    LOG10           reduce using rule 40 (asgn -> ID ADDEQ expr .)
    SQRT            reduce using rule 40 (asgn -> ID ADDEQ expr .)
    ABS             reduce using rule 40 (asgn -> ID ADDEQ expr .)
    ERF             reduce using rule 40 (asgn -> ID ADDEQ expr .)
    ERFC            reduce using rule 40 (asgn -> ID ADDEQ expr .)
    END             reduce using rule 40 (asgn -> ID ADDEQ expr .)
    RPARENT         reduce using rule 40 (asgn -> ID ADDEQ expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 40 (asgn -> ID ADDEQ expr .) ]
  ! PLUS            [ reduce using rule 40 (asgn -> ID ADDEQ expr .) ]
  ! MINUS           [ reduce using rule 40 (asgn -> ID ADDEQ expr .) ]
  ! TIMES           [ reduce using rule 40 (asgn -> ID ADDEQ expr .) ]
  ! DIVIDE          [ reduce using rule 40 (asgn -> ID ADDEQ expr .) ]
  ! MOD             [ reduce using rule 40 (asgn -> ID ADDEQ expr .) ]
  ! LT              [ reduce using rule 40 (asgn -> ID ADDEQ expr .) ]
  ! GT              [ reduce using rule 40 (asgn -> ID ADDEQ expr .) ]
  ! LE              [ reduce using rule 40 (asgn -> ID ADDEQ expr .) ]
  ! GE              [ reduce using rule 40 (asgn -> ID ADDEQ expr .) ]
  ! EQ              [ reduce using rule 40 (asgn -> ID ADDEQ expr .) ]
  ! NE              [ reduce using rule 40 (asgn -> ID ADDEQ expr .) ]
  ! OR              [ reduce using rule 40 (asgn -> ID ADDEQ expr .) ]
  ! AND             [ reduce using rule 40 (asgn -> ID ADDEQ expr .) ]
  ! NOT             [ reduce using rule 40 (asgn -> ID ADDEQ expr .) ]


state 139

    (42) asgn -> ID MULEQ expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    SEMICOLON       reduce using rule 42 (asgn -> ID MULEQ expr .)
    COMMA           reduce using rule 42 (asgn -> ID MULEQ expr .)
    NEWLINE         reduce using rule 42 (asgn -> ID MULEQ expr .)
    RBRACKET        reduce using rule 42 (asgn -> ID MULEQ expr .)
    RETURN          reduce using rule 42 (asgn -> ID MULEQ expr .)
    PROCEDURE       reduce using rule 42 (asgn -> ID MULEQ expr .)
    PRINT           reduce using rule 42 (asgn -> ID MULEQ expr .)
    WHILE           reduce using rule 42 (asgn -> ID MULEQ expr .)
    FOR             reduce using rule 42 (asgn -> ID MULEQ expr .)
    IF              reduce using rule 42 (asgn -> ID MULEQ expr .)
    LBRACKET        reduce using rule 42 (asgn -> ID MULEQ expr .)
    LPARENT         reduce using rule 42 (asgn -> ID MULEQ expr .)
    FLOAT           reduce using rule 42 (asgn -> ID MULEQ expr .)
    ID              reduce using rule 42 (asgn -> ID MULEQ expr .)
    UNARYMINUS      reduce using rule 42 (asgn -> ID MULEQ expr .)
    INC             reduce using rule 42 (asgn -> ID MULEQ expr .)
    DEC             reduce using rule 42 (asgn -> ID MULEQ expr .)
    PI              reduce using rule 42 (asgn -> ID MULEQ expr .)
    PHI             reduce using rule 42 (asgn -> ID MULEQ expr .)
    GAMMA           reduce using rule 42 (asgn -> ID MULEQ expr .)
    E               reduce using rule 42 (asgn -> ID MULEQ expr .)
    DEG             reduce using rule 42 (asgn -> ID MULEQ expr .)
    PREC            reduce using rule 42 (asgn -> ID MULEQ expr .)
    SIN             reduce using rule 42 (asgn -> ID MULEQ expr .)
    COS             reduce using rule 42 (asgn -> ID MULEQ expr .)
    TAN             reduce using rule 42 (asgn -> ID MULEQ expr .)
    ASIN            reduce using rule 42 (asgn -> ID MULEQ expr .)
    ACOS            reduce using rule 42 (asgn -> ID MULEQ expr .)
    ATAN            reduce using rule 42 (asgn -> ID MULEQ expr .)
    SINH            reduce using rule 42 (asgn -> ID MULEQ expr .)
    COSH            reduce using rule 42 (asgn -> ID MULEQ expr .)
    TANH            reduce using rule 42 (asgn -> ID MULEQ expr .)
    INT             reduce using rule 42 (asgn -> ID MULEQ expr .)
    LOG             reduce using rule 42 (asgn -> ID MULEQ expr .)
    LOG10           reduce using rule 42 (asgn -> ID MULEQ expr .)
    SQRT            reduce using rule 42 (asgn -> ID MULEQ expr .)
    ABS             reduce using rule 42 (asgn -> ID MULEQ expr .)
    ERF             reduce using rule 42 (asgn -> ID MULEQ expr .)
    ERFC            reduce using rule 42 (asgn -> ID MULEQ expr .)
    END             reduce using rule 42 (asgn -> ID MULEQ expr .)
    RPARENT         reduce using rule 42 (asgn -> ID MULEQ expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 42 (asgn -> ID MULEQ expr .) ]
  ! PLUS            [ reduce using rule 42 (asgn -> ID MULEQ expr .) ]
  ! MINUS           [ reduce using rule 42 (asgn -> ID MULEQ expr .) ]
  ! TIMES           [ reduce using rule 42 (asgn -> ID MULEQ expr .) ]
  ! DIVIDE          [ reduce using rule 42 (asgn -> ID MULEQ expr .) ]
  ! MOD             [ reduce using rule 42 (asgn -> ID MULEQ expr .) ]
  ! LT              [ reduce using rule 42 (asgn -> ID MULEQ expr .) ]
  ! GT              [ reduce using rule 42 (asgn -> ID MULEQ expr .) ]
  ! LE              [ reduce using rule 42 (asgn -> ID MULEQ expr .) ]
  ! GE              [ reduce using rule 42 (asgn -> ID MULEQ expr .) ]
  ! EQ              [ reduce using rule 42 (asgn -> ID MULEQ expr .) ]
  ! NE              [ reduce using rule 42 (asgn -> ID MULEQ expr .) ]
  ! OR              [ reduce using rule 42 (asgn -> ID MULEQ expr .) ]
  ! AND             [ reduce using rule 42 (asgn -> ID MULEQ expr .) ]
  ! NOT             [ reduce using rule 42 (asgn -> ID MULEQ expr .) ]


state 140

    (43) asgn -> ID DIVEQ expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    SEMICOLON       reduce using rule 43 (asgn -> ID DIVEQ expr .)
    COMMA           reduce using rule 43 (asgn -> ID DIVEQ expr .)
    NEWLINE         reduce using rule 43 (asgn -> ID DIVEQ expr .)
    RBRACKET        reduce using rule 43 (asgn -> ID DIVEQ expr .)
    RETURN          reduce using rule 43 (asgn -> ID DIVEQ expr .)
    PROCEDURE       reduce using rule 43 (asgn -> ID DIVEQ expr .)
    PRINT           reduce using rule 43 (asgn -> ID DIVEQ expr .)
    WHILE           reduce using rule 43 (asgn -> ID DIVEQ expr .)
    FOR             reduce using rule 43 (asgn -> ID DIVEQ expr .)
    IF              reduce using rule 43 (asgn -> ID DIVEQ expr .)
    LBRACKET        reduce using rule 43 (asgn -> ID DIVEQ expr .)
    LPARENT         reduce using rule 43 (asgn -> ID DIVEQ expr .)
    FLOAT           reduce using rule 43 (asgn -> ID DIVEQ expr .)
    ID              reduce using rule 43 (asgn -> ID DIVEQ expr .)
    UNARYMINUS      reduce using rule 43 (asgn -> ID DIVEQ expr .)
    INC             reduce using rule 43 (asgn -> ID DIVEQ expr .)
    DEC             reduce using rule 43 (asgn -> ID DIVEQ expr .)
    PI              reduce using rule 43 (asgn -> ID DIVEQ expr .)
    PHI             reduce using rule 43 (asgn -> ID DIVEQ expr .)
    GAMMA           reduce using rule 43 (asgn -> ID DIVEQ expr .)
    E               reduce using rule 43 (asgn -> ID DIVEQ expr .)
    DEG             reduce using rule 43 (asgn -> ID DIVEQ expr .)
    PREC            reduce using rule 43 (asgn -> ID DIVEQ expr .)
    SIN             reduce using rule 43 (asgn -> ID DIVEQ expr .)
    COS             reduce using rule 43 (asgn -> ID DIVEQ expr .)
    TAN             reduce using rule 43 (asgn -> ID DIVEQ expr .)
    ASIN            reduce using rule 43 (asgn -> ID DIVEQ expr .)
    ACOS            reduce using rule 43 (asgn -> ID DIVEQ expr .)
    ATAN            reduce using rule 43 (asgn -> ID DIVEQ expr .)
    SINH            reduce using rule 43 (asgn -> ID DIVEQ expr .)
    COSH            reduce using rule 43 (asgn -> ID DIVEQ expr .)
    TANH            reduce using rule 43 (asgn -> ID DIVEQ expr .)
    INT             reduce using rule 43 (asgn -> ID DIVEQ expr .)
    LOG             reduce using rule 43 (asgn -> ID DIVEQ expr .)
    LOG10           reduce using rule 43 (asgn -> ID DIVEQ expr .)
    SQRT            reduce using rule 43 (asgn -> ID DIVEQ expr .)
    ABS             reduce using rule 43 (asgn -> ID DIVEQ expr .)
    ERF             reduce using rule 43 (asgn -> ID DIVEQ expr .)
    ERFC            reduce using rule 43 (asgn -> ID DIVEQ expr .)
    END             reduce using rule 43 (asgn -> ID DIVEQ expr .)
    RPARENT         reduce using rule 43 (asgn -> ID DIVEQ expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 43 (asgn -> ID DIVEQ expr .) ]
  ! PLUS            [ reduce using rule 43 (asgn -> ID DIVEQ expr .) ]
  ! MINUS           [ reduce using rule 43 (asgn -> ID DIVEQ expr .) ]
  ! TIMES           [ reduce using rule 43 (asgn -> ID DIVEQ expr .) ]
  ! DIVIDE          [ reduce using rule 43 (asgn -> ID DIVEQ expr .) ]
  ! MOD             [ reduce using rule 43 (asgn -> ID DIVEQ expr .) ]
  ! LT              [ reduce using rule 43 (asgn -> ID DIVEQ expr .) ]
  ! GT              [ reduce using rule 43 (asgn -> ID DIVEQ expr .) ]
  ! LE              [ reduce using rule 43 (asgn -> ID DIVEQ expr .) ]
  ! GE              [ reduce using rule 43 (asgn -> ID DIVEQ expr .) ]
  ! EQ              [ reduce using rule 43 (asgn -> ID DIVEQ expr .) ]
  ! NE              [ reduce using rule 43 (asgn -> ID DIVEQ expr .) ]
  ! OR              [ reduce using rule 43 (asgn -> ID DIVEQ expr .) ]
  ! AND             [ reduce using rule 43 (asgn -> ID DIVEQ expr .) ]
  ! NOT             [ reduce using rule 43 (asgn -> ID DIVEQ expr .) ]


state 141

    (16) stmt -> IF LPARENT cond . RPARENT stmt END
    (17) stmt -> IF LPARENT cond . RPARENT stmt END ELSE stmt END

    RPARENT         shift and go to state 154


state 142

    (12) stmt -> PROCEDURE BEGIN LPARENT arglist . RPARENT
    (76) arglist -> arglist . COMMA expr

    RPARENT         shift and go to state 156
    COMMA           shift and go to state 155


state 143

    (74) arglist -> empty .

    RPARENT         reduce using rule 74 (arglist -> empty .)
    COMMA           reduce using rule 74 (arglist -> empty .)


state 144

    (75) arglist -> expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    RPARENT         reduce using rule 75 (arglist -> expr .)
    COMMA           reduce using rule 75 (arglist -> expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89


state 145

    (60) callfunc -> bltin LPARENT expr RPARENT .

    EXP             reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    PLUS            reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    MINUS           reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    TIMES           reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    DIVIDE          reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    MOD             reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    LT              reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    GT              reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    LE              reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    GE              reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    EQ              reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    NE              reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    OR              reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    AND             reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    NOT             reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    RPARENT         reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    COMMA           reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    NEWLINE         reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    RBRACKET        reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    RETURN          reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    PROCEDURE       reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    PRINT           reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    WHILE           reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    FOR             reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    IF              reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    LBRACKET        reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    LPARENT         reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    FLOAT           reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    ID              reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    UNARYMINUS      reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    INC             reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    DEC             reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    PI              reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    PHI             reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    GAMMA           reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    E               reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    DEG             reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    PREC            reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    SIN             reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    COS             reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    TAN             reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    ASIN            reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    ACOS            reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    ATAN            reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    SINH            reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    COSH            reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    TANH            reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    INT             reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    LOG             reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    LOG10           reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    SQRT            reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    ABS             reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    ERF             reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    ERFC            reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    END             reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)
    SEMICOLON       reduce using rule 60 (callfunc -> bltin LPARENT expr RPARENT .)


state 146

    (65) prlist -> prlist COMMA STRING .

    COMMA           reduce using rule 65 (prlist -> prlist COMMA STRING .)
    NEWLINE         reduce using rule 65 (prlist -> prlist COMMA STRING .)
    RBRACKET        reduce using rule 65 (prlist -> prlist COMMA STRING .)
    RETURN          reduce using rule 65 (prlist -> prlist COMMA STRING .)
    PROCEDURE       reduce using rule 65 (prlist -> prlist COMMA STRING .)
    PRINT           reduce using rule 65 (prlist -> prlist COMMA STRING .)
    WHILE           reduce using rule 65 (prlist -> prlist COMMA STRING .)
    FOR             reduce using rule 65 (prlist -> prlist COMMA STRING .)
    IF              reduce using rule 65 (prlist -> prlist COMMA STRING .)
    LBRACKET        reduce using rule 65 (prlist -> prlist COMMA STRING .)
    LPARENT         reduce using rule 65 (prlist -> prlist COMMA STRING .)
    FLOAT           reduce using rule 65 (prlist -> prlist COMMA STRING .)
    ID              reduce using rule 65 (prlist -> prlist COMMA STRING .)
    UNARYMINUS      reduce using rule 65 (prlist -> prlist COMMA STRING .)
    INC             reduce using rule 65 (prlist -> prlist COMMA STRING .)
    DEC             reduce using rule 65 (prlist -> prlist COMMA STRING .)
    PI              reduce using rule 65 (prlist -> prlist COMMA STRING .)
    PHI             reduce using rule 65 (prlist -> prlist COMMA STRING .)
    GAMMA           reduce using rule 65 (prlist -> prlist COMMA STRING .)
    E               reduce using rule 65 (prlist -> prlist COMMA STRING .)
    DEG             reduce using rule 65 (prlist -> prlist COMMA STRING .)
    PREC            reduce using rule 65 (prlist -> prlist COMMA STRING .)
    SIN             reduce using rule 65 (prlist -> prlist COMMA STRING .)
    COS             reduce using rule 65 (prlist -> prlist COMMA STRING .)
    TAN             reduce using rule 65 (prlist -> prlist COMMA STRING .)
    ASIN            reduce using rule 65 (prlist -> prlist COMMA STRING .)
    ACOS            reduce using rule 65 (prlist -> prlist COMMA STRING .)
    ATAN            reduce using rule 65 (prlist -> prlist COMMA STRING .)
    SINH            reduce using rule 65 (prlist -> prlist COMMA STRING .)
    COSH            reduce using rule 65 (prlist -> prlist COMMA STRING .)
    TANH            reduce using rule 65 (prlist -> prlist COMMA STRING .)
    INT             reduce using rule 65 (prlist -> prlist COMMA STRING .)
    LOG             reduce using rule 65 (prlist -> prlist COMMA STRING .)
    LOG10           reduce using rule 65 (prlist -> prlist COMMA STRING .)
    SQRT            reduce using rule 65 (prlist -> prlist COMMA STRING .)
    ABS             reduce using rule 65 (prlist -> prlist COMMA STRING .)
    ERF             reduce using rule 65 (prlist -> prlist COMMA STRING .)
    ERFC            reduce using rule 65 (prlist -> prlist COMMA STRING .)
    END             reduce using rule 65 (prlist -> prlist COMMA STRING .)


state 147

    (64) prlist -> prlist COMMA expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    COMMA           reduce using rule 64 (prlist -> prlist COMMA expr .)
    NEWLINE         reduce using rule 64 (prlist -> prlist COMMA expr .)
    RBRACKET        reduce using rule 64 (prlist -> prlist COMMA expr .)
    RETURN          reduce using rule 64 (prlist -> prlist COMMA expr .)
    PROCEDURE       reduce using rule 64 (prlist -> prlist COMMA expr .)
    PRINT           reduce using rule 64 (prlist -> prlist COMMA expr .)
    WHILE           reduce using rule 64 (prlist -> prlist COMMA expr .)
    FOR             reduce using rule 64 (prlist -> prlist COMMA expr .)
    IF              reduce using rule 64 (prlist -> prlist COMMA expr .)
    LBRACKET        reduce using rule 64 (prlist -> prlist COMMA expr .)
    LPARENT         reduce using rule 64 (prlist -> prlist COMMA expr .)
    FLOAT           reduce using rule 64 (prlist -> prlist COMMA expr .)
    ID              reduce using rule 64 (prlist -> prlist COMMA expr .)
    UNARYMINUS      reduce using rule 64 (prlist -> prlist COMMA expr .)
    INC             reduce using rule 64 (prlist -> prlist COMMA expr .)
    DEC             reduce using rule 64 (prlist -> prlist COMMA expr .)
    PI              reduce using rule 64 (prlist -> prlist COMMA expr .)
    PHI             reduce using rule 64 (prlist -> prlist COMMA expr .)
    GAMMA           reduce using rule 64 (prlist -> prlist COMMA expr .)
    E               reduce using rule 64 (prlist -> prlist COMMA expr .)
    DEG             reduce using rule 64 (prlist -> prlist COMMA expr .)
    PREC            reduce using rule 64 (prlist -> prlist COMMA expr .)
    SIN             reduce using rule 64 (prlist -> prlist COMMA expr .)
    COS             reduce using rule 64 (prlist -> prlist COMMA expr .)
    TAN             reduce using rule 64 (prlist -> prlist COMMA expr .)
    ASIN            reduce using rule 64 (prlist -> prlist COMMA expr .)
    ACOS            reduce using rule 64 (prlist -> prlist COMMA expr .)
    ATAN            reduce using rule 64 (prlist -> prlist COMMA expr .)
    SINH            reduce using rule 64 (prlist -> prlist COMMA expr .)
    COSH            reduce using rule 64 (prlist -> prlist COMMA expr .)
    TANH            reduce using rule 64 (prlist -> prlist COMMA expr .)
    INT             reduce using rule 64 (prlist -> prlist COMMA expr .)
    LOG             reduce using rule 64 (prlist -> prlist COMMA expr .)
    LOG10           reduce using rule 64 (prlist -> prlist COMMA expr .)
    SQRT            reduce using rule 64 (prlist -> prlist COMMA expr .)
    ABS             reduce using rule 64 (prlist -> prlist COMMA expr .)
    ERF             reduce using rule 64 (prlist -> prlist COMMA expr .)
    ERFC            reduce using rule 64 (prlist -> prlist COMMA expr .)
    END             reduce using rule 64 (prlist -> prlist COMMA expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89


state 148

    (15) stmt -> FOR LPARENT cond SEMICOLON . cond SEMICOLON cond RPARENT stmt END
    (19) cond -> . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 114
    callfunc                       shift and go to state 39
    asgn                           shift and go to state 7
    cond                           shift and go to state 157
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50
    bltin                          shift and go to state 12

state 149

    (68) formals -> ID .
    (69) formals -> ID . COMMA formals

    RPARENT         reduce using rule 68 (formals -> ID .)
    COMMA           shift and go to state 158


state 150

    (66) defn -> FUNC procname LPARENT formals . RPARENT

    RPARENT         shift and go to state 159


state 151

    (67) defn -> PROC procname LPARENT formals . RPARENT

    RPARENT         shift and go to state 160


state 152

    (14) stmt -> WHILE LPARENT cond RPARENT . stmt END
    (9) stmt -> . expr
    (10) stmt -> . RETURN
    (11) stmt -> . RETURN expr
    (12) stmt -> . PROCEDURE BEGIN LPARENT arglist RPARENT
    (13) stmt -> . PRINT prlist
    (14) stmt -> . WHILE LPARENT cond RPARENT stmt END
    (15) stmt -> . FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END
    (16) stmt -> . IF LPARENT cond RPARENT stmt END
    (17) stmt -> . IF LPARENT cond RPARENT stmt END ELSE stmt END
    (18) stmt -> . LBRACKET stmtlist RBRACKET
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    RETURN          shift and go to state 13
    PROCEDURE       shift and go to state 10
    PRINT           shift and go to state 14
    WHILE           shift and go to state 32
    FOR             shift and go to state 23
    IF              shift and go to state 52
    LBRACKET        shift and go to state 4
    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    binaryop                       shift and go to state 41
    unaryop                        shift and go to state 37
    expr                           shift and go to state 108
    callfunc                       shift and go to state 39
    stmt                           shift and go to state 161
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    logicop                        shift and go to state 46
    data                           shift and go to state 50
    bltin                          shift and go to state 12

state 153

    (61) callfunc -> ID LPARENT expr RPARENT .

    EXP             reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    PLUS            reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    MINUS           reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    TIMES           reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    DIVIDE          reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    MOD             reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    LT              reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    GT              reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    LE              reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    GE              reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    EQ              reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    NE              reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    OR              reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    AND             reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    NOT             reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    RPARENT         reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    COMMA           reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    NEWLINE         reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    RBRACKET        reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    RETURN          reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    PROCEDURE       reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    PRINT           reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    WHILE           reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    FOR             reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    IF              reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    LBRACKET        reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    LPARENT         reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    FLOAT           reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    ID              reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    UNARYMINUS      reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    INC             reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    DEC             reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    PI              reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    PHI             reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    GAMMA           reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    E               reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    DEG             reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    PREC            reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    SIN             reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    COS             reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    TAN             reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    ASIN            reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    ACOS            reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    ATAN            reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    SINH            reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    COSH            reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    TANH            reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    INT             reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    LOG             reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    LOG10           reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    SQRT            reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    ABS             reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    ERF             reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    ERFC            reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    END             reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)
    SEMICOLON       reduce using rule 61 (callfunc -> ID LPARENT expr RPARENT .)


state 154

    (16) stmt -> IF LPARENT cond RPARENT . stmt END
    (17) stmt -> IF LPARENT cond RPARENT . stmt END ELSE stmt END
    (9) stmt -> . expr
    (10) stmt -> . RETURN
    (11) stmt -> . RETURN expr
    (12) stmt -> . PROCEDURE BEGIN LPARENT arglist RPARENT
    (13) stmt -> . PRINT prlist
    (14) stmt -> . WHILE LPARENT cond RPARENT stmt END
    (15) stmt -> . FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END
    (16) stmt -> . IF LPARENT cond RPARENT stmt END
    (17) stmt -> . IF LPARENT cond RPARENT stmt END ELSE stmt END
    (18) stmt -> . LBRACKET stmtlist RBRACKET
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    RETURN          shift and go to state 13
    PROCEDURE       shift and go to state 10
    PRINT           shift and go to state 14
    WHILE           shift and go to state 32
    FOR             shift and go to state 23
    IF              shift and go to state 52
    LBRACKET        shift and go to state 4
    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    binaryop                       shift and go to state 41
    unaryop                        shift and go to state 37
    expr                           shift and go to state 108
    callfunc                       shift and go to state 39
    stmt                           shift and go to state 162
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    logicop                        shift and go to state 46
    data                           shift and go to state 50
    bltin                          shift and go to state 12

state 155

    (76) arglist -> arglist COMMA . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 163
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 156

    (12) stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .

    END             reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    NEWLINE         reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    RBRACKET        reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    RETURN          reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    PROCEDURE       reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    PRINT           reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    WHILE           reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    FOR             reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    IF              reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    LBRACKET        reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    LPARENT         reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    FLOAT           reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    ID              reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    UNARYMINUS      reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    INC             reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    DEC             reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    PI              reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    PHI             reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    GAMMA           reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    E               reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    DEG             reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    PREC            reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    SIN             reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    COS             reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    TAN             reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    ASIN            reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    ACOS            reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    ATAN            reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    SINH            reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    COSH            reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    TANH            reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    INT             reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    LOG             reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    LOG10           reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    SQRT            reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    ABS             reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    ERF             reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    ERFC            reduce using rule 12 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)


state 157

    (15) stmt -> FOR LPARENT cond SEMICOLON cond . SEMICOLON cond RPARENT stmt END

    SEMICOLON       shift and go to state 164


state 158

    (69) formals -> ID COMMA . formals
    (68) formals -> . ID
    (69) formals -> . ID COMMA formals

    ID              shift and go to state 149

    formals                        shift and go to state 165

state 159

    (66) defn -> FUNC procname LPARENT formals RPARENT .

    NEWLINE         reduce using rule 66 (defn -> FUNC procname LPARENT formals RPARENT .)


state 160

    (67) defn -> PROC procname LPARENT formals RPARENT .

    NEWLINE         reduce using rule 67 (defn -> PROC procname LPARENT formals RPARENT .)


state 161

    (14) stmt -> WHILE LPARENT cond RPARENT stmt . END

    END             shift and go to state 166


state 162

    (16) stmt -> IF LPARENT cond RPARENT stmt . END
    (17) stmt -> IF LPARENT cond RPARENT stmt . END ELSE stmt END

    END             shift and go to state 167


state 163

    (76) arglist -> arglist COMMA expr .
    (45) mathop -> expr . EXP expr
    (46) mathop -> expr . PLUS expr
    (47) mathop -> expr . MINUS expr
    (48) mathop -> expr . TIMES expr
    (49) mathop -> expr . DIVIDE expr
    (50) mathop -> expr . MOD expr
    (51) logicop -> expr . LT expr
    (52) logicop -> expr . GT expr
    (53) logicop -> expr . LE expr
    (54) logicop -> expr . GE expr
    (55) logicop -> expr . EQ expr
    (56) logicop -> expr . NE expr
    (57) logicop -> expr . OR expr
    (58) logicop -> expr . AND expr
    (59) logicop -> expr . NOT expr

    RPARENT         reduce using rule 76 (arglist -> arglist COMMA expr .)
    COMMA           reduce using rule 76 (arglist -> arglist COMMA expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89


state 164

    (15) stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON . cond RPARENT stmt END
    (19) cond -> . expr
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 114
    callfunc                       shift and go to state 39
    asgn                           shift and go to state 7
    cond                           shift and go to state 168
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50
    bltin                          shift and go to state 12

state 165

    (69) formals -> ID COMMA formals .

    RPARENT         reduce using rule 69 (formals -> ID COMMA formals .)


state 166

    (14) stmt -> WHILE LPARENT cond RPARENT stmt END .

    END             reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    NEWLINE         reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    RBRACKET        reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    RETURN          reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    PROCEDURE       reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    PRINT           reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    WHILE           reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    FOR             reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    IF              reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    LBRACKET        reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    LPARENT         reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    FLOAT           reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    ID              reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    UNARYMINUS      reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    INC             reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    DEC             reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    PI              reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    PHI             reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    GAMMA           reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    E               reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    DEG             reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    PREC            reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    SIN             reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    COS             reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    TAN             reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    ASIN            reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    ACOS            reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    ATAN            reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    SINH            reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    COSH            reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    TANH            reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    INT             reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    LOG             reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    LOG10           reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    SQRT            reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    ABS             reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    ERF             reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    ERFC            reduce using rule 14 (stmt -> WHILE LPARENT cond RPARENT stmt END .)


state 167

    (16) stmt -> IF LPARENT cond RPARENT stmt END .
    (17) stmt -> IF LPARENT cond RPARENT stmt END . ELSE stmt END

    END             reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    NEWLINE         reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    RBRACKET        reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    RETURN          reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    PROCEDURE       reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    PRINT           reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    WHILE           reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    FOR             reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    IF              reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    LBRACKET        reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    LPARENT         reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    FLOAT           reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    ID              reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    UNARYMINUS      reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    INC             reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    DEC             reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    PI              reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    PHI             reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    GAMMA           reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    E               reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    DEG             reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    PREC            reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    SIN             reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    COS             reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    TAN             reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    ASIN            reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    ACOS            reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    ATAN            reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    SINH            reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    COSH            reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    TANH            reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    INT             reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    LOG             reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    LOG10           reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    SQRT            reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    ABS             reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    ERF             reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    ERFC            reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END .)
    ELSE            shift and go to state 169


state 168

    (15) stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond . RPARENT stmt END

    RPARENT         shift and go to state 170


state 169

    (17) stmt -> IF LPARENT cond RPARENT stmt END ELSE . stmt END
    (9) stmt -> . expr
    (10) stmt -> . RETURN
    (11) stmt -> . RETURN expr
    (12) stmt -> . PROCEDURE BEGIN LPARENT arglist RPARENT
    (13) stmt -> . PRINT prlist
    (14) stmt -> . WHILE LPARENT cond RPARENT stmt END
    (15) stmt -> . FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END
    (16) stmt -> . IF LPARENT cond RPARENT stmt END
    (17) stmt -> . IF LPARENT cond RPARENT stmt END ELSE stmt END
    (18) stmt -> . LBRACKET stmtlist RBRACKET
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    RETURN          shift and go to state 13
    PROCEDURE       shift and go to state 10
    PRINT           shift and go to state 14
    WHILE           shift and go to state 32
    FOR             shift and go to state 23
    IF              shift and go to state 52
    LBRACKET        shift and go to state 4
    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    binaryop                       shift and go to state 41
    unaryop                        shift and go to state 37
    expr                           shift and go to state 108
    callfunc                       shift and go to state 39
    stmt                           shift and go to state 171
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    logicop                        shift and go to state 46
    data                           shift and go to state 50
    bltin                          shift and go to state 12

state 170

    (15) stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT . stmt END
    (9) stmt -> . expr
    (10) stmt -> . RETURN
    (11) stmt -> . RETURN expr
    (12) stmt -> . PROCEDURE BEGIN LPARENT arglist RPARENT
    (13) stmt -> . PRINT prlist
    (14) stmt -> . WHILE LPARENT cond RPARENT stmt END
    (15) stmt -> . FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END
    (16) stmt -> . IF LPARENT cond RPARENT stmt END
    (17) stmt -> . IF LPARENT cond RPARENT stmt END ELSE stmt END
    (18) stmt -> . LBRACKET stmtlist RBRACKET
    (23) expr -> . data
    (24) expr -> . unaryop
    (25) expr -> . binaryop
    (26) expr -> . LPARENT expr RPARENT
    (27) expr -> . callfunc
    (28) data -> . FLOAT
    (29) data -> . constant
    (30) data -> . ID
    (31) unaryop -> . UNARYMINUS expr
    (32) unaryop -> . INC ID
    (33) unaryop -> . DEC ID
    (34) unaryop -> . ID INC
    (35) unaryop -> . ID DEC
    (36) binaryop -> . asgn
    (37) binaryop -> . mathop
    (38) binaryop -> . logicop
    (60) callfunc -> . bltin LPARENT expr RPARENT
    (61) callfunc -> . ID LPARENT expr RPARENT
    (94) constant -> . PI
    (95) constant -> . PHI
    (96) constant -> . GAMMA
    (97) constant -> . E
    (98) constant -> . DEG
    (99) constant -> . PREC
    (39) asgn -> . ID ASSIGN expr
    (40) asgn -> . ID ADDEQ expr
    (41) asgn -> . ID SUBEQ expr
    (42) asgn -> . ID MULEQ expr
    (43) asgn -> . ID DIVEQ expr
    (44) asgn -> . ID MODEQ expr
    (45) mathop -> . expr EXP expr
    (46) mathop -> . expr PLUS expr
    (47) mathop -> . expr MINUS expr
    (48) mathop -> . expr TIMES expr
    (49) mathop -> . expr DIVIDE expr
    (50) mathop -> . expr MOD expr
    (51) logicop -> . expr LT expr
    (52) logicop -> . expr GT expr
    (53) logicop -> . expr LE expr
    (54) logicop -> . expr GE expr
    (55) logicop -> . expr EQ expr
    (56) logicop -> . expr NE expr
    (57) logicop -> . expr OR expr
    (58) logicop -> . expr AND expr
    (59) logicop -> . expr NOT expr
    (78) bltin -> . SIN
    (79) bltin -> . COS
    (80) bltin -> . TAN
    (81) bltin -> . ASIN
    (82) bltin -> . ACOS
    (83) bltin -> . ATAN
    (84) bltin -> . SINH
    (85) bltin -> . COSH
    (86) bltin -> . TANH
    (87) bltin -> . INT
    (88) bltin -> . LOG
    (89) bltin -> . LOG10
    (90) bltin -> . SQRT
    (91) bltin -> . ABS
    (92) bltin -> . ERF
    (93) bltin -> . ERFC

    RETURN          shift and go to state 13
    PROCEDURE       shift and go to state 10
    PRINT           shift and go to state 14
    WHILE           shift and go to state 32
    FOR             shift and go to state 23
    IF              shift and go to state 52
    LBRACKET        shift and go to state 4
    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    binaryop                       shift and go to state 41
    unaryop                        shift and go to state 37
    expr                           shift and go to state 108
    callfunc                       shift and go to state 39
    stmt                           shift and go to state 172
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    logicop                        shift and go to state 46
    data                           shift and go to state 50
    bltin                          shift and go to state 12

state 171

    (17) stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt . END

    END             shift and go to state 173


state 172

    (15) stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt . END

    END             shift and go to state 174


state 173

    (17) stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .

    END             reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    NEWLINE         reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    RBRACKET        reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    RETURN          reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    PROCEDURE       reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    PRINT           reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    WHILE           reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    FOR             reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    IF              reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    LBRACKET        reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    LPARENT         reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    FLOAT           reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    ID              reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    UNARYMINUS      reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    INC             reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    DEC             reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    PI              reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    PHI             reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    GAMMA           reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    E               reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    DEG             reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    PREC            reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    SIN             reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    COS             reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    TAN             reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    ASIN            reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    ACOS            reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    ATAN            reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    SINH            reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    COSH            reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    TANH            reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    INT             reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    LOG             reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    LOG10           reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    SQRT            reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    ABS             reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    ERF             reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    ERFC            reduce using rule 17 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)


state 174

    (15) stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .

    END             reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    NEWLINE         reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    RBRACKET        reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    RETURN          reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    PROCEDURE       reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    PRINT           reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    WHILE           reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    FOR             reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    IF              reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    LBRACKET        reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    LPARENT         reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    FLOAT           reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    ID              reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    UNARYMINUS      reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    INC             reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    DEC             reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    PI              reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    PHI             reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    GAMMA           reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    E               reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    DEG             reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    PREC            reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    SIN             reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    COS             reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    TAN             reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    ASIN            reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    ACOS            reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    ATAN            reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    SINH            reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    COSH            reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    TANH            reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    INT             reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    LOG             reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    LOG10           reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    SQRT            reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    ABS             reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    ERF             reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    ERFC            reduce using rule 15 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPARENT in state 13 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 13 resolved as shift
WARNING: shift/reduce conflict for ID in state 13 resolved as shift
WARNING: shift/reduce conflict for UNARYMINUS in state 13 resolved as shift
WARNING: shift/reduce conflict for INC in state 13 resolved as shift
WARNING: shift/reduce conflict for DEC in state 13 resolved as shift
WARNING: shift/reduce conflict for PI in state 13 resolved as shift
WARNING: shift/reduce conflict for PHI in state 13 resolved as shift
WARNING: shift/reduce conflict for GAMMA in state 13 resolved as shift
WARNING: shift/reduce conflict for E in state 13 resolved as shift
WARNING: shift/reduce conflict for DEG in state 13 resolved as shift
WARNING: shift/reduce conflict for PREC in state 13 resolved as shift
WARNING: shift/reduce conflict for SIN in state 13 resolved as shift
WARNING: shift/reduce conflict for COS in state 13 resolved as shift
WARNING: shift/reduce conflict for TAN in state 13 resolved as shift
WARNING: shift/reduce conflict for ASIN in state 13 resolved as shift
WARNING: shift/reduce conflict for ACOS in state 13 resolved as shift
WARNING: shift/reduce conflict for ATAN in state 13 resolved as shift
WARNING: shift/reduce conflict for SINH in state 13 resolved as shift
WARNING: shift/reduce conflict for COSH in state 13 resolved as shift
WARNING: shift/reduce conflict for TANH in state 13 resolved as shift
WARNING: shift/reduce conflict for INT in state 13 resolved as shift
WARNING: shift/reduce conflict for LOG in state 13 resolved as shift
WARNING: shift/reduce conflict for LOG10 in state 13 resolved as shift
WARNING: shift/reduce conflict for SQRT in state 13 resolved as shift
WARNING: shift/reduce conflict for ABS in state 13 resolved as shift
WARNING: shift/reduce conflict for ERF in state 13 resolved as shift
WARNING: shift/reduce conflict for ERFC in state 13 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 38 resolved as shift
WARNING: shift/reduce conflict for INC in state 51 resolved as shift
WARNING: shift/reduce conflict for DEC in state 51 resolved as shift
WARNING: shift/reduce conflict for LPARENT in state 51 resolved as shift
