Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> list
Rule 2     list -> empty
Rule 3     list -> list NEWLINE
Rule 4     list -> list defn NEWLINE
Rule 5     list -> list stmt NEWLINE
Rule 6     list -> list expr NEWLINE
Rule 7     list -> list error NEWLINE
Rule 8     list -> list COMMENT NEWLINE
Rule 9     stmt -> RETURN
Rule 10    stmt -> RETURN expr
Rule 11    stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT
Rule 12    stmt -> PRINT prlist
Rule 13    stmt -> WHILE LPARENT cond RPARENT stmt END
Rule 14    stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END
Rule 15    stmt -> IF LPARENT cond RPARENT stmt END
Rule 16    stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END
Rule 17    stmt -> LBRACKET stmtlist RBRACKET
Rule 18    cond -> expr
Rule 19    stmtlist -> empty
Rule 20    stmtlist -> stmtlist NEWLINE
Rule 21    stmtlist -> stmtlist stmt
Rule 22    expr -> data
Rule 23    expr -> unaryop
Rule 24    expr -> binaryop
Rule 25    expr -> LPARENT expr RPARENT
Rule 26    expr -> callfunc
Rule 27    data -> FLOAT
Rule 28    data -> constant
Rule 29    data -> ID
Rule 30    unaryop -> UNARYMINUS expr
Rule 31    unaryop -> INC ID
Rule 32    unaryop -> DEC ID
Rule 33    unaryop -> ID INC
Rule 34    unaryop -> ID DEC
Rule 35    binaryop -> asgn
Rule 36    binaryop -> mathop
Rule 37    binaryop -> logicop
Rule 38    asgn -> ID ASSIGN expr
Rule 39    asgn -> ID ADDEQ expr
Rule 40    asgn -> ID SUBEQ expr
Rule 41    asgn -> ID MULEQ expr
Rule 42    asgn -> ID DIVEQ expr
Rule 43    asgn -> ID MODEQ expr
Rule 44    mathop -> expr EXP expr
Rule 45    mathop -> expr PLUS expr
Rule 46    mathop -> expr MINUS expr
Rule 47    mathop -> expr TIMES expr
Rule 48    mathop -> expr DIVIDE expr
Rule 49    mathop -> expr MOD expr
Rule 50    logicop -> expr LT expr
Rule 51    logicop -> expr GT expr
Rule 52    logicop -> expr LE expr
Rule 53    logicop -> expr GE expr
Rule 54    logicop -> expr EQ expr
Rule 55    logicop -> expr NE expr
Rule 56    logicop -> expr OR expr
Rule 57    logicop -> expr AND expr
Rule 58    logicop -> expr NOT expr
Rule 59    callfunc -> bltin LPARENT expr RPARENT
Rule 60    callfunc -> ID LPARENT expr RPARENT
Rule 61    prlist -> expr
Rule 62    prlist -> STRING
Rule 63    prlist -> prlist COMMA expr
Rule 64    prlist -> prlist COMMA STRING
Rule 65    defn -> FUNC procname LPARENT formals RPARENT
Rule 66    defn -> PROC procname LPARENT formals RPARENT
Rule 67    formals -> ID
Rule 68    formals -> ID COMMA formals
Rule 69    procname -> FUNCTION
Rule 70    procname -> ID
Rule 71    procname -> PROCEDURE
Rule 72    procname -> bltin
Rule 73    arglist -> empty
Rule 74    arglist -> expr
Rule 75    arglist -> arglist COMMA expr
Rule 76    empty -> <empty>
Rule 77    bltin -> SIN
Rule 78    bltin -> COS
Rule 79    bltin -> TAN
Rule 80    bltin -> ASIN
Rule 81    bltin -> ACOS
Rule 82    bltin -> ATAN
Rule 83    bltin -> SINH
Rule 84    bltin -> COSH
Rule 85    bltin -> TANH
Rule 86    bltin -> INT
Rule 87    bltin -> LOG
Rule 88    bltin -> LOG10
Rule 89    bltin -> SQRT
Rule 90    bltin -> ABS
Rule 91    bltin -> ERF
Rule 92    bltin -> ERFC
Rule 93    constant -> PI
Rule 94    constant -> PHI
Rule 95    constant -> GAMMA
Rule 96    constant -> E
Rule 97    constant -> DEG
Rule 98    constant -> PREC

Terminals, with rules where they appear

ABS                  : 90
ACOS                 : 81
ADDEQ                : 39
AND                  : 57
ASIN                 : 80
ASSIGN               : 38
ATAN                 : 82
BEGIN                : 11
COMMA                : 63 64 68 75
COMMENT              : 8
COS                  : 78
COSH                 : 84
DEC                  : 32 34
DEG                  : 97
DIVEQ                : 42
DIVIDE               : 48
E                    : 96
ELSE                 : 16
END                  : 13 14 15 16 16
EQ                   : 54
ERF                  : 91
ERFC                 : 92
EXP                  : 44
FLOAT                : 27
FOR                  : 14
FUNC                 : 65
FUNCTION             : 69
GAMMA                : 95
GE                   : 53
GT                   : 51
ID                   : 29 31 32 33 34 38 39 40 41 42 43 60 67 68 70
IF                   : 15 16
INC                  : 31 33
INT                  : 86
LBRACKET             : 17
LE                   : 52
LOG                  : 87
LOG10                : 88
LPARENT              : 11 13 14 15 16 25 59 60 65 66
LT                   : 50
MINUS                : 46
MOD                  : 49
MODEQ                : 43
MULEQ                : 41
NE                   : 55
NEWLINE              : 3 4 5 6 7 8 20
NOT                  : 58
OR                   : 56
PHI                  : 94
PI                   : 93
PLUS                 : 45
PREC                 : 98
PRINT                : 12
PROC                 : 66
PROCEDURE            : 11 71
RBRACKET             : 17
RETURN               : 9 10
RPARENT              : 11 13 14 15 16 25 59 60 65 66
SEMICOLON            : 14 14
SIN                  : 77
SINH                 : 83
SQRT                 : 89
STRING               : 62 64
SUBEQ                : 40
TAN                  : 79
TANH                 : 85
TIMES                : 47
UNARYMINUS           : 30
WHILE                : 13
error                : 7

Nonterminals, with rules where they appear

arglist              : 11 75
asgn                 : 35
binaryop             : 24
bltin                : 59 72
callfunc             : 26
cond                 : 13 14 14 14 15 16
constant             : 28
data                 : 22
defn                 : 4
empty                : 2 19 73
expr                 : 6 10 18 25 30 38 39 40 41 42 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 60 61 63 74 75
formals              : 65 66 68
list                 : 1 3 4 5 6 7 8
logicop              : 37
mathop               : 36
prlist               : 12 63 64
procname             : 65 66
program              : 0
stmt                 : 5 13 14 15 16 16 21
stmtlist             : 17 20 21
unaryop              : 23

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . list
    (2) list -> . empty
    (3) list -> . list NEWLINE
    (4) list -> . list defn NEWLINE
    (5) list -> . list stmt NEWLINE
    (6) list -> . list expr NEWLINE
    (7) list -> . list error NEWLINE
    (8) list -> . list COMMENT NEWLINE
    (76) empty -> .

    NEWLINE         reduce using rule 76 (empty -> .)
    error           reduce using rule 76 (empty -> .)
    COMMENT         reduce using rule 76 (empty -> .)
    FUNC            reduce using rule 76 (empty -> .)
    PROC            reduce using rule 76 (empty -> .)
    RETURN          reduce using rule 76 (empty -> .)
    PROCEDURE       reduce using rule 76 (empty -> .)
    PRINT           reduce using rule 76 (empty -> .)
    WHILE           reduce using rule 76 (empty -> .)
    FOR             reduce using rule 76 (empty -> .)
    IF              reduce using rule 76 (empty -> .)
    LBRACKET        reduce using rule 76 (empty -> .)
    LPARENT         reduce using rule 76 (empty -> .)
    FLOAT           reduce using rule 76 (empty -> .)
    ID              reduce using rule 76 (empty -> .)
    UNARYMINUS      reduce using rule 76 (empty -> .)
    INC             reduce using rule 76 (empty -> .)
    DEC             reduce using rule 76 (empty -> .)
    PI              reduce using rule 76 (empty -> .)
    PHI             reduce using rule 76 (empty -> .)
    GAMMA           reduce using rule 76 (empty -> .)
    E               reduce using rule 76 (empty -> .)
    DEG             reduce using rule 76 (empty -> .)
    PREC            reduce using rule 76 (empty -> .)
    SIN             reduce using rule 76 (empty -> .)
    COS             reduce using rule 76 (empty -> .)
    TAN             reduce using rule 76 (empty -> .)
    ASIN            reduce using rule 76 (empty -> .)
    ACOS            reduce using rule 76 (empty -> .)
    ATAN            reduce using rule 76 (empty -> .)
    SINH            reduce using rule 76 (empty -> .)
    COSH            reduce using rule 76 (empty -> .)
    TANH            reduce using rule 76 (empty -> .)
    INT             reduce using rule 76 (empty -> .)
    LOG             reduce using rule 76 (empty -> .)
    LOG10           reduce using rule 76 (empty -> .)
    SQRT            reduce using rule 76 (empty -> .)
    ABS             reduce using rule 76 (empty -> .)
    ERF             reduce using rule 76 (empty -> .)
    ERFC            reduce using rule 76 (empty -> .)
    $end            reduce using rule 76 (empty -> .)

    list                           shift and go to state 1
    program                        shift and go to state 2
    empty                          shift and go to state 3

state 1

    (1) program -> list .
    (3) list -> list . NEWLINE
    (4) list -> list . defn NEWLINE
    (5) list -> list . stmt NEWLINE
    (6) list -> list . expr NEWLINE
    (7) list -> list . error NEWLINE
    (8) list -> list . COMMENT NEWLINE
    (65) defn -> . FUNC procname LPARENT formals RPARENT
    (66) defn -> . PROC procname LPARENT formals RPARENT
    (9) stmt -> . RETURN
    (10) stmt -> . RETURN expr
    (11) stmt -> . PROCEDURE BEGIN LPARENT arglist RPARENT
    (12) stmt -> . PRINT prlist
    (13) stmt -> . WHILE LPARENT cond RPARENT stmt END
    (14) stmt -> . FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END
    (15) stmt -> . IF LPARENT cond RPARENT stmt END
    (16) stmt -> . IF LPARENT cond RPARENT stmt END ELSE stmt END
    (17) stmt -> . LBRACKET stmtlist RBRACKET
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    $end            reduce using rule 1 (program -> list .)
    NEWLINE         shift and go to state 6
    error           shift and go to state 42
    COMMENT         shift and go to state 5
    FUNC            shift and go to state 25
    PROC            shift and go to state 29
    RETURN          shift and go to state 13
    PROCEDURE       shift and go to state 10
    PRINT           shift and go to state 14
    WHILE           shift and go to state 32
    FOR             shift and go to state 23
    IF              shift and go to state 52
    LBRACKET        shift and go to state 4
    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    binaryop                       shift and go to state 41
    unaryop                        shift and go to state 37
    expr                           shift and go to state 38
    callfunc                       shift and go to state 39
    stmt                           shift and go to state 24
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    bltin                          shift and go to state 12
    logicop                        shift and go to state 46
    data                           shift and go to state 50
    defn                           shift and go to state 35

state 2

    (0) S' -> program .



state 3

    (2) list -> empty .

    NEWLINE         reduce using rule 2 (list -> empty .)
    error           reduce using rule 2 (list -> empty .)
    COMMENT         reduce using rule 2 (list -> empty .)
    FUNC            reduce using rule 2 (list -> empty .)
    PROC            reduce using rule 2 (list -> empty .)
    RETURN          reduce using rule 2 (list -> empty .)
    PROCEDURE       reduce using rule 2 (list -> empty .)
    PRINT           reduce using rule 2 (list -> empty .)
    WHILE           reduce using rule 2 (list -> empty .)
    FOR             reduce using rule 2 (list -> empty .)
    IF              reduce using rule 2 (list -> empty .)
    LBRACKET        reduce using rule 2 (list -> empty .)
    LPARENT         reduce using rule 2 (list -> empty .)
    FLOAT           reduce using rule 2 (list -> empty .)
    ID              reduce using rule 2 (list -> empty .)
    UNARYMINUS      reduce using rule 2 (list -> empty .)
    INC             reduce using rule 2 (list -> empty .)
    DEC             reduce using rule 2 (list -> empty .)
    PI              reduce using rule 2 (list -> empty .)
    PHI             reduce using rule 2 (list -> empty .)
    GAMMA           reduce using rule 2 (list -> empty .)
    E               reduce using rule 2 (list -> empty .)
    DEG             reduce using rule 2 (list -> empty .)
    PREC            reduce using rule 2 (list -> empty .)
    SIN             reduce using rule 2 (list -> empty .)
    COS             reduce using rule 2 (list -> empty .)
    TAN             reduce using rule 2 (list -> empty .)
    ASIN            reduce using rule 2 (list -> empty .)
    ACOS            reduce using rule 2 (list -> empty .)
    ATAN            reduce using rule 2 (list -> empty .)
    SINH            reduce using rule 2 (list -> empty .)
    COSH            reduce using rule 2 (list -> empty .)
    TANH            reduce using rule 2 (list -> empty .)
    INT             reduce using rule 2 (list -> empty .)
    LOG             reduce using rule 2 (list -> empty .)
    LOG10           reduce using rule 2 (list -> empty .)
    SQRT            reduce using rule 2 (list -> empty .)
    ABS             reduce using rule 2 (list -> empty .)
    ERF             reduce using rule 2 (list -> empty .)
    ERFC            reduce using rule 2 (list -> empty .)
    $end            reduce using rule 2 (list -> empty .)


state 4

    (17) stmt -> LBRACKET . stmtlist RBRACKET
    (19) stmtlist -> . empty
    (20) stmtlist -> . stmtlist NEWLINE
    (21) stmtlist -> . stmtlist stmt
    (76) empty -> .

    RBRACKET        reduce using rule 76 (empty -> .)
    NEWLINE         reduce using rule 76 (empty -> .)
    RETURN          reduce using rule 76 (empty -> .)
    PROCEDURE       reduce using rule 76 (empty -> .)
    PRINT           reduce using rule 76 (empty -> .)
    WHILE           reduce using rule 76 (empty -> .)
    FOR             reduce using rule 76 (empty -> .)
    IF              reduce using rule 76 (empty -> .)
    LBRACKET        reduce using rule 76 (empty -> .)

    empty                          shift and go to state 57
    stmtlist                       shift and go to state 56

state 5

    (8) list -> list COMMENT . NEWLINE

    NEWLINE         shift and go to state 58


state 6

    (3) list -> list NEWLINE .

    NEWLINE         reduce using rule 3 (list -> list NEWLINE .)
    error           reduce using rule 3 (list -> list NEWLINE .)
    COMMENT         reduce using rule 3 (list -> list NEWLINE .)
    FUNC            reduce using rule 3 (list -> list NEWLINE .)
    PROC            reduce using rule 3 (list -> list NEWLINE .)
    RETURN          reduce using rule 3 (list -> list NEWLINE .)
    PROCEDURE       reduce using rule 3 (list -> list NEWLINE .)
    PRINT           reduce using rule 3 (list -> list NEWLINE .)
    WHILE           reduce using rule 3 (list -> list NEWLINE .)
    FOR             reduce using rule 3 (list -> list NEWLINE .)
    IF              reduce using rule 3 (list -> list NEWLINE .)
    LBRACKET        reduce using rule 3 (list -> list NEWLINE .)
    LPARENT         reduce using rule 3 (list -> list NEWLINE .)
    FLOAT           reduce using rule 3 (list -> list NEWLINE .)
    ID              reduce using rule 3 (list -> list NEWLINE .)
    UNARYMINUS      reduce using rule 3 (list -> list NEWLINE .)
    INC             reduce using rule 3 (list -> list NEWLINE .)
    DEC             reduce using rule 3 (list -> list NEWLINE .)
    PI              reduce using rule 3 (list -> list NEWLINE .)
    PHI             reduce using rule 3 (list -> list NEWLINE .)
    GAMMA           reduce using rule 3 (list -> list NEWLINE .)
    E               reduce using rule 3 (list -> list NEWLINE .)
    DEG             reduce using rule 3 (list -> list NEWLINE .)
    PREC            reduce using rule 3 (list -> list NEWLINE .)
    SIN             reduce using rule 3 (list -> list NEWLINE .)
    COS             reduce using rule 3 (list -> list NEWLINE .)
    TAN             reduce using rule 3 (list -> list NEWLINE .)
    ASIN            reduce using rule 3 (list -> list NEWLINE .)
    ACOS            reduce using rule 3 (list -> list NEWLINE .)
    ATAN            reduce using rule 3 (list -> list NEWLINE .)
    SINH            reduce using rule 3 (list -> list NEWLINE .)
    COSH            reduce using rule 3 (list -> list NEWLINE .)
    TANH            reduce using rule 3 (list -> list NEWLINE .)
    INT             reduce using rule 3 (list -> list NEWLINE .)
    LOG             reduce using rule 3 (list -> list NEWLINE .)
    LOG10           reduce using rule 3 (list -> list NEWLINE .)
    SQRT            reduce using rule 3 (list -> list NEWLINE .)
    ABS             reduce using rule 3 (list -> list NEWLINE .)
    ERF             reduce using rule 3 (list -> list NEWLINE .)
    ERFC            reduce using rule 3 (list -> list NEWLINE .)
    $end            reduce using rule 3 (list -> list NEWLINE .)


state 7

    (35) binaryop -> asgn .

    EXP             reduce using rule 35 (binaryop -> asgn .)
    PLUS            reduce using rule 35 (binaryop -> asgn .)
    MINUS           reduce using rule 35 (binaryop -> asgn .)
    TIMES           reduce using rule 35 (binaryop -> asgn .)
    DIVIDE          reduce using rule 35 (binaryop -> asgn .)
    MOD             reduce using rule 35 (binaryop -> asgn .)
    LT              reduce using rule 35 (binaryop -> asgn .)
    GT              reduce using rule 35 (binaryop -> asgn .)
    LE              reduce using rule 35 (binaryop -> asgn .)
    GE              reduce using rule 35 (binaryop -> asgn .)
    EQ              reduce using rule 35 (binaryop -> asgn .)
    NE              reduce using rule 35 (binaryop -> asgn .)
    OR              reduce using rule 35 (binaryop -> asgn .)
    AND             reduce using rule 35 (binaryop -> asgn .)
    NOT             reduce using rule 35 (binaryop -> asgn .)
    NEWLINE         reduce using rule 35 (binaryop -> asgn .)
    RBRACKET        reduce using rule 35 (binaryop -> asgn .)
    RETURN          reduce using rule 35 (binaryop -> asgn .)
    PROCEDURE       reduce using rule 35 (binaryop -> asgn .)
    PRINT           reduce using rule 35 (binaryop -> asgn .)
    WHILE           reduce using rule 35 (binaryop -> asgn .)
    FOR             reduce using rule 35 (binaryop -> asgn .)
    IF              reduce using rule 35 (binaryop -> asgn .)
    LBRACKET        reduce using rule 35 (binaryop -> asgn .)
    END             reduce using rule 35 (binaryop -> asgn .)
    COMMA           reduce using rule 35 (binaryop -> asgn .)
    RPARENT         reduce using rule 35 (binaryop -> asgn .)
    SEMICOLON       reduce using rule 35 (binaryop -> asgn .)


state 8

    (79) bltin -> TAN .

    LPARENT         reduce using rule 79 (bltin -> TAN .)


state 9

    (82) bltin -> ATAN .

    LPARENT         reduce using rule 82 (bltin -> ATAN .)


state 10

    (11) stmt -> PROCEDURE . BEGIN LPARENT arglist RPARENT

    BEGIN           shift and go to state 59


state 11

    (94) constant -> PHI .

    EXP             reduce using rule 94 (constant -> PHI .)
    PLUS            reduce using rule 94 (constant -> PHI .)
    MINUS           reduce using rule 94 (constant -> PHI .)
    TIMES           reduce using rule 94 (constant -> PHI .)
    DIVIDE          reduce using rule 94 (constant -> PHI .)
    MOD             reduce using rule 94 (constant -> PHI .)
    LT              reduce using rule 94 (constant -> PHI .)
    GT              reduce using rule 94 (constant -> PHI .)
    LE              reduce using rule 94 (constant -> PHI .)
    GE              reduce using rule 94 (constant -> PHI .)
    EQ              reduce using rule 94 (constant -> PHI .)
    NE              reduce using rule 94 (constant -> PHI .)
    OR              reduce using rule 94 (constant -> PHI .)
    AND             reduce using rule 94 (constant -> PHI .)
    NOT             reduce using rule 94 (constant -> PHI .)
    RPARENT         reduce using rule 94 (constant -> PHI .)
    NEWLINE         reduce using rule 94 (constant -> PHI .)
    RBRACKET        reduce using rule 94 (constant -> PHI .)
    RETURN          reduce using rule 94 (constant -> PHI .)
    PROCEDURE       reduce using rule 94 (constant -> PHI .)
    PRINT           reduce using rule 94 (constant -> PHI .)
    WHILE           reduce using rule 94 (constant -> PHI .)
    FOR             reduce using rule 94 (constant -> PHI .)
    IF              reduce using rule 94 (constant -> PHI .)
    LBRACKET        reduce using rule 94 (constant -> PHI .)
    END             reduce using rule 94 (constant -> PHI .)
    COMMA           reduce using rule 94 (constant -> PHI .)
    SEMICOLON       reduce using rule 94 (constant -> PHI .)


state 12

    (59) callfunc -> bltin . LPARENT expr RPARENT

    LPARENT         shift and go to state 60


state 13

    (9) stmt -> RETURN .
    (10) stmt -> RETURN . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    END             reduce using rule 9 (stmt -> RETURN .)
    NEWLINE         reduce using rule 9 (stmt -> RETURN .)
    RBRACKET        reduce using rule 9 (stmt -> RETURN .)
    RETURN          reduce using rule 9 (stmt -> RETURN .)
    PROCEDURE       reduce using rule 9 (stmt -> RETURN .)
    PRINT           reduce using rule 9 (stmt -> RETURN .)
    WHILE           reduce using rule 9 (stmt -> RETURN .)
    FOR             reduce using rule 9 (stmt -> RETURN .)
    IF              reduce using rule 9 (stmt -> RETURN .)
    LBRACKET        reduce using rule 9 (stmt -> RETURN .)
    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 61
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 14

    (12) stmt -> PRINT . prlist
    (61) prlist -> . expr
    (62) prlist -> . STRING
    (63) prlist -> . prlist COMMA expr
    (64) prlist -> . prlist COMMA STRING
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    STRING          shift and go to state 62
    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 63
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    prlist                         shift and go to state 64
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 15

    (95) constant -> GAMMA .

    EXP             reduce using rule 95 (constant -> GAMMA .)
    PLUS            reduce using rule 95 (constant -> GAMMA .)
    MINUS           reduce using rule 95 (constant -> GAMMA .)
    TIMES           reduce using rule 95 (constant -> GAMMA .)
    DIVIDE          reduce using rule 95 (constant -> GAMMA .)
    MOD             reduce using rule 95 (constant -> GAMMA .)
    LT              reduce using rule 95 (constant -> GAMMA .)
    GT              reduce using rule 95 (constant -> GAMMA .)
    LE              reduce using rule 95 (constant -> GAMMA .)
    GE              reduce using rule 95 (constant -> GAMMA .)
    EQ              reduce using rule 95 (constant -> GAMMA .)
    NE              reduce using rule 95 (constant -> GAMMA .)
    OR              reduce using rule 95 (constant -> GAMMA .)
    AND             reduce using rule 95 (constant -> GAMMA .)
    NOT             reduce using rule 95 (constant -> GAMMA .)
    RPARENT         reduce using rule 95 (constant -> GAMMA .)
    NEWLINE         reduce using rule 95 (constant -> GAMMA .)
    RBRACKET        reduce using rule 95 (constant -> GAMMA .)
    RETURN          reduce using rule 95 (constant -> GAMMA .)
    PROCEDURE       reduce using rule 95 (constant -> GAMMA .)
    PRINT           reduce using rule 95 (constant -> GAMMA .)
    WHILE           reduce using rule 95 (constant -> GAMMA .)
    FOR             reduce using rule 95 (constant -> GAMMA .)
    IF              reduce using rule 95 (constant -> GAMMA .)
    LBRACKET        reduce using rule 95 (constant -> GAMMA .)
    END             reduce using rule 95 (constant -> GAMMA .)
    COMMA           reduce using rule 95 (constant -> GAMMA .)
    SEMICOLON       reduce using rule 95 (constant -> GAMMA .)


state 16

    (97) constant -> DEG .

    EXP             reduce using rule 97 (constant -> DEG .)
    PLUS            reduce using rule 97 (constant -> DEG .)
    MINUS           reduce using rule 97 (constant -> DEG .)
    TIMES           reduce using rule 97 (constant -> DEG .)
    DIVIDE          reduce using rule 97 (constant -> DEG .)
    MOD             reduce using rule 97 (constant -> DEG .)
    LT              reduce using rule 97 (constant -> DEG .)
    GT              reduce using rule 97 (constant -> DEG .)
    LE              reduce using rule 97 (constant -> DEG .)
    GE              reduce using rule 97 (constant -> DEG .)
    EQ              reduce using rule 97 (constant -> DEG .)
    NE              reduce using rule 97 (constant -> DEG .)
    OR              reduce using rule 97 (constant -> DEG .)
    AND             reduce using rule 97 (constant -> DEG .)
    NOT             reduce using rule 97 (constant -> DEG .)
    RPARENT         reduce using rule 97 (constant -> DEG .)
    NEWLINE         reduce using rule 97 (constant -> DEG .)
    RBRACKET        reduce using rule 97 (constant -> DEG .)
    RETURN          reduce using rule 97 (constant -> DEG .)
    PROCEDURE       reduce using rule 97 (constant -> DEG .)
    PRINT           reduce using rule 97 (constant -> DEG .)
    WHILE           reduce using rule 97 (constant -> DEG .)
    FOR             reduce using rule 97 (constant -> DEG .)
    IF              reduce using rule 97 (constant -> DEG .)
    LBRACKET        reduce using rule 97 (constant -> DEG .)
    END             reduce using rule 97 (constant -> DEG .)
    COMMA           reduce using rule 97 (constant -> DEG .)
    SEMICOLON       reduce using rule 97 (constant -> DEG .)


state 17

    (85) bltin -> TANH .

    LPARENT         reduce using rule 85 (bltin -> TANH .)


state 18

    (77) bltin -> SIN .

    LPARENT         reduce using rule 77 (bltin -> SIN .)


state 19

    (92) bltin -> ERFC .

    LPARENT         reduce using rule 92 (bltin -> ERFC .)


state 20

    (81) bltin -> ACOS .

    LPARENT         reduce using rule 81 (bltin -> ACOS .)


state 21

    (93) constant -> PI .

    EXP             reduce using rule 93 (constant -> PI .)
    PLUS            reduce using rule 93 (constant -> PI .)
    MINUS           reduce using rule 93 (constant -> PI .)
    TIMES           reduce using rule 93 (constant -> PI .)
    DIVIDE          reduce using rule 93 (constant -> PI .)
    MOD             reduce using rule 93 (constant -> PI .)
    LT              reduce using rule 93 (constant -> PI .)
    GT              reduce using rule 93 (constant -> PI .)
    LE              reduce using rule 93 (constant -> PI .)
    GE              reduce using rule 93 (constant -> PI .)
    EQ              reduce using rule 93 (constant -> PI .)
    NE              reduce using rule 93 (constant -> PI .)
    OR              reduce using rule 93 (constant -> PI .)
    AND             reduce using rule 93 (constant -> PI .)
    NOT             reduce using rule 93 (constant -> PI .)
    RPARENT         reduce using rule 93 (constant -> PI .)
    NEWLINE         reduce using rule 93 (constant -> PI .)
    RBRACKET        reduce using rule 93 (constant -> PI .)
    RETURN          reduce using rule 93 (constant -> PI .)
    PROCEDURE       reduce using rule 93 (constant -> PI .)
    PRINT           reduce using rule 93 (constant -> PI .)
    WHILE           reduce using rule 93 (constant -> PI .)
    FOR             reduce using rule 93 (constant -> PI .)
    IF              reduce using rule 93 (constant -> PI .)
    LBRACKET        reduce using rule 93 (constant -> PI .)
    END             reduce using rule 93 (constant -> PI .)
    COMMA           reduce using rule 93 (constant -> PI .)
    SEMICOLON       reduce using rule 93 (constant -> PI .)


state 22

    (30) unaryop -> UNARYMINUS . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 65
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 23

    (14) stmt -> FOR . LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END

    LPARENT         shift and go to state 66


state 24

    (5) list -> list stmt . NEWLINE

    NEWLINE         shift and go to state 67


state 25

    (65) defn -> FUNC . procname LPARENT formals RPARENT
    (69) procname -> . FUNCTION
    (70) procname -> . ID
    (71) procname -> . PROCEDURE
    (72) procname -> . bltin
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    FUNCTION        shift and go to state 69
    ID              shift and go to state 68
    PROCEDURE       shift and go to state 70
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    procname                       shift and go to state 72
    bltin                          shift and go to state 71

state 26

    (32) unaryop -> DEC . ID

    ID              shift and go to state 73


state 27

    (86) bltin -> INT .

    LPARENT         reduce using rule 86 (bltin -> INT .)


state 28

    (36) binaryop -> mathop .

    EXP             reduce using rule 36 (binaryop -> mathop .)
    PLUS            reduce using rule 36 (binaryop -> mathop .)
    MINUS           reduce using rule 36 (binaryop -> mathop .)
    TIMES           reduce using rule 36 (binaryop -> mathop .)
    DIVIDE          reduce using rule 36 (binaryop -> mathop .)
    MOD             reduce using rule 36 (binaryop -> mathop .)
    LT              reduce using rule 36 (binaryop -> mathop .)
    GT              reduce using rule 36 (binaryop -> mathop .)
    LE              reduce using rule 36 (binaryop -> mathop .)
    GE              reduce using rule 36 (binaryop -> mathop .)
    EQ              reduce using rule 36 (binaryop -> mathop .)
    NE              reduce using rule 36 (binaryop -> mathop .)
    OR              reduce using rule 36 (binaryop -> mathop .)
    AND             reduce using rule 36 (binaryop -> mathop .)
    NOT             reduce using rule 36 (binaryop -> mathop .)
    NEWLINE         reduce using rule 36 (binaryop -> mathop .)
    RBRACKET        reduce using rule 36 (binaryop -> mathop .)
    RETURN          reduce using rule 36 (binaryop -> mathop .)
    PROCEDURE       reduce using rule 36 (binaryop -> mathop .)
    PRINT           reduce using rule 36 (binaryop -> mathop .)
    WHILE           reduce using rule 36 (binaryop -> mathop .)
    FOR             reduce using rule 36 (binaryop -> mathop .)
    IF              reduce using rule 36 (binaryop -> mathop .)
    LBRACKET        reduce using rule 36 (binaryop -> mathop .)
    END             reduce using rule 36 (binaryop -> mathop .)
    COMMA           reduce using rule 36 (binaryop -> mathop .)
    RPARENT         reduce using rule 36 (binaryop -> mathop .)
    SEMICOLON       reduce using rule 36 (binaryop -> mathop .)


state 29

    (66) defn -> PROC . procname LPARENT formals RPARENT
    (69) procname -> . FUNCTION
    (70) procname -> . ID
    (71) procname -> . PROCEDURE
    (72) procname -> . bltin
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    FUNCTION        shift and go to state 69
    ID              shift and go to state 68
    PROCEDURE       shift and go to state 70
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    procname                       shift and go to state 74
    bltin                          shift and go to state 71

state 30

    (78) bltin -> COS .

    LPARENT         reduce using rule 78 (bltin -> COS .)


state 31

    (84) bltin -> COSH .

    LPARENT         reduce using rule 84 (bltin -> COSH .)


state 32

    (13) stmt -> WHILE . LPARENT cond RPARENT stmt END

    LPARENT         shift and go to state 75


state 33

    (88) bltin -> LOG10 .

    LPARENT         reduce using rule 88 (bltin -> LOG10 .)


state 34

    (25) expr -> LPARENT . expr RPARENT
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 76
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 35

    (4) list -> list defn . NEWLINE

    NEWLINE         shift and go to state 77


state 36

    (83) bltin -> SINH .

    LPARENT         reduce using rule 83 (bltin -> SINH .)


state 37

    (23) expr -> unaryop .

    EXP             reduce using rule 23 (expr -> unaryop .)
    PLUS            reduce using rule 23 (expr -> unaryop .)
    MINUS           reduce using rule 23 (expr -> unaryop .)
    TIMES           reduce using rule 23 (expr -> unaryop .)
    DIVIDE          reduce using rule 23 (expr -> unaryop .)
    MOD             reduce using rule 23 (expr -> unaryop .)
    LT              reduce using rule 23 (expr -> unaryop .)
    GT              reduce using rule 23 (expr -> unaryop .)
    LE              reduce using rule 23 (expr -> unaryop .)
    GE              reduce using rule 23 (expr -> unaryop .)
    EQ              reduce using rule 23 (expr -> unaryop .)
    NE              reduce using rule 23 (expr -> unaryop .)
    OR              reduce using rule 23 (expr -> unaryop .)
    AND             reduce using rule 23 (expr -> unaryop .)
    NOT             reduce using rule 23 (expr -> unaryop .)
    COMMA           reduce using rule 23 (expr -> unaryop .)
    NEWLINE         reduce using rule 23 (expr -> unaryop .)
    RBRACKET        reduce using rule 23 (expr -> unaryop .)
    RETURN          reduce using rule 23 (expr -> unaryop .)
    PROCEDURE       reduce using rule 23 (expr -> unaryop .)
    PRINT           reduce using rule 23 (expr -> unaryop .)
    WHILE           reduce using rule 23 (expr -> unaryop .)
    FOR             reduce using rule 23 (expr -> unaryop .)
    IF              reduce using rule 23 (expr -> unaryop .)
    LBRACKET        reduce using rule 23 (expr -> unaryop .)
    END             reduce using rule 23 (expr -> unaryop .)
    RPARENT         reduce using rule 23 (expr -> unaryop .)
    SEMICOLON       reduce using rule 23 (expr -> unaryop .)


state 38

    (6) list -> list expr . NEWLINE
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    NEWLINE         shift and go to state 82
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89


state 39

    (26) expr -> callfunc .

    EXP             reduce using rule 26 (expr -> callfunc .)
    PLUS            reduce using rule 26 (expr -> callfunc .)
    MINUS           reduce using rule 26 (expr -> callfunc .)
    TIMES           reduce using rule 26 (expr -> callfunc .)
    DIVIDE          reduce using rule 26 (expr -> callfunc .)
    MOD             reduce using rule 26 (expr -> callfunc .)
    LT              reduce using rule 26 (expr -> callfunc .)
    GT              reduce using rule 26 (expr -> callfunc .)
    LE              reduce using rule 26 (expr -> callfunc .)
    GE              reduce using rule 26 (expr -> callfunc .)
    EQ              reduce using rule 26 (expr -> callfunc .)
    NE              reduce using rule 26 (expr -> callfunc .)
    OR              reduce using rule 26 (expr -> callfunc .)
    AND             reduce using rule 26 (expr -> callfunc .)
    NOT             reduce using rule 26 (expr -> callfunc .)
    COMMA           reduce using rule 26 (expr -> callfunc .)
    NEWLINE         reduce using rule 26 (expr -> callfunc .)
    RBRACKET        reduce using rule 26 (expr -> callfunc .)
    RETURN          reduce using rule 26 (expr -> callfunc .)
    PROCEDURE       reduce using rule 26 (expr -> callfunc .)
    PRINT           reduce using rule 26 (expr -> callfunc .)
    WHILE           reduce using rule 26 (expr -> callfunc .)
    FOR             reduce using rule 26 (expr -> callfunc .)
    IF              reduce using rule 26 (expr -> callfunc .)
    LBRACKET        reduce using rule 26 (expr -> callfunc .)
    END             reduce using rule 26 (expr -> callfunc .)
    RPARENT         reduce using rule 26 (expr -> callfunc .)
    SEMICOLON       reduce using rule 26 (expr -> callfunc .)


state 40

    (98) constant -> PREC .

    EXP             reduce using rule 98 (constant -> PREC .)
    PLUS            reduce using rule 98 (constant -> PREC .)
    MINUS           reduce using rule 98 (constant -> PREC .)
    TIMES           reduce using rule 98 (constant -> PREC .)
    DIVIDE          reduce using rule 98 (constant -> PREC .)
    MOD             reduce using rule 98 (constant -> PREC .)
    LT              reduce using rule 98 (constant -> PREC .)
    GT              reduce using rule 98 (constant -> PREC .)
    LE              reduce using rule 98 (constant -> PREC .)
    GE              reduce using rule 98 (constant -> PREC .)
    EQ              reduce using rule 98 (constant -> PREC .)
    NE              reduce using rule 98 (constant -> PREC .)
    OR              reduce using rule 98 (constant -> PREC .)
    AND             reduce using rule 98 (constant -> PREC .)
    NOT             reduce using rule 98 (constant -> PREC .)
    RPARENT         reduce using rule 98 (constant -> PREC .)
    NEWLINE         reduce using rule 98 (constant -> PREC .)
    RBRACKET        reduce using rule 98 (constant -> PREC .)
    RETURN          reduce using rule 98 (constant -> PREC .)
    PROCEDURE       reduce using rule 98 (constant -> PREC .)
    PRINT           reduce using rule 98 (constant -> PREC .)
    WHILE           reduce using rule 98 (constant -> PREC .)
    FOR             reduce using rule 98 (constant -> PREC .)
    IF              reduce using rule 98 (constant -> PREC .)
    LBRACKET        reduce using rule 98 (constant -> PREC .)
    END             reduce using rule 98 (constant -> PREC .)
    COMMA           reduce using rule 98 (constant -> PREC .)
    SEMICOLON       reduce using rule 98 (constant -> PREC .)


state 41

    (24) expr -> binaryop .

    EXP             reduce using rule 24 (expr -> binaryop .)
    PLUS            reduce using rule 24 (expr -> binaryop .)
    MINUS           reduce using rule 24 (expr -> binaryop .)
    TIMES           reduce using rule 24 (expr -> binaryop .)
    DIVIDE          reduce using rule 24 (expr -> binaryop .)
    MOD             reduce using rule 24 (expr -> binaryop .)
    LT              reduce using rule 24 (expr -> binaryop .)
    GT              reduce using rule 24 (expr -> binaryop .)
    LE              reduce using rule 24 (expr -> binaryop .)
    GE              reduce using rule 24 (expr -> binaryop .)
    EQ              reduce using rule 24 (expr -> binaryop .)
    NE              reduce using rule 24 (expr -> binaryop .)
    OR              reduce using rule 24 (expr -> binaryop .)
    AND             reduce using rule 24 (expr -> binaryop .)
    NOT             reduce using rule 24 (expr -> binaryop .)
    COMMA           reduce using rule 24 (expr -> binaryop .)
    NEWLINE         reduce using rule 24 (expr -> binaryop .)
    RBRACKET        reduce using rule 24 (expr -> binaryop .)
    RETURN          reduce using rule 24 (expr -> binaryop .)
    PROCEDURE       reduce using rule 24 (expr -> binaryop .)
    PRINT           reduce using rule 24 (expr -> binaryop .)
    WHILE           reduce using rule 24 (expr -> binaryop .)
    FOR             reduce using rule 24 (expr -> binaryop .)
    IF              reduce using rule 24 (expr -> binaryop .)
    LBRACKET        reduce using rule 24 (expr -> binaryop .)
    END             reduce using rule 24 (expr -> binaryop .)
    RPARENT         reduce using rule 24 (expr -> binaryop .)
    SEMICOLON       reduce using rule 24 (expr -> binaryop .)


state 42

    (7) list -> list error . NEWLINE

    NEWLINE         shift and go to state 94


state 43

    (28) data -> constant .

    EXP             reduce using rule 28 (data -> constant .)
    PLUS            reduce using rule 28 (data -> constant .)
    MINUS           reduce using rule 28 (data -> constant .)
    TIMES           reduce using rule 28 (data -> constant .)
    DIVIDE          reduce using rule 28 (data -> constant .)
    MOD             reduce using rule 28 (data -> constant .)
    LT              reduce using rule 28 (data -> constant .)
    GT              reduce using rule 28 (data -> constant .)
    LE              reduce using rule 28 (data -> constant .)
    GE              reduce using rule 28 (data -> constant .)
    EQ              reduce using rule 28 (data -> constant .)
    NE              reduce using rule 28 (data -> constant .)
    OR              reduce using rule 28 (data -> constant .)
    AND             reduce using rule 28 (data -> constant .)
    NOT             reduce using rule 28 (data -> constant .)
    RPARENT         reduce using rule 28 (data -> constant .)
    NEWLINE         reduce using rule 28 (data -> constant .)
    RBRACKET        reduce using rule 28 (data -> constant .)
    RETURN          reduce using rule 28 (data -> constant .)
    PROCEDURE       reduce using rule 28 (data -> constant .)
    PRINT           reduce using rule 28 (data -> constant .)
    WHILE           reduce using rule 28 (data -> constant .)
    FOR             reduce using rule 28 (data -> constant .)
    IF              reduce using rule 28 (data -> constant .)
    LBRACKET        reduce using rule 28 (data -> constant .)
    END             reduce using rule 28 (data -> constant .)
    COMMA           reduce using rule 28 (data -> constant .)
    SEMICOLON       reduce using rule 28 (data -> constant .)


state 44

    (87) bltin -> LOG .

    LPARENT         reduce using rule 87 (bltin -> LOG .)


state 45

    (91) bltin -> ERF .

    LPARENT         reduce using rule 91 (bltin -> ERF .)


state 46

    (37) binaryop -> logicop .

    EXP             reduce using rule 37 (binaryop -> logicop .)
    PLUS            reduce using rule 37 (binaryop -> logicop .)
    MINUS           reduce using rule 37 (binaryop -> logicop .)
    TIMES           reduce using rule 37 (binaryop -> logicop .)
    DIVIDE          reduce using rule 37 (binaryop -> logicop .)
    MOD             reduce using rule 37 (binaryop -> logicop .)
    LT              reduce using rule 37 (binaryop -> logicop .)
    GT              reduce using rule 37 (binaryop -> logicop .)
    LE              reduce using rule 37 (binaryop -> logicop .)
    GE              reduce using rule 37 (binaryop -> logicop .)
    EQ              reduce using rule 37 (binaryop -> logicop .)
    NE              reduce using rule 37 (binaryop -> logicop .)
    OR              reduce using rule 37 (binaryop -> logicop .)
    AND             reduce using rule 37 (binaryop -> logicop .)
    NOT             reduce using rule 37 (binaryop -> logicop .)
    NEWLINE         reduce using rule 37 (binaryop -> logicop .)
    RBRACKET        reduce using rule 37 (binaryop -> logicop .)
    RETURN          reduce using rule 37 (binaryop -> logicop .)
    PROCEDURE       reduce using rule 37 (binaryop -> logicop .)
    PRINT           reduce using rule 37 (binaryop -> logicop .)
    WHILE           reduce using rule 37 (binaryop -> logicop .)
    FOR             reduce using rule 37 (binaryop -> logicop .)
    IF              reduce using rule 37 (binaryop -> logicop .)
    LBRACKET        reduce using rule 37 (binaryop -> logicop .)
    END             reduce using rule 37 (binaryop -> logicop .)
    COMMA           reduce using rule 37 (binaryop -> logicop .)
    RPARENT         reduce using rule 37 (binaryop -> logicop .)
    SEMICOLON       reduce using rule 37 (binaryop -> logicop .)


state 47

    (80) bltin -> ASIN .

    LPARENT         reduce using rule 80 (bltin -> ASIN .)


state 48

    (96) constant -> E .

    EXP             reduce using rule 96 (constant -> E .)
    PLUS            reduce using rule 96 (constant -> E .)
    MINUS           reduce using rule 96 (constant -> E .)
    TIMES           reduce using rule 96 (constant -> E .)
    DIVIDE          reduce using rule 96 (constant -> E .)
    MOD             reduce using rule 96 (constant -> E .)
    LT              reduce using rule 96 (constant -> E .)
    GT              reduce using rule 96 (constant -> E .)
    LE              reduce using rule 96 (constant -> E .)
    GE              reduce using rule 96 (constant -> E .)
    EQ              reduce using rule 96 (constant -> E .)
    NE              reduce using rule 96 (constant -> E .)
    OR              reduce using rule 96 (constant -> E .)
    AND             reduce using rule 96 (constant -> E .)
    NOT             reduce using rule 96 (constant -> E .)
    RPARENT         reduce using rule 96 (constant -> E .)
    NEWLINE         reduce using rule 96 (constant -> E .)
    RBRACKET        reduce using rule 96 (constant -> E .)
    RETURN          reduce using rule 96 (constant -> E .)
    PROCEDURE       reduce using rule 96 (constant -> E .)
    PRINT           reduce using rule 96 (constant -> E .)
    WHILE           reduce using rule 96 (constant -> E .)
    FOR             reduce using rule 96 (constant -> E .)
    IF              reduce using rule 96 (constant -> E .)
    LBRACKET        reduce using rule 96 (constant -> E .)
    END             reduce using rule 96 (constant -> E .)
    COMMA           reduce using rule 96 (constant -> E .)
    SEMICOLON       reduce using rule 96 (constant -> E .)


state 49

    (90) bltin -> ABS .

    LPARENT         reduce using rule 90 (bltin -> ABS .)


state 50

    (22) expr -> data .

    EXP             reduce using rule 22 (expr -> data .)
    PLUS            reduce using rule 22 (expr -> data .)
    MINUS           reduce using rule 22 (expr -> data .)
    TIMES           reduce using rule 22 (expr -> data .)
    DIVIDE          reduce using rule 22 (expr -> data .)
    MOD             reduce using rule 22 (expr -> data .)
    LT              reduce using rule 22 (expr -> data .)
    GT              reduce using rule 22 (expr -> data .)
    LE              reduce using rule 22 (expr -> data .)
    GE              reduce using rule 22 (expr -> data .)
    EQ              reduce using rule 22 (expr -> data .)
    NE              reduce using rule 22 (expr -> data .)
    OR              reduce using rule 22 (expr -> data .)
    AND             reduce using rule 22 (expr -> data .)
    NOT             reduce using rule 22 (expr -> data .)
    COMMA           reduce using rule 22 (expr -> data .)
    NEWLINE         reduce using rule 22 (expr -> data .)
    RBRACKET        reduce using rule 22 (expr -> data .)
    RETURN          reduce using rule 22 (expr -> data .)
    PROCEDURE       reduce using rule 22 (expr -> data .)
    PRINT           reduce using rule 22 (expr -> data .)
    WHILE           reduce using rule 22 (expr -> data .)
    FOR             reduce using rule 22 (expr -> data .)
    IF              reduce using rule 22 (expr -> data .)
    LBRACKET        reduce using rule 22 (expr -> data .)
    END             reduce using rule 22 (expr -> data .)
    RPARENT         reduce using rule 22 (expr -> data .)
    SEMICOLON       reduce using rule 22 (expr -> data .)


state 51

    (29) data -> ID .
    (33) unaryop -> ID . INC
    (34) unaryop -> ID . DEC
    (60) callfunc -> ID . LPARENT expr RPARENT
    (38) asgn -> ID . ASSIGN expr
    (39) asgn -> ID . ADDEQ expr
    (40) asgn -> ID . SUBEQ expr
    (41) asgn -> ID . MULEQ expr
    (42) asgn -> ID . DIVEQ expr
    (43) asgn -> ID . MODEQ expr

    EXP             reduce using rule 29 (data -> ID .)
    PLUS            reduce using rule 29 (data -> ID .)
    MINUS           reduce using rule 29 (data -> ID .)
    TIMES           reduce using rule 29 (data -> ID .)
    DIVIDE          reduce using rule 29 (data -> ID .)
    MOD             reduce using rule 29 (data -> ID .)
    LT              reduce using rule 29 (data -> ID .)
    GT              reduce using rule 29 (data -> ID .)
    LE              reduce using rule 29 (data -> ID .)
    GE              reduce using rule 29 (data -> ID .)
    EQ              reduce using rule 29 (data -> ID .)
    NE              reduce using rule 29 (data -> ID .)
    OR              reduce using rule 29 (data -> ID .)
    AND             reduce using rule 29 (data -> ID .)
    NOT             reduce using rule 29 (data -> ID .)
    RPARENT         reduce using rule 29 (data -> ID .)
    NEWLINE         reduce using rule 29 (data -> ID .)
    RBRACKET        reduce using rule 29 (data -> ID .)
    RETURN          reduce using rule 29 (data -> ID .)
    PROCEDURE       reduce using rule 29 (data -> ID .)
    PRINT           reduce using rule 29 (data -> ID .)
    WHILE           reduce using rule 29 (data -> ID .)
    FOR             reduce using rule 29 (data -> ID .)
    IF              reduce using rule 29 (data -> ID .)
    LBRACKET        reduce using rule 29 (data -> ID .)
    END             reduce using rule 29 (data -> ID .)
    COMMA           reduce using rule 29 (data -> ID .)
    SEMICOLON       reduce using rule 29 (data -> ID .)
    INC             shift and go to state 103
    DEC             shift and go to state 101
    LPARENT         shift and go to state 95
    ASSIGN          shift and go to state 97
    ADDEQ           shift and go to state 99
    SUBEQ           shift and go to state 98
    MULEQ           shift and go to state 100
    DIVEQ           shift and go to state 102
    MODEQ           shift and go to state 96


state 52

    (15) stmt -> IF . LPARENT cond RPARENT stmt END
    (16) stmt -> IF . LPARENT cond RPARENT stmt END ELSE stmt END

    LPARENT         shift and go to state 104


state 53

    (27) data -> FLOAT .

    EXP             reduce using rule 27 (data -> FLOAT .)
    PLUS            reduce using rule 27 (data -> FLOAT .)
    MINUS           reduce using rule 27 (data -> FLOAT .)
    TIMES           reduce using rule 27 (data -> FLOAT .)
    DIVIDE          reduce using rule 27 (data -> FLOAT .)
    MOD             reduce using rule 27 (data -> FLOAT .)
    LT              reduce using rule 27 (data -> FLOAT .)
    GT              reduce using rule 27 (data -> FLOAT .)
    LE              reduce using rule 27 (data -> FLOAT .)
    GE              reduce using rule 27 (data -> FLOAT .)
    EQ              reduce using rule 27 (data -> FLOAT .)
    NE              reduce using rule 27 (data -> FLOAT .)
    OR              reduce using rule 27 (data -> FLOAT .)
    AND             reduce using rule 27 (data -> FLOAT .)
    NOT             reduce using rule 27 (data -> FLOAT .)
    RPARENT         reduce using rule 27 (data -> FLOAT .)
    NEWLINE         reduce using rule 27 (data -> FLOAT .)
    RBRACKET        reduce using rule 27 (data -> FLOAT .)
    RETURN          reduce using rule 27 (data -> FLOAT .)
    PROCEDURE       reduce using rule 27 (data -> FLOAT .)
    PRINT           reduce using rule 27 (data -> FLOAT .)
    WHILE           reduce using rule 27 (data -> FLOAT .)
    FOR             reduce using rule 27 (data -> FLOAT .)
    IF              reduce using rule 27 (data -> FLOAT .)
    LBRACKET        reduce using rule 27 (data -> FLOAT .)
    END             reduce using rule 27 (data -> FLOAT .)
    COMMA           reduce using rule 27 (data -> FLOAT .)
    SEMICOLON       reduce using rule 27 (data -> FLOAT .)


state 54

    (89) bltin -> SQRT .

    LPARENT         reduce using rule 89 (bltin -> SQRT .)


state 55

    (31) unaryop -> INC . ID

    ID              shift and go to state 105


state 56

    (17) stmt -> LBRACKET stmtlist . RBRACKET
    (20) stmtlist -> stmtlist . NEWLINE
    (21) stmtlist -> stmtlist . stmt
    (9) stmt -> . RETURN
    (10) stmt -> . RETURN expr
    (11) stmt -> . PROCEDURE BEGIN LPARENT arglist RPARENT
    (12) stmt -> . PRINT prlist
    (13) stmt -> . WHILE LPARENT cond RPARENT stmt END
    (14) stmt -> . FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END
    (15) stmt -> . IF LPARENT cond RPARENT stmt END
    (16) stmt -> . IF LPARENT cond RPARENT stmt END ELSE stmt END
    (17) stmt -> . LBRACKET stmtlist RBRACKET

    RBRACKET        shift and go to state 108
    NEWLINE         shift and go to state 106
    RETURN          shift and go to state 13
    PROCEDURE       shift and go to state 10
    PRINT           shift and go to state 14
    WHILE           shift and go to state 32
    FOR             shift and go to state 23
    IF              shift and go to state 52
    LBRACKET        shift and go to state 4

    stmt                           shift and go to state 107

state 57

    (19) stmtlist -> empty .

    RBRACKET        reduce using rule 19 (stmtlist -> empty .)
    NEWLINE         reduce using rule 19 (stmtlist -> empty .)
    RETURN          reduce using rule 19 (stmtlist -> empty .)
    PROCEDURE       reduce using rule 19 (stmtlist -> empty .)
    PRINT           reduce using rule 19 (stmtlist -> empty .)
    WHILE           reduce using rule 19 (stmtlist -> empty .)
    FOR             reduce using rule 19 (stmtlist -> empty .)
    IF              reduce using rule 19 (stmtlist -> empty .)
    LBRACKET        reduce using rule 19 (stmtlist -> empty .)


state 58

    (8) list -> list COMMENT NEWLINE .

    NEWLINE         reduce using rule 8 (list -> list COMMENT NEWLINE .)
    error           reduce using rule 8 (list -> list COMMENT NEWLINE .)
    COMMENT         reduce using rule 8 (list -> list COMMENT NEWLINE .)
    FUNC            reduce using rule 8 (list -> list COMMENT NEWLINE .)
    PROC            reduce using rule 8 (list -> list COMMENT NEWLINE .)
    RETURN          reduce using rule 8 (list -> list COMMENT NEWLINE .)
    PROCEDURE       reduce using rule 8 (list -> list COMMENT NEWLINE .)
    PRINT           reduce using rule 8 (list -> list COMMENT NEWLINE .)
    WHILE           reduce using rule 8 (list -> list COMMENT NEWLINE .)
    FOR             reduce using rule 8 (list -> list COMMENT NEWLINE .)
    IF              reduce using rule 8 (list -> list COMMENT NEWLINE .)
    LBRACKET        reduce using rule 8 (list -> list COMMENT NEWLINE .)
    LPARENT         reduce using rule 8 (list -> list COMMENT NEWLINE .)
    FLOAT           reduce using rule 8 (list -> list COMMENT NEWLINE .)
    ID              reduce using rule 8 (list -> list COMMENT NEWLINE .)
    UNARYMINUS      reduce using rule 8 (list -> list COMMENT NEWLINE .)
    INC             reduce using rule 8 (list -> list COMMENT NEWLINE .)
    DEC             reduce using rule 8 (list -> list COMMENT NEWLINE .)
    PI              reduce using rule 8 (list -> list COMMENT NEWLINE .)
    PHI             reduce using rule 8 (list -> list COMMENT NEWLINE .)
    GAMMA           reduce using rule 8 (list -> list COMMENT NEWLINE .)
    E               reduce using rule 8 (list -> list COMMENT NEWLINE .)
    DEG             reduce using rule 8 (list -> list COMMENT NEWLINE .)
    PREC            reduce using rule 8 (list -> list COMMENT NEWLINE .)
    SIN             reduce using rule 8 (list -> list COMMENT NEWLINE .)
    COS             reduce using rule 8 (list -> list COMMENT NEWLINE .)
    TAN             reduce using rule 8 (list -> list COMMENT NEWLINE .)
    ASIN            reduce using rule 8 (list -> list COMMENT NEWLINE .)
    ACOS            reduce using rule 8 (list -> list COMMENT NEWLINE .)
    ATAN            reduce using rule 8 (list -> list COMMENT NEWLINE .)
    SINH            reduce using rule 8 (list -> list COMMENT NEWLINE .)
    COSH            reduce using rule 8 (list -> list COMMENT NEWLINE .)
    TANH            reduce using rule 8 (list -> list COMMENT NEWLINE .)
    INT             reduce using rule 8 (list -> list COMMENT NEWLINE .)
    LOG             reduce using rule 8 (list -> list COMMENT NEWLINE .)
    LOG10           reduce using rule 8 (list -> list COMMENT NEWLINE .)
    SQRT            reduce using rule 8 (list -> list COMMENT NEWLINE .)
    ABS             reduce using rule 8 (list -> list COMMENT NEWLINE .)
    ERF             reduce using rule 8 (list -> list COMMENT NEWLINE .)
    ERFC            reduce using rule 8 (list -> list COMMENT NEWLINE .)
    $end            reduce using rule 8 (list -> list COMMENT NEWLINE .)


state 59

    (11) stmt -> PROCEDURE BEGIN . LPARENT arglist RPARENT

    LPARENT         shift and go to state 109


state 60

    (59) callfunc -> bltin LPARENT . expr RPARENT
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 110
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 61

    (10) stmt -> RETURN expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    END             reduce using rule 10 (stmt -> RETURN expr .)
    NEWLINE         reduce using rule 10 (stmt -> RETURN expr .)
    RBRACKET        reduce using rule 10 (stmt -> RETURN expr .)
    RETURN          reduce using rule 10 (stmt -> RETURN expr .)
    PROCEDURE       reduce using rule 10 (stmt -> RETURN expr .)
    PRINT           reduce using rule 10 (stmt -> RETURN expr .)
    WHILE           reduce using rule 10 (stmt -> RETURN expr .)
    FOR             reduce using rule 10 (stmt -> RETURN expr .)
    IF              reduce using rule 10 (stmt -> RETURN expr .)
    LBRACKET        reduce using rule 10 (stmt -> RETURN expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89


state 62

    (62) prlist -> STRING .

    COMMA           reduce using rule 62 (prlist -> STRING .)
    NEWLINE         reduce using rule 62 (prlist -> STRING .)
    RBRACKET        reduce using rule 62 (prlist -> STRING .)
    RETURN          reduce using rule 62 (prlist -> STRING .)
    PROCEDURE       reduce using rule 62 (prlist -> STRING .)
    PRINT           reduce using rule 62 (prlist -> STRING .)
    WHILE           reduce using rule 62 (prlist -> STRING .)
    FOR             reduce using rule 62 (prlist -> STRING .)
    IF              reduce using rule 62 (prlist -> STRING .)
    LBRACKET        reduce using rule 62 (prlist -> STRING .)
    END             reduce using rule 62 (prlist -> STRING .)


state 63

    (61) prlist -> expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    COMMA           reduce using rule 61 (prlist -> expr .)
    NEWLINE         reduce using rule 61 (prlist -> expr .)
    RBRACKET        reduce using rule 61 (prlist -> expr .)
    RETURN          reduce using rule 61 (prlist -> expr .)
    PROCEDURE       reduce using rule 61 (prlist -> expr .)
    PRINT           reduce using rule 61 (prlist -> expr .)
    WHILE           reduce using rule 61 (prlist -> expr .)
    FOR             reduce using rule 61 (prlist -> expr .)
    IF              reduce using rule 61 (prlist -> expr .)
    LBRACKET        reduce using rule 61 (prlist -> expr .)
    END             reduce using rule 61 (prlist -> expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89


state 64

    (12) stmt -> PRINT prlist .
    (63) prlist -> prlist . COMMA expr
    (64) prlist -> prlist . COMMA STRING

    END             reduce using rule 12 (stmt -> PRINT prlist .)
    NEWLINE         reduce using rule 12 (stmt -> PRINT prlist .)
    RBRACKET        reduce using rule 12 (stmt -> PRINT prlist .)
    RETURN          reduce using rule 12 (stmt -> PRINT prlist .)
    PROCEDURE       reduce using rule 12 (stmt -> PRINT prlist .)
    PRINT           reduce using rule 12 (stmt -> PRINT prlist .)
    WHILE           reduce using rule 12 (stmt -> PRINT prlist .)
    FOR             reduce using rule 12 (stmt -> PRINT prlist .)
    IF              reduce using rule 12 (stmt -> PRINT prlist .)
    LBRACKET        reduce using rule 12 (stmt -> PRINT prlist .)
    COMMA           shift and go to state 111


state 65

    (30) unaryop -> UNARYMINUS expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    PLUS            reduce using rule 30 (unaryop -> UNARYMINUS expr .)
    MINUS           reduce using rule 30 (unaryop -> UNARYMINUS expr .)
    TIMES           reduce using rule 30 (unaryop -> UNARYMINUS expr .)
    DIVIDE          reduce using rule 30 (unaryop -> UNARYMINUS expr .)
    MOD             reduce using rule 30 (unaryop -> UNARYMINUS expr .)
    LT              reduce using rule 30 (unaryop -> UNARYMINUS expr .)
    GT              reduce using rule 30 (unaryop -> UNARYMINUS expr .)
    LE              reduce using rule 30 (unaryop -> UNARYMINUS expr .)
    GE              reduce using rule 30 (unaryop -> UNARYMINUS expr .)
    EQ              reduce using rule 30 (unaryop -> UNARYMINUS expr .)
    NE              reduce using rule 30 (unaryop -> UNARYMINUS expr .)
    OR              reduce using rule 30 (unaryop -> UNARYMINUS expr .)
    AND             reduce using rule 30 (unaryop -> UNARYMINUS expr .)
    NOT             reduce using rule 30 (unaryop -> UNARYMINUS expr .)
    SEMICOLON       reduce using rule 30 (unaryop -> UNARYMINUS expr .)
    NEWLINE         reduce using rule 30 (unaryop -> UNARYMINUS expr .)
    RBRACKET        reduce using rule 30 (unaryop -> UNARYMINUS expr .)
    RETURN          reduce using rule 30 (unaryop -> UNARYMINUS expr .)
    PROCEDURE       reduce using rule 30 (unaryop -> UNARYMINUS expr .)
    PRINT           reduce using rule 30 (unaryop -> UNARYMINUS expr .)
    WHILE           reduce using rule 30 (unaryop -> UNARYMINUS expr .)
    FOR             reduce using rule 30 (unaryop -> UNARYMINUS expr .)
    IF              reduce using rule 30 (unaryop -> UNARYMINUS expr .)
    LBRACKET        reduce using rule 30 (unaryop -> UNARYMINUS expr .)
    END             reduce using rule 30 (unaryop -> UNARYMINUS expr .)
    COMMA           reduce using rule 30 (unaryop -> UNARYMINUS expr .)
    RPARENT         reduce using rule 30 (unaryop -> UNARYMINUS expr .)
    EXP             shift and go to state 88

  ! EXP             [ reduce using rule 30 (unaryop -> UNARYMINUS expr .) ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 91 ]
  ! TIMES           [ shift and go to state 84 ]
  ! DIVIDE          [ shift and go to state 81 ]
  ! MOD             [ shift and go to state 93 ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]
  ! NOT             [ shift and go to state 89 ]


state 66

    (14) stmt -> FOR LPARENT . cond SEMICOLON cond SEMICOLON cond RPARENT stmt END
    (18) cond -> . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 113
    callfunc                       shift and go to state 39
    asgn                           shift and go to state 7
    cond                           shift and go to state 112
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50
    bltin                          shift and go to state 12

state 67

    (5) list -> list stmt NEWLINE .

    NEWLINE         reduce using rule 5 (list -> list stmt NEWLINE .)
    error           reduce using rule 5 (list -> list stmt NEWLINE .)
    COMMENT         reduce using rule 5 (list -> list stmt NEWLINE .)
    FUNC            reduce using rule 5 (list -> list stmt NEWLINE .)
    PROC            reduce using rule 5 (list -> list stmt NEWLINE .)
    RETURN          reduce using rule 5 (list -> list stmt NEWLINE .)
    PROCEDURE       reduce using rule 5 (list -> list stmt NEWLINE .)
    PRINT           reduce using rule 5 (list -> list stmt NEWLINE .)
    WHILE           reduce using rule 5 (list -> list stmt NEWLINE .)
    FOR             reduce using rule 5 (list -> list stmt NEWLINE .)
    IF              reduce using rule 5 (list -> list stmt NEWLINE .)
    LBRACKET        reduce using rule 5 (list -> list stmt NEWLINE .)
    LPARENT         reduce using rule 5 (list -> list stmt NEWLINE .)
    FLOAT           reduce using rule 5 (list -> list stmt NEWLINE .)
    ID              reduce using rule 5 (list -> list stmt NEWLINE .)
    UNARYMINUS      reduce using rule 5 (list -> list stmt NEWLINE .)
    INC             reduce using rule 5 (list -> list stmt NEWLINE .)
    DEC             reduce using rule 5 (list -> list stmt NEWLINE .)
    PI              reduce using rule 5 (list -> list stmt NEWLINE .)
    PHI             reduce using rule 5 (list -> list stmt NEWLINE .)
    GAMMA           reduce using rule 5 (list -> list stmt NEWLINE .)
    E               reduce using rule 5 (list -> list stmt NEWLINE .)
    DEG             reduce using rule 5 (list -> list stmt NEWLINE .)
    PREC            reduce using rule 5 (list -> list stmt NEWLINE .)
    SIN             reduce using rule 5 (list -> list stmt NEWLINE .)
    COS             reduce using rule 5 (list -> list stmt NEWLINE .)
    TAN             reduce using rule 5 (list -> list stmt NEWLINE .)
    ASIN            reduce using rule 5 (list -> list stmt NEWLINE .)
    ACOS            reduce using rule 5 (list -> list stmt NEWLINE .)
    ATAN            reduce using rule 5 (list -> list stmt NEWLINE .)
    SINH            reduce using rule 5 (list -> list stmt NEWLINE .)
    COSH            reduce using rule 5 (list -> list stmt NEWLINE .)
    TANH            reduce using rule 5 (list -> list stmt NEWLINE .)
    INT             reduce using rule 5 (list -> list stmt NEWLINE .)
    LOG             reduce using rule 5 (list -> list stmt NEWLINE .)
    LOG10           reduce using rule 5 (list -> list stmt NEWLINE .)
    SQRT            reduce using rule 5 (list -> list stmt NEWLINE .)
    ABS             reduce using rule 5 (list -> list stmt NEWLINE .)
    ERF             reduce using rule 5 (list -> list stmt NEWLINE .)
    ERFC            reduce using rule 5 (list -> list stmt NEWLINE .)
    $end            reduce using rule 5 (list -> list stmt NEWLINE .)


state 68

    (70) procname -> ID .

    LPARENT         reduce using rule 70 (procname -> ID .)


state 69

    (69) procname -> FUNCTION .

    LPARENT         reduce using rule 69 (procname -> FUNCTION .)


state 70

    (71) procname -> PROCEDURE .

    LPARENT         reduce using rule 71 (procname -> PROCEDURE .)


state 71

    (72) procname -> bltin .

    LPARENT         reduce using rule 72 (procname -> bltin .)


state 72

    (65) defn -> FUNC procname . LPARENT formals RPARENT

    LPARENT         shift and go to state 114


state 73

    (32) unaryop -> DEC ID .

    EXP             reduce using rule 32 (unaryop -> DEC ID .)
    PLUS            reduce using rule 32 (unaryop -> DEC ID .)
    MINUS           reduce using rule 32 (unaryop -> DEC ID .)
    TIMES           reduce using rule 32 (unaryop -> DEC ID .)
    DIVIDE          reduce using rule 32 (unaryop -> DEC ID .)
    MOD             reduce using rule 32 (unaryop -> DEC ID .)
    LT              reduce using rule 32 (unaryop -> DEC ID .)
    GT              reduce using rule 32 (unaryop -> DEC ID .)
    LE              reduce using rule 32 (unaryop -> DEC ID .)
    GE              reduce using rule 32 (unaryop -> DEC ID .)
    EQ              reduce using rule 32 (unaryop -> DEC ID .)
    NE              reduce using rule 32 (unaryop -> DEC ID .)
    OR              reduce using rule 32 (unaryop -> DEC ID .)
    AND             reduce using rule 32 (unaryop -> DEC ID .)
    NOT             reduce using rule 32 (unaryop -> DEC ID .)
    SEMICOLON       reduce using rule 32 (unaryop -> DEC ID .)
    NEWLINE         reduce using rule 32 (unaryop -> DEC ID .)
    RBRACKET        reduce using rule 32 (unaryop -> DEC ID .)
    RETURN          reduce using rule 32 (unaryop -> DEC ID .)
    PROCEDURE       reduce using rule 32 (unaryop -> DEC ID .)
    PRINT           reduce using rule 32 (unaryop -> DEC ID .)
    WHILE           reduce using rule 32 (unaryop -> DEC ID .)
    FOR             reduce using rule 32 (unaryop -> DEC ID .)
    IF              reduce using rule 32 (unaryop -> DEC ID .)
    LBRACKET        reduce using rule 32 (unaryop -> DEC ID .)
    END             reduce using rule 32 (unaryop -> DEC ID .)
    COMMA           reduce using rule 32 (unaryop -> DEC ID .)
    RPARENT         reduce using rule 32 (unaryop -> DEC ID .)


state 74

    (66) defn -> PROC procname . LPARENT formals RPARENT

    LPARENT         shift and go to state 115


state 75

    (13) stmt -> WHILE LPARENT . cond RPARENT stmt END
    (18) cond -> . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 113
    callfunc                       shift and go to state 39
    asgn                           shift and go to state 7
    cond                           shift and go to state 116
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50
    bltin                          shift and go to state 12

state 76

    (25) expr -> LPARENT expr . RPARENT
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    RPARENT         shift and go to state 117
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89


state 77

    (4) list -> list defn NEWLINE .

    NEWLINE         reduce using rule 4 (list -> list defn NEWLINE .)
    error           reduce using rule 4 (list -> list defn NEWLINE .)
    COMMENT         reduce using rule 4 (list -> list defn NEWLINE .)
    FUNC            reduce using rule 4 (list -> list defn NEWLINE .)
    PROC            reduce using rule 4 (list -> list defn NEWLINE .)
    RETURN          reduce using rule 4 (list -> list defn NEWLINE .)
    PROCEDURE       reduce using rule 4 (list -> list defn NEWLINE .)
    PRINT           reduce using rule 4 (list -> list defn NEWLINE .)
    WHILE           reduce using rule 4 (list -> list defn NEWLINE .)
    FOR             reduce using rule 4 (list -> list defn NEWLINE .)
    IF              reduce using rule 4 (list -> list defn NEWLINE .)
    LBRACKET        reduce using rule 4 (list -> list defn NEWLINE .)
    LPARENT         reduce using rule 4 (list -> list defn NEWLINE .)
    FLOAT           reduce using rule 4 (list -> list defn NEWLINE .)
    ID              reduce using rule 4 (list -> list defn NEWLINE .)
    UNARYMINUS      reduce using rule 4 (list -> list defn NEWLINE .)
    INC             reduce using rule 4 (list -> list defn NEWLINE .)
    DEC             reduce using rule 4 (list -> list defn NEWLINE .)
    PI              reduce using rule 4 (list -> list defn NEWLINE .)
    PHI             reduce using rule 4 (list -> list defn NEWLINE .)
    GAMMA           reduce using rule 4 (list -> list defn NEWLINE .)
    E               reduce using rule 4 (list -> list defn NEWLINE .)
    DEG             reduce using rule 4 (list -> list defn NEWLINE .)
    PREC            reduce using rule 4 (list -> list defn NEWLINE .)
    SIN             reduce using rule 4 (list -> list defn NEWLINE .)
    COS             reduce using rule 4 (list -> list defn NEWLINE .)
    TAN             reduce using rule 4 (list -> list defn NEWLINE .)
    ASIN            reduce using rule 4 (list -> list defn NEWLINE .)
    ACOS            reduce using rule 4 (list -> list defn NEWLINE .)
    ATAN            reduce using rule 4 (list -> list defn NEWLINE .)
    SINH            reduce using rule 4 (list -> list defn NEWLINE .)
    COSH            reduce using rule 4 (list -> list defn NEWLINE .)
    TANH            reduce using rule 4 (list -> list defn NEWLINE .)
    INT             reduce using rule 4 (list -> list defn NEWLINE .)
    LOG             reduce using rule 4 (list -> list defn NEWLINE .)
    LOG10           reduce using rule 4 (list -> list defn NEWLINE .)
    SQRT            reduce using rule 4 (list -> list defn NEWLINE .)
    ABS             reduce using rule 4 (list -> list defn NEWLINE .)
    ERF             reduce using rule 4 (list -> list defn NEWLINE .)
    ERFC            reduce using rule 4 (list -> list defn NEWLINE .)
    $end            reduce using rule 4 (list -> list defn NEWLINE .)


state 78

    (57) logicop -> expr AND . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 118
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 79

    (56) logicop -> expr OR . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 119
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 80

    (51) logicop -> expr GT . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 120
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 81

    (48) mathop -> expr DIVIDE . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 121
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 82

    (6) list -> list expr NEWLINE .

    NEWLINE         reduce using rule 6 (list -> list expr NEWLINE .)
    error           reduce using rule 6 (list -> list expr NEWLINE .)
    COMMENT         reduce using rule 6 (list -> list expr NEWLINE .)
    FUNC            reduce using rule 6 (list -> list expr NEWLINE .)
    PROC            reduce using rule 6 (list -> list expr NEWLINE .)
    RETURN          reduce using rule 6 (list -> list expr NEWLINE .)
    PROCEDURE       reduce using rule 6 (list -> list expr NEWLINE .)
    PRINT           reduce using rule 6 (list -> list expr NEWLINE .)
    WHILE           reduce using rule 6 (list -> list expr NEWLINE .)
    FOR             reduce using rule 6 (list -> list expr NEWLINE .)
    IF              reduce using rule 6 (list -> list expr NEWLINE .)
    LBRACKET        reduce using rule 6 (list -> list expr NEWLINE .)
    LPARENT         reduce using rule 6 (list -> list expr NEWLINE .)
    FLOAT           reduce using rule 6 (list -> list expr NEWLINE .)
    ID              reduce using rule 6 (list -> list expr NEWLINE .)
    UNARYMINUS      reduce using rule 6 (list -> list expr NEWLINE .)
    INC             reduce using rule 6 (list -> list expr NEWLINE .)
    DEC             reduce using rule 6 (list -> list expr NEWLINE .)
    PI              reduce using rule 6 (list -> list expr NEWLINE .)
    PHI             reduce using rule 6 (list -> list expr NEWLINE .)
    GAMMA           reduce using rule 6 (list -> list expr NEWLINE .)
    E               reduce using rule 6 (list -> list expr NEWLINE .)
    DEG             reduce using rule 6 (list -> list expr NEWLINE .)
    PREC            reduce using rule 6 (list -> list expr NEWLINE .)
    SIN             reduce using rule 6 (list -> list expr NEWLINE .)
    COS             reduce using rule 6 (list -> list expr NEWLINE .)
    TAN             reduce using rule 6 (list -> list expr NEWLINE .)
    ASIN            reduce using rule 6 (list -> list expr NEWLINE .)
    ACOS            reduce using rule 6 (list -> list expr NEWLINE .)
    ATAN            reduce using rule 6 (list -> list expr NEWLINE .)
    SINH            reduce using rule 6 (list -> list expr NEWLINE .)
    COSH            reduce using rule 6 (list -> list expr NEWLINE .)
    TANH            reduce using rule 6 (list -> list expr NEWLINE .)
    INT             reduce using rule 6 (list -> list expr NEWLINE .)
    LOG             reduce using rule 6 (list -> list expr NEWLINE .)
    LOG10           reduce using rule 6 (list -> list expr NEWLINE .)
    SQRT            reduce using rule 6 (list -> list expr NEWLINE .)
    ABS             reduce using rule 6 (list -> list expr NEWLINE .)
    ERF             reduce using rule 6 (list -> list expr NEWLINE .)
    ERFC            reduce using rule 6 (list -> list expr NEWLINE .)
    $end            reduce using rule 6 (list -> list expr NEWLINE .)


state 83

    (53) logicop -> expr GE . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 122
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 84

    (47) mathop -> expr TIMES . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 123
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 85

    (50) logicop -> expr LT . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 124
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 86

    (52) logicop -> expr LE . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 125
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 87

    (45) mathop -> expr PLUS . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 126
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 88

    (44) mathop -> expr EXP . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 127
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 89

    (58) logicop -> expr NOT . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 128
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 90

    (54) logicop -> expr EQ . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 129
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 91

    (46) mathop -> expr MINUS . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 130
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 92

    (55) logicop -> expr NE . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 131
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 93

    (49) mathop -> expr MOD . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 132
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 94

    (7) list -> list error NEWLINE .

    NEWLINE         reduce using rule 7 (list -> list error NEWLINE .)
    error           reduce using rule 7 (list -> list error NEWLINE .)
    COMMENT         reduce using rule 7 (list -> list error NEWLINE .)
    FUNC            reduce using rule 7 (list -> list error NEWLINE .)
    PROC            reduce using rule 7 (list -> list error NEWLINE .)
    RETURN          reduce using rule 7 (list -> list error NEWLINE .)
    PROCEDURE       reduce using rule 7 (list -> list error NEWLINE .)
    PRINT           reduce using rule 7 (list -> list error NEWLINE .)
    WHILE           reduce using rule 7 (list -> list error NEWLINE .)
    FOR             reduce using rule 7 (list -> list error NEWLINE .)
    IF              reduce using rule 7 (list -> list error NEWLINE .)
    LBRACKET        reduce using rule 7 (list -> list error NEWLINE .)
    LPARENT         reduce using rule 7 (list -> list error NEWLINE .)
    FLOAT           reduce using rule 7 (list -> list error NEWLINE .)
    ID              reduce using rule 7 (list -> list error NEWLINE .)
    UNARYMINUS      reduce using rule 7 (list -> list error NEWLINE .)
    INC             reduce using rule 7 (list -> list error NEWLINE .)
    DEC             reduce using rule 7 (list -> list error NEWLINE .)
    PI              reduce using rule 7 (list -> list error NEWLINE .)
    PHI             reduce using rule 7 (list -> list error NEWLINE .)
    GAMMA           reduce using rule 7 (list -> list error NEWLINE .)
    E               reduce using rule 7 (list -> list error NEWLINE .)
    DEG             reduce using rule 7 (list -> list error NEWLINE .)
    PREC            reduce using rule 7 (list -> list error NEWLINE .)
    SIN             reduce using rule 7 (list -> list error NEWLINE .)
    COS             reduce using rule 7 (list -> list error NEWLINE .)
    TAN             reduce using rule 7 (list -> list error NEWLINE .)
    ASIN            reduce using rule 7 (list -> list error NEWLINE .)
    ACOS            reduce using rule 7 (list -> list error NEWLINE .)
    ATAN            reduce using rule 7 (list -> list error NEWLINE .)
    SINH            reduce using rule 7 (list -> list error NEWLINE .)
    COSH            reduce using rule 7 (list -> list error NEWLINE .)
    TANH            reduce using rule 7 (list -> list error NEWLINE .)
    INT             reduce using rule 7 (list -> list error NEWLINE .)
    LOG             reduce using rule 7 (list -> list error NEWLINE .)
    LOG10           reduce using rule 7 (list -> list error NEWLINE .)
    SQRT            reduce using rule 7 (list -> list error NEWLINE .)
    ABS             reduce using rule 7 (list -> list error NEWLINE .)
    ERF             reduce using rule 7 (list -> list error NEWLINE .)
    ERFC            reduce using rule 7 (list -> list error NEWLINE .)
    $end            reduce using rule 7 (list -> list error NEWLINE .)


state 95

    (60) callfunc -> ID LPARENT . expr RPARENT
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 133
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 96

    (43) asgn -> ID MODEQ . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 134
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 97

    (38) asgn -> ID ASSIGN . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 135
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 98

    (40) asgn -> ID SUBEQ . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 136
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 99

    (39) asgn -> ID ADDEQ . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 137
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 100

    (41) asgn -> ID MULEQ . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 138
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 101

    (34) unaryop -> ID DEC .

    EXP             reduce using rule 34 (unaryop -> ID DEC .)
    PLUS            reduce using rule 34 (unaryop -> ID DEC .)
    MINUS           reduce using rule 34 (unaryop -> ID DEC .)
    TIMES           reduce using rule 34 (unaryop -> ID DEC .)
    DIVIDE          reduce using rule 34 (unaryop -> ID DEC .)
    MOD             reduce using rule 34 (unaryop -> ID DEC .)
    LT              reduce using rule 34 (unaryop -> ID DEC .)
    GT              reduce using rule 34 (unaryop -> ID DEC .)
    LE              reduce using rule 34 (unaryop -> ID DEC .)
    GE              reduce using rule 34 (unaryop -> ID DEC .)
    EQ              reduce using rule 34 (unaryop -> ID DEC .)
    NE              reduce using rule 34 (unaryop -> ID DEC .)
    OR              reduce using rule 34 (unaryop -> ID DEC .)
    AND             reduce using rule 34 (unaryop -> ID DEC .)
    NOT             reduce using rule 34 (unaryop -> ID DEC .)
    SEMICOLON       reduce using rule 34 (unaryop -> ID DEC .)
    NEWLINE         reduce using rule 34 (unaryop -> ID DEC .)
    RBRACKET        reduce using rule 34 (unaryop -> ID DEC .)
    RETURN          reduce using rule 34 (unaryop -> ID DEC .)
    PROCEDURE       reduce using rule 34 (unaryop -> ID DEC .)
    PRINT           reduce using rule 34 (unaryop -> ID DEC .)
    WHILE           reduce using rule 34 (unaryop -> ID DEC .)
    FOR             reduce using rule 34 (unaryop -> ID DEC .)
    IF              reduce using rule 34 (unaryop -> ID DEC .)
    LBRACKET        reduce using rule 34 (unaryop -> ID DEC .)
    END             reduce using rule 34 (unaryop -> ID DEC .)
    COMMA           reduce using rule 34 (unaryop -> ID DEC .)
    RPARENT         reduce using rule 34 (unaryop -> ID DEC .)


state 102

    (42) asgn -> ID DIVEQ . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 139
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 103

    (33) unaryop -> ID INC .

    EXP             reduce using rule 33 (unaryop -> ID INC .)
    PLUS            reduce using rule 33 (unaryop -> ID INC .)
    MINUS           reduce using rule 33 (unaryop -> ID INC .)
    TIMES           reduce using rule 33 (unaryop -> ID INC .)
    DIVIDE          reduce using rule 33 (unaryop -> ID INC .)
    MOD             reduce using rule 33 (unaryop -> ID INC .)
    LT              reduce using rule 33 (unaryop -> ID INC .)
    GT              reduce using rule 33 (unaryop -> ID INC .)
    LE              reduce using rule 33 (unaryop -> ID INC .)
    GE              reduce using rule 33 (unaryop -> ID INC .)
    EQ              reduce using rule 33 (unaryop -> ID INC .)
    NE              reduce using rule 33 (unaryop -> ID INC .)
    OR              reduce using rule 33 (unaryop -> ID INC .)
    AND             reduce using rule 33 (unaryop -> ID INC .)
    NOT             reduce using rule 33 (unaryop -> ID INC .)
    SEMICOLON       reduce using rule 33 (unaryop -> ID INC .)
    NEWLINE         reduce using rule 33 (unaryop -> ID INC .)
    RBRACKET        reduce using rule 33 (unaryop -> ID INC .)
    RETURN          reduce using rule 33 (unaryop -> ID INC .)
    PROCEDURE       reduce using rule 33 (unaryop -> ID INC .)
    PRINT           reduce using rule 33 (unaryop -> ID INC .)
    WHILE           reduce using rule 33 (unaryop -> ID INC .)
    FOR             reduce using rule 33 (unaryop -> ID INC .)
    IF              reduce using rule 33 (unaryop -> ID INC .)
    LBRACKET        reduce using rule 33 (unaryop -> ID INC .)
    END             reduce using rule 33 (unaryop -> ID INC .)
    COMMA           reduce using rule 33 (unaryop -> ID INC .)
    RPARENT         reduce using rule 33 (unaryop -> ID INC .)


state 104

    (15) stmt -> IF LPARENT . cond RPARENT stmt END
    (16) stmt -> IF LPARENT . cond RPARENT stmt END ELSE stmt END
    (18) cond -> . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 113
    callfunc                       shift and go to state 39
    asgn                           shift and go to state 7
    cond                           shift and go to state 140
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50
    bltin                          shift and go to state 12

state 105

    (31) unaryop -> INC ID .

    EXP             reduce using rule 31 (unaryop -> INC ID .)
    PLUS            reduce using rule 31 (unaryop -> INC ID .)
    MINUS           reduce using rule 31 (unaryop -> INC ID .)
    TIMES           reduce using rule 31 (unaryop -> INC ID .)
    DIVIDE          reduce using rule 31 (unaryop -> INC ID .)
    MOD             reduce using rule 31 (unaryop -> INC ID .)
    LT              reduce using rule 31 (unaryop -> INC ID .)
    GT              reduce using rule 31 (unaryop -> INC ID .)
    LE              reduce using rule 31 (unaryop -> INC ID .)
    GE              reduce using rule 31 (unaryop -> INC ID .)
    EQ              reduce using rule 31 (unaryop -> INC ID .)
    NE              reduce using rule 31 (unaryop -> INC ID .)
    OR              reduce using rule 31 (unaryop -> INC ID .)
    AND             reduce using rule 31 (unaryop -> INC ID .)
    NOT             reduce using rule 31 (unaryop -> INC ID .)
    SEMICOLON       reduce using rule 31 (unaryop -> INC ID .)
    NEWLINE         reduce using rule 31 (unaryop -> INC ID .)
    RBRACKET        reduce using rule 31 (unaryop -> INC ID .)
    RETURN          reduce using rule 31 (unaryop -> INC ID .)
    PROCEDURE       reduce using rule 31 (unaryop -> INC ID .)
    PRINT           reduce using rule 31 (unaryop -> INC ID .)
    WHILE           reduce using rule 31 (unaryop -> INC ID .)
    FOR             reduce using rule 31 (unaryop -> INC ID .)
    IF              reduce using rule 31 (unaryop -> INC ID .)
    LBRACKET        reduce using rule 31 (unaryop -> INC ID .)
    END             reduce using rule 31 (unaryop -> INC ID .)
    COMMA           reduce using rule 31 (unaryop -> INC ID .)
    RPARENT         reduce using rule 31 (unaryop -> INC ID .)


state 106

    (20) stmtlist -> stmtlist NEWLINE .

    RBRACKET        reduce using rule 20 (stmtlist -> stmtlist NEWLINE .)
    NEWLINE         reduce using rule 20 (stmtlist -> stmtlist NEWLINE .)
    RETURN          reduce using rule 20 (stmtlist -> stmtlist NEWLINE .)
    PROCEDURE       reduce using rule 20 (stmtlist -> stmtlist NEWLINE .)
    PRINT           reduce using rule 20 (stmtlist -> stmtlist NEWLINE .)
    WHILE           reduce using rule 20 (stmtlist -> stmtlist NEWLINE .)
    FOR             reduce using rule 20 (stmtlist -> stmtlist NEWLINE .)
    IF              reduce using rule 20 (stmtlist -> stmtlist NEWLINE .)
    LBRACKET        reduce using rule 20 (stmtlist -> stmtlist NEWLINE .)


state 107

    (21) stmtlist -> stmtlist stmt .

    RBRACKET        reduce using rule 21 (stmtlist -> stmtlist stmt .)
    NEWLINE         reduce using rule 21 (stmtlist -> stmtlist stmt .)
    RETURN          reduce using rule 21 (stmtlist -> stmtlist stmt .)
    PROCEDURE       reduce using rule 21 (stmtlist -> stmtlist stmt .)
    PRINT           reduce using rule 21 (stmtlist -> stmtlist stmt .)
    WHILE           reduce using rule 21 (stmtlist -> stmtlist stmt .)
    FOR             reduce using rule 21 (stmtlist -> stmtlist stmt .)
    IF              reduce using rule 21 (stmtlist -> stmtlist stmt .)
    LBRACKET        reduce using rule 21 (stmtlist -> stmtlist stmt .)


state 108

    (17) stmt -> LBRACKET stmtlist RBRACKET .

    END             reduce using rule 17 (stmt -> LBRACKET stmtlist RBRACKET .)
    NEWLINE         reduce using rule 17 (stmt -> LBRACKET stmtlist RBRACKET .)
    RBRACKET        reduce using rule 17 (stmt -> LBRACKET stmtlist RBRACKET .)
    RETURN          reduce using rule 17 (stmt -> LBRACKET stmtlist RBRACKET .)
    PROCEDURE       reduce using rule 17 (stmt -> LBRACKET stmtlist RBRACKET .)
    PRINT           reduce using rule 17 (stmt -> LBRACKET stmtlist RBRACKET .)
    WHILE           reduce using rule 17 (stmt -> LBRACKET stmtlist RBRACKET .)
    FOR             reduce using rule 17 (stmt -> LBRACKET stmtlist RBRACKET .)
    IF              reduce using rule 17 (stmt -> LBRACKET stmtlist RBRACKET .)
    LBRACKET        reduce using rule 17 (stmt -> LBRACKET stmtlist RBRACKET .)


state 109

    (11) stmt -> PROCEDURE BEGIN LPARENT . arglist RPARENT
    (73) arglist -> . empty
    (74) arglist -> . expr
    (75) arglist -> . arglist COMMA expr
    (76) empty -> .
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    RPARENT         reduce using rule 76 (empty -> .)
    COMMA           reduce using rule 76 (empty -> .)
    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 143
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    arglist                        shift and go to state 141
    data                           shift and go to state 50
    empty                          shift and go to state 142

state 110

    (59) callfunc -> bltin LPARENT expr . RPARENT
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    RPARENT         shift and go to state 144
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89


state 111

    (63) prlist -> prlist COMMA . expr
    (64) prlist -> prlist COMMA . STRING
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    STRING          shift and go to state 145
    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 146
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 112

    (14) stmt -> FOR LPARENT cond . SEMICOLON cond SEMICOLON cond RPARENT stmt END

    SEMICOLON       shift and go to state 147


state 113

    (18) cond -> expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    RPARENT         reduce using rule 18 (cond -> expr .)
    SEMICOLON       reduce using rule 18 (cond -> expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89


state 114

    (65) defn -> FUNC procname LPARENT . formals RPARENT
    (67) formals -> . ID
    (68) formals -> . ID COMMA formals

    ID              shift and go to state 148

    formals                        shift and go to state 149

state 115

    (66) defn -> PROC procname LPARENT . formals RPARENT
    (67) formals -> . ID
    (68) formals -> . ID COMMA formals

    ID              shift and go to state 148

    formals                        shift and go to state 150

state 116

    (13) stmt -> WHILE LPARENT cond . RPARENT stmt END

    RPARENT         shift and go to state 151


state 117

    (25) expr -> LPARENT expr RPARENT .

    EXP             reduce using rule 25 (expr -> LPARENT expr RPARENT .)
    PLUS            reduce using rule 25 (expr -> LPARENT expr RPARENT .)
    MINUS           reduce using rule 25 (expr -> LPARENT expr RPARENT .)
    TIMES           reduce using rule 25 (expr -> LPARENT expr RPARENT .)
    DIVIDE          reduce using rule 25 (expr -> LPARENT expr RPARENT .)
    MOD             reduce using rule 25 (expr -> LPARENT expr RPARENT .)
    LT              reduce using rule 25 (expr -> LPARENT expr RPARENT .)
    GT              reduce using rule 25 (expr -> LPARENT expr RPARENT .)
    LE              reduce using rule 25 (expr -> LPARENT expr RPARENT .)
    GE              reduce using rule 25 (expr -> LPARENT expr RPARENT .)
    EQ              reduce using rule 25 (expr -> LPARENT expr RPARENT .)
    NE              reduce using rule 25 (expr -> LPARENT expr RPARENT .)
    OR              reduce using rule 25 (expr -> LPARENT expr RPARENT .)
    AND             reduce using rule 25 (expr -> LPARENT expr RPARENT .)
    NOT             reduce using rule 25 (expr -> LPARENT expr RPARENT .)
    COMMA           reduce using rule 25 (expr -> LPARENT expr RPARENT .)
    NEWLINE         reduce using rule 25 (expr -> LPARENT expr RPARENT .)
    RBRACKET        reduce using rule 25 (expr -> LPARENT expr RPARENT .)
    RETURN          reduce using rule 25 (expr -> LPARENT expr RPARENT .)
    PROCEDURE       reduce using rule 25 (expr -> LPARENT expr RPARENT .)
    PRINT           reduce using rule 25 (expr -> LPARENT expr RPARENT .)
    WHILE           reduce using rule 25 (expr -> LPARENT expr RPARENT .)
    FOR             reduce using rule 25 (expr -> LPARENT expr RPARENT .)
    IF              reduce using rule 25 (expr -> LPARENT expr RPARENT .)
    LBRACKET        reduce using rule 25 (expr -> LPARENT expr RPARENT .)
    END             reduce using rule 25 (expr -> LPARENT expr RPARENT .)
    RPARENT         reduce using rule 25 (expr -> LPARENT expr RPARENT .)
    SEMICOLON       reduce using rule 25 (expr -> LPARENT expr RPARENT .)


state 118

    (57) logicop -> expr AND expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    RPARENT         reduce using rule 57 (logicop -> expr AND expr .)
    OR              reduce using rule 57 (logicop -> expr AND expr .)
    AND             reduce using rule 57 (logicop -> expr AND expr .)
    COMMA           reduce using rule 57 (logicop -> expr AND expr .)
    NEWLINE         reduce using rule 57 (logicop -> expr AND expr .)
    RBRACKET        reduce using rule 57 (logicop -> expr AND expr .)
    RETURN          reduce using rule 57 (logicop -> expr AND expr .)
    PROCEDURE       reduce using rule 57 (logicop -> expr AND expr .)
    PRINT           reduce using rule 57 (logicop -> expr AND expr .)
    WHILE           reduce using rule 57 (logicop -> expr AND expr .)
    FOR             reduce using rule 57 (logicop -> expr AND expr .)
    IF              reduce using rule 57 (logicop -> expr AND expr .)
    LBRACKET        reduce using rule 57 (logicop -> expr AND expr .)
    END             reduce using rule 57 (logicop -> expr AND expr .)
    SEMICOLON       reduce using rule 57 (logicop -> expr AND expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 57 (logicop -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 57 (logicop -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 57 (logicop -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 57 (logicop -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 57 (logicop -> expr AND expr .) ]
  ! MOD             [ reduce using rule 57 (logicop -> expr AND expr .) ]
  ! LT              [ reduce using rule 57 (logicop -> expr AND expr .) ]
  ! GT              [ reduce using rule 57 (logicop -> expr AND expr .) ]
  ! LE              [ reduce using rule 57 (logicop -> expr AND expr .) ]
  ! GE              [ reduce using rule 57 (logicop -> expr AND expr .) ]
  ! EQ              [ reduce using rule 57 (logicop -> expr AND expr .) ]
  ! NE              [ reduce using rule 57 (logicop -> expr AND expr .) ]
  ! NOT             [ reduce using rule 57 (logicop -> expr AND expr .) ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]


state 119

    (56) logicop -> expr OR expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    RPARENT         reduce using rule 56 (logicop -> expr OR expr .)
    OR              reduce using rule 56 (logicop -> expr OR expr .)
    COMMA           reduce using rule 56 (logicop -> expr OR expr .)
    NEWLINE         reduce using rule 56 (logicop -> expr OR expr .)
    RBRACKET        reduce using rule 56 (logicop -> expr OR expr .)
    RETURN          reduce using rule 56 (logicop -> expr OR expr .)
    PROCEDURE       reduce using rule 56 (logicop -> expr OR expr .)
    PRINT           reduce using rule 56 (logicop -> expr OR expr .)
    WHILE           reduce using rule 56 (logicop -> expr OR expr .)
    FOR             reduce using rule 56 (logicop -> expr OR expr .)
    IF              reduce using rule 56 (logicop -> expr OR expr .)
    LBRACKET        reduce using rule 56 (logicop -> expr OR expr .)
    END             reduce using rule 56 (logicop -> expr OR expr .)
    SEMICOLON       reduce using rule 56 (logicop -> expr OR expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    AND             shift and go to state 78
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 56 (logicop -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 56 (logicop -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 56 (logicop -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 56 (logicop -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 56 (logicop -> expr OR expr .) ]
  ! MOD             [ reduce using rule 56 (logicop -> expr OR expr .) ]
  ! LT              [ reduce using rule 56 (logicop -> expr OR expr .) ]
  ! GT              [ reduce using rule 56 (logicop -> expr OR expr .) ]
  ! LE              [ reduce using rule 56 (logicop -> expr OR expr .) ]
  ! GE              [ reduce using rule 56 (logicop -> expr OR expr .) ]
  ! EQ              [ reduce using rule 56 (logicop -> expr OR expr .) ]
  ! NE              [ reduce using rule 56 (logicop -> expr OR expr .) ]
  ! AND             [ reduce using rule 56 (logicop -> expr OR expr .) ]
  ! NOT             [ reduce using rule 56 (logicop -> expr OR expr .) ]
  ! OR              [ shift and go to state 79 ]


state 120

    (51) logicop -> expr GT expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    RPARENT         reduce using rule 51 (logicop -> expr GT expr .)
    LT              reduce using rule 51 (logicop -> expr GT expr .)
    GT              reduce using rule 51 (logicop -> expr GT expr .)
    LE              reduce using rule 51 (logicop -> expr GT expr .)
    GE              reduce using rule 51 (logicop -> expr GT expr .)
    EQ              reduce using rule 51 (logicop -> expr GT expr .)
    NE              reduce using rule 51 (logicop -> expr GT expr .)
    OR              reduce using rule 51 (logicop -> expr GT expr .)
    AND             reduce using rule 51 (logicop -> expr GT expr .)
    COMMA           reduce using rule 51 (logicop -> expr GT expr .)
    NEWLINE         reduce using rule 51 (logicop -> expr GT expr .)
    RBRACKET        reduce using rule 51 (logicop -> expr GT expr .)
    RETURN          reduce using rule 51 (logicop -> expr GT expr .)
    PROCEDURE       reduce using rule 51 (logicop -> expr GT expr .)
    PRINT           reduce using rule 51 (logicop -> expr GT expr .)
    WHILE           reduce using rule 51 (logicop -> expr GT expr .)
    FOR             reduce using rule 51 (logicop -> expr GT expr .)
    IF              reduce using rule 51 (logicop -> expr GT expr .)
    LBRACKET        reduce using rule 51 (logicop -> expr GT expr .)
    END             reduce using rule 51 (logicop -> expr GT expr .)
    SEMICOLON       reduce using rule 51 (logicop -> expr GT expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 51 (logicop -> expr GT expr .) ]
  ! PLUS            [ reduce using rule 51 (logicop -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 51 (logicop -> expr GT expr .) ]
  ! TIMES           [ reduce using rule 51 (logicop -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 51 (logicop -> expr GT expr .) ]
  ! MOD             [ reduce using rule 51 (logicop -> expr GT expr .) ]
  ! NOT             [ reduce using rule 51 (logicop -> expr GT expr .) ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]


state 121

    (48) mathop -> expr DIVIDE expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    PLUS            reduce using rule 48 (mathop -> expr DIVIDE expr .)
    MINUS           reduce using rule 48 (mathop -> expr DIVIDE expr .)
    TIMES           reduce using rule 48 (mathop -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 48 (mathop -> expr DIVIDE expr .)
    MOD             reduce using rule 48 (mathop -> expr DIVIDE expr .)
    LT              reduce using rule 48 (mathop -> expr DIVIDE expr .)
    GT              reduce using rule 48 (mathop -> expr DIVIDE expr .)
    LE              reduce using rule 48 (mathop -> expr DIVIDE expr .)
    GE              reduce using rule 48 (mathop -> expr DIVIDE expr .)
    EQ              reduce using rule 48 (mathop -> expr DIVIDE expr .)
    NE              reduce using rule 48 (mathop -> expr DIVIDE expr .)
    OR              reduce using rule 48 (mathop -> expr DIVIDE expr .)
    AND             reduce using rule 48 (mathop -> expr DIVIDE expr .)
    RPARENT         reduce using rule 48 (mathop -> expr DIVIDE expr .)
    COMMA           reduce using rule 48 (mathop -> expr DIVIDE expr .)
    NEWLINE         reduce using rule 48 (mathop -> expr DIVIDE expr .)
    RBRACKET        reduce using rule 48 (mathop -> expr DIVIDE expr .)
    RETURN          reduce using rule 48 (mathop -> expr DIVIDE expr .)
    PROCEDURE       reduce using rule 48 (mathop -> expr DIVIDE expr .)
    PRINT           reduce using rule 48 (mathop -> expr DIVIDE expr .)
    WHILE           reduce using rule 48 (mathop -> expr DIVIDE expr .)
    FOR             reduce using rule 48 (mathop -> expr DIVIDE expr .)
    IF              reduce using rule 48 (mathop -> expr DIVIDE expr .)
    LBRACKET        reduce using rule 48 (mathop -> expr DIVIDE expr .)
    END             reduce using rule 48 (mathop -> expr DIVIDE expr .)
    SEMICOLON       reduce using rule 48 (mathop -> expr DIVIDE expr .)
    EXP             shift and go to state 88
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 48 (mathop -> expr DIVIDE expr .) ]
  ! NOT             [ reduce using rule 48 (mathop -> expr DIVIDE expr .) ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 91 ]
  ! TIMES           [ shift and go to state 84 ]
  ! DIVIDE          [ shift and go to state 81 ]
  ! MOD             [ shift and go to state 93 ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]


state 122

    (53) logicop -> expr GE expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    RPARENT         reduce using rule 53 (logicop -> expr GE expr .)
    LT              reduce using rule 53 (logicop -> expr GE expr .)
    GT              reduce using rule 53 (logicop -> expr GE expr .)
    LE              reduce using rule 53 (logicop -> expr GE expr .)
    GE              reduce using rule 53 (logicop -> expr GE expr .)
    EQ              reduce using rule 53 (logicop -> expr GE expr .)
    NE              reduce using rule 53 (logicop -> expr GE expr .)
    OR              reduce using rule 53 (logicop -> expr GE expr .)
    AND             reduce using rule 53 (logicop -> expr GE expr .)
    COMMA           reduce using rule 53 (logicop -> expr GE expr .)
    NEWLINE         reduce using rule 53 (logicop -> expr GE expr .)
    RBRACKET        reduce using rule 53 (logicop -> expr GE expr .)
    RETURN          reduce using rule 53 (logicop -> expr GE expr .)
    PROCEDURE       reduce using rule 53 (logicop -> expr GE expr .)
    PRINT           reduce using rule 53 (logicop -> expr GE expr .)
    WHILE           reduce using rule 53 (logicop -> expr GE expr .)
    FOR             reduce using rule 53 (logicop -> expr GE expr .)
    IF              reduce using rule 53 (logicop -> expr GE expr .)
    LBRACKET        reduce using rule 53 (logicop -> expr GE expr .)
    END             reduce using rule 53 (logicop -> expr GE expr .)
    SEMICOLON       reduce using rule 53 (logicop -> expr GE expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 53 (logicop -> expr GE expr .) ]
  ! PLUS            [ reduce using rule 53 (logicop -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 53 (logicop -> expr GE expr .) ]
  ! TIMES           [ reduce using rule 53 (logicop -> expr GE expr .) ]
  ! DIVIDE          [ reduce using rule 53 (logicop -> expr GE expr .) ]
  ! MOD             [ reduce using rule 53 (logicop -> expr GE expr .) ]
  ! NOT             [ reduce using rule 53 (logicop -> expr GE expr .) ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]


state 123

    (47) mathop -> expr TIMES expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    PLUS            reduce using rule 47 (mathop -> expr TIMES expr .)
    MINUS           reduce using rule 47 (mathop -> expr TIMES expr .)
    TIMES           reduce using rule 47 (mathop -> expr TIMES expr .)
    DIVIDE          reduce using rule 47 (mathop -> expr TIMES expr .)
    MOD             reduce using rule 47 (mathop -> expr TIMES expr .)
    LT              reduce using rule 47 (mathop -> expr TIMES expr .)
    GT              reduce using rule 47 (mathop -> expr TIMES expr .)
    LE              reduce using rule 47 (mathop -> expr TIMES expr .)
    GE              reduce using rule 47 (mathop -> expr TIMES expr .)
    EQ              reduce using rule 47 (mathop -> expr TIMES expr .)
    NE              reduce using rule 47 (mathop -> expr TIMES expr .)
    OR              reduce using rule 47 (mathop -> expr TIMES expr .)
    AND             reduce using rule 47 (mathop -> expr TIMES expr .)
    RPARENT         reduce using rule 47 (mathop -> expr TIMES expr .)
    COMMA           reduce using rule 47 (mathop -> expr TIMES expr .)
    NEWLINE         reduce using rule 47 (mathop -> expr TIMES expr .)
    RBRACKET        reduce using rule 47 (mathop -> expr TIMES expr .)
    RETURN          reduce using rule 47 (mathop -> expr TIMES expr .)
    PROCEDURE       reduce using rule 47 (mathop -> expr TIMES expr .)
    PRINT           reduce using rule 47 (mathop -> expr TIMES expr .)
    WHILE           reduce using rule 47 (mathop -> expr TIMES expr .)
    FOR             reduce using rule 47 (mathop -> expr TIMES expr .)
    IF              reduce using rule 47 (mathop -> expr TIMES expr .)
    LBRACKET        reduce using rule 47 (mathop -> expr TIMES expr .)
    END             reduce using rule 47 (mathop -> expr TIMES expr .)
    SEMICOLON       reduce using rule 47 (mathop -> expr TIMES expr .)
    EXP             shift and go to state 88
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 47 (mathop -> expr TIMES expr .) ]
  ! NOT             [ reduce using rule 47 (mathop -> expr TIMES expr .) ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 91 ]
  ! TIMES           [ shift and go to state 84 ]
  ! DIVIDE          [ shift and go to state 81 ]
  ! MOD             [ shift and go to state 93 ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]


state 124

    (50) logicop -> expr LT expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    RPARENT         reduce using rule 50 (logicop -> expr LT expr .)
    LT              reduce using rule 50 (logicop -> expr LT expr .)
    GT              reduce using rule 50 (logicop -> expr LT expr .)
    LE              reduce using rule 50 (logicop -> expr LT expr .)
    GE              reduce using rule 50 (logicop -> expr LT expr .)
    EQ              reduce using rule 50 (logicop -> expr LT expr .)
    NE              reduce using rule 50 (logicop -> expr LT expr .)
    OR              reduce using rule 50 (logicop -> expr LT expr .)
    AND             reduce using rule 50 (logicop -> expr LT expr .)
    COMMA           reduce using rule 50 (logicop -> expr LT expr .)
    NEWLINE         reduce using rule 50 (logicop -> expr LT expr .)
    RBRACKET        reduce using rule 50 (logicop -> expr LT expr .)
    RETURN          reduce using rule 50 (logicop -> expr LT expr .)
    PROCEDURE       reduce using rule 50 (logicop -> expr LT expr .)
    PRINT           reduce using rule 50 (logicop -> expr LT expr .)
    WHILE           reduce using rule 50 (logicop -> expr LT expr .)
    FOR             reduce using rule 50 (logicop -> expr LT expr .)
    IF              reduce using rule 50 (logicop -> expr LT expr .)
    LBRACKET        reduce using rule 50 (logicop -> expr LT expr .)
    END             reduce using rule 50 (logicop -> expr LT expr .)
    SEMICOLON       reduce using rule 50 (logicop -> expr LT expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 50 (logicop -> expr LT expr .) ]
  ! PLUS            [ reduce using rule 50 (logicop -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 50 (logicop -> expr LT expr .) ]
  ! TIMES           [ reduce using rule 50 (logicop -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 50 (logicop -> expr LT expr .) ]
  ! MOD             [ reduce using rule 50 (logicop -> expr LT expr .) ]
  ! NOT             [ reduce using rule 50 (logicop -> expr LT expr .) ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]


state 125

    (52) logicop -> expr LE expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    RPARENT         reduce using rule 52 (logicop -> expr LE expr .)
    LT              reduce using rule 52 (logicop -> expr LE expr .)
    GT              reduce using rule 52 (logicop -> expr LE expr .)
    LE              reduce using rule 52 (logicop -> expr LE expr .)
    GE              reduce using rule 52 (logicop -> expr LE expr .)
    EQ              reduce using rule 52 (logicop -> expr LE expr .)
    NE              reduce using rule 52 (logicop -> expr LE expr .)
    OR              reduce using rule 52 (logicop -> expr LE expr .)
    AND             reduce using rule 52 (logicop -> expr LE expr .)
    COMMA           reduce using rule 52 (logicop -> expr LE expr .)
    NEWLINE         reduce using rule 52 (logicop -> expr LE expr .)
    RBRACKET        reduce using rule 52 (logicop -> expr LE expr .)
    RETURN          reduce using rule 52 (logicop -> expr LE expr .)
    PROCEDURE       reduce using rule 52 (logicop -> expr LE expr .)
    PRINT           reduce using rule 52 (logicop -> expr LE expr .)
    WHILE           reduce using rule 52 (logicop -> expr LE expr .)
    FOR             reduce using rule 52 (logicop -> expr LE expr .)
    IF              reduce using rule 52 (logicop -> expr LE expr .)
    LBRACKET        reduce using rule 52 (logicop -> expr LE expr .)
    END             reduce using rule 52 (logicop -> expr LE expr .)
    SEMICOLON       reduce using rule 52 (logicop -> expr LE expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 52 (logicop -> expr LE expr .) ]
  ! PLUS            [ reduce using rule 52 (logicop -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 52 (logicop -> expr LE expr .) ]
  ! TIMES           [ reduce using rule 52 (logicop -> expr LE expr .) ]
  ! DIVIDE          [ reduce using rule 52 (logicop -> expr LE expr .) ]
  ! MOD             [ reduce using rule 52 (logicop -> expr LE expr .) ]
  ! NOT             [ reduce using rule 52 (logicop -> expr LE expr .) ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]


state 126

    (45) mathop -> expr PLUS expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    PLUS            reduce using rule 45 (mathop -> expr PLUS expr .)
    MINUS           reduce using rule 45 (mathop -> expr PLUS expr .)
    LT              reduce using rule 45 (mathop -> expr PLUS expr .)
    GT              reduce using rule 45 (mathop -> expr PLUS expr .)
    LE              reduce using rule 45 (mathop -> expr PLUS expr .)
    GE              reduce using rule 45 (mathop -> expr PLUS expr .)
    EQ              reduce using rule 45 (mathop -> expr PLUS expr .)
    NE              reduce using rule 45 (mathop -> expr PLUS expr .)
    OR              reduce using rule 45 (mathop -> expr PLUS expr .)
    AND             reduce using rule 45 (mathop -> expr PLUS expr .)
    RPARENT         reduce using rule 45 (mathop -> expr PLUS expr .)
    COMMA           reduce using rule 45 (mathop -> expr PLUS expr .)
    NEWLINE         reduce using rule 45 (mathop -> expr PLUS expr .)
    RBRACKET        reduce using rule 45 (mathop -> expr PLUS expr .)
    RETURN          reduce using rule 45 (mathop -> expr PLUS expr .)
    PROCEDURE       reduce using rule 45 (mathop -> expr PLUS expr .)
    PRINT           reduce using rule 45 (mathop -> expr PLUS expr .)
    WHILE           reduce using rule 45 (mathop -> expr PLUS expr .)
    FOR             reduce using rule 45 (mathop -> expr PLUS expr .)
    IF              reduce using rule 45 (mathop -> expr PLUS expr .)
    LBRACKET        reduce using rule 45 (mathop -> expr PLUS expr .)
    END             reduce using rule 45 (mathop -> expr PLUS expr .)
    SEMICOLON       reduce using rule 45 (mathop -> expr PLUS expr .)
    EXP             shift and go to state 88
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 45 (mathop -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 45 (mathop -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 45 (mathop -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 45 (mathop -> expr PLUS expr .) ]
  ! NOT             [ reduce using rule 45 (mathop -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 91 ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]


state 127

    (44) mathop -> expr EXP expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    EXP             reduce using rule 44 (mathop -> expr EXP expr .)
    PLUS            reduce using rule 44 (mathop -> expr EXP expr .)
    MINUS           reduce using rule 44 (mathop -> expr EXP expr .)
    TIMES           reduce using rule 44 (mathop -> expr EXP expr .)
    DIVIDE          reduce using rule 44 (mathop -> expr EXP expr .)
    MOD             reduce using rule 44 (mathop -> expr EXP expr .)
    LT              reduce using rule 44 (mathop -> expr EXP expr .)
    GT              reduce using rule 44 (mathop -> expr EXP expr .)
    LE              reduce using rule 44 (mathop -> expr EXP expr .)
    GE              reduce using rule 44 (mathop -> expr EXP expr .)
    EQ              reduce using rule 44 (mathop -> expr EXP expr .)
    NE              reduce using rule 44 (mathop -> expr EXP expr .)
    OR              reduce using rule 44 (mathop -> expr EXP expr .)
    AND             reduce using rule 44 (mathop -> expr EXP expr .)
    NOT             reduce using rule 44 (mathop -> expr EXP expr .)
    RPARENT         reduce using rule 44 (mathop -> expr EXP expr .)
    COMMA           reduce using rule 44 (mathop -> expr EXP expr .)
    NEWLINE         reduce using rule 44 (mathop -> expr EXP expr .)
    RBRACKET        reduce using rule 44 (mathop -> expr EXP expr .)
    RETURN          reduce using rule 44 (mathop -> expr EXP expr .)
    PROCEDURE       reduce using rule 44 (mathop -> expr EXP expr .)
    PRINT           reduce using rule 44 (mathop -> expr EXP expr .)
    WHILE           reduce using rule 44 (mathop -> expr EXP expr .)
    FOR             reduce using rule 44 (mathop -> expr EXP expr .)
    IF              reduce using rule 44 (mathop -> expr EXP expr .)
    LBRACKET        reduce using rule 44 (mathop -> expr EXP expr .)
    END             reduce using rule 44 (mathop -> expr EXP expr .)
    SEMICOLON       reduce using rule 44 (mathop -> expr EXP expr .)

  ! EXP             [ shift and go to state 88 ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 91 ]
  ! TIMES           [ shift and go to state 84 ]
  ! DIVIDE          [ shift and go to state 81 ]
  ! MOD             [ shift and go to state 93 ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]
  ! NOT             [ shift and go to state 89 ]


state 128

    (58) logicop -> expr NOT expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    RPARENT         reduce using rule 58 (logicop -> expr NOT expr .)
    PLUS            reduce using rule 58 (logicop -> expr NOT expr .)
    MINUS           reduce using rule 58 (logicop -> expr NOT expr .)
    TIMES           reduce using rule 58 (logicop -> expr NOT expr .)
    DIVIDE          reduce using rule 58 (logicop -> expr NOT expr .)
    MOD             reduce using rule 58 (logicop -> expr NOT expr .)
    LT              reduce using rule 58 (logicop -> expr NOT expr .)
    GT              reduce using rule 58 (logicop -> expr NOT expr .)
    LE              reduce using rule 58 (logicop -> expr NOT expr .)
    GE              reduce using rule 58 (logicop -> expr NOT expr .)
    EQ              reduce using rule 58 (logicop -> expr NOT expr .)
    NE              reduce using rule 58 (logicop -> expr NOT expr .)
    OR              reduce using rule 58 (logicop -> expr NOT expr .)
    AND             reduce using rule 58 (logicop -> expr NOT expr .)
    NOT             reduce using rule 58 (logicop -> expr NOT expr .)
    COMMA           reduce using rule 58 (logicop -> expr NOT expr .)
    NEWLINE         reduce using rule 58 (logicop -> expr NOT expr .)
    RBRACKET        reduce using rule 58 (logicop -> expr NOT expr .)
    RETURN          reduce using rule 58 (logicop -> expr NOT expr .)
    PROCEDURE       reduce using rule 58 (logicop -> expr NOT expr .)
    PRINT           reduce using rule 58 (logicop -> expr NOT expr .)
    WHILE           reduce using rule 58 (logicop -> expr NOT expr .)
    FOR             reduce using rule 58 (logicop -> expr NOT expr .)
    IF              reduce using rule 58 (logicop -> expr NOT expr .)
    LBRACKET        reduce using rule 58 (logicop -> expr NOT expr .)
    END             reduce using rule 58 (logicop -> expr NOT expr .)
    SEMICOLON       reduce using rule 58 (logicop -> expr NOT expr .)
    EXP             shift and go to state 88

  ! EXP             [ reduce using rule 58 (logicop -> expr NOT expr .) ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 91 ]
  ! TIMES           [ shift and go to state 84 ]
  ! DIVIDE          [ shift and go to state 81 ]
  ! MOD             [ shift and go to state 93 ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]
  ! NOT             [ shift and go to state 89 ]


state 129

    (54) logicop -> expr EQ expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    RPARENT         reduce using rule 54 (logicop -> expr EQ expr .)
    LT              reduce using rule 54 (logicop -> expr EQ expr .)
    GT              reduce using rule 54 (logicop -> expr EQ expr .)
    LE              reduce using rule 54 (logicop -> expr EQ expr .)
    GE              reduce using rule 54 (logicop -> expr EQ expr .)
    EQ              reduce using rule 54 (logicop -> expr EQ expr .)
    NE              reduce using rule 54 (logicop -> expr EQ expr .)
    OR              reduce using rule 54 (logicop -> expr EQ expr .)
    AND             reduce using rule 54 (logicop -> expr EQ expr .)
    COMMA           reduce using rule 54 (logicop -> expr EQ expr .)
    NEWLINE         reduce using rule 54 (logicop -> expr EQ expr .)
    RBRACKET        reduce using rule 54 (logicop -> expr EQ expr .)
    RETURN          reduce using rule 54 (logicop -> expr EQ expr .)
    PROCEDURE       reduce using rule 54 (logicop -> expr EQ expr .)
    PRINT           reduce using rule 54 (logicop -> expr EQ expr .)
    WHILE           reduce using rule 54 (logicop -> expr EQ expr .)
    FOR             reduce using rule 54 (logicop -> expr EQ expr .)
    IF              reduce using rule 54 (logicop -> expr EQ expr .)
    LBRACKET        reduce using rule 54 (logicop -> expr EQ expr .)
    END             reduce using rule 54 (logicop -> expr EQ expr .)
    SEMICOLON       reduce using rule 54 (logicop -> expr EQ expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 54 (logicop -> expr EQ expr .) ]
  ! PLUS            [ reduce using rule 54 (logicop -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 54 (logicop -> expr EQ expr .) ]
  ! TIMES           [ reduce using rule 54 (logicop -> expr EQ expr .) ]
  ! DIVIDE          [ reduce using rule 54 (logicop -> expr EQ expr .) ]
  ! MOD             [ reduce using rule 54 (logicop -> expr EQ expr .) ]
  ! NOT             [ reduce using rule 54 (logicop -> expr EQ expr .) ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]


state 130

    (46) mathop -> expr MINUS expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    PLUS            reduce using rule 46 (mathop -> expr MINUS expr .)
    MINUS           reduce using rule 46 (mathop -> expr MINUS expr .)
    LT              reduce using rule 46 (mathop -> expr MINUS expr .)
    GT              reduce using rule 46 (mathop -> expr MINUS expr .)
    LE              reduce using rule 46 (mathop -> expr MINUS expr .)
    GE              reduce using rule 46 (mathop -> expr MINUS expr .)
    EQ              reduce using rule 46 (mathop -> expr MINUS expr .)
    NE              reduce using rule 46 (mathop -> expr MINUS expr .)
    OR              reduce using rule 46 (mathop -> expr MINUS expr .)
    AND             reduce using rule 46 (mathop -> expr MINUS expr .)
    RPARENT         reduce using rule 46 (mathop -> expr MINUS expr .)
    COMMA           reduce using rule 46 (mathop -> expr MINUS expr .)
    NEWLINE         reduce using rule 46 (mathop -> expr MINUS expr .)
    RBRACKET        reduce using rule 46 (mathop -> expr MINUS expr .)
    RETURN          reduce using rule 46 (mathop -> expr MINUS expr .)
    PROCEDURE       reduce using rule 46 (mathop -> expr MINUS expr .)
    PRINT           reduce using rule 46 (mathop -> expr MINUS expr .)
    WHILE           reduce using rule 46 (mathop -> expr MINUS expr .)
    FOR             reduce using rule 46 (mathop -> expr MINUS expr .)
    IF              reduce using rule 46 (mathop -> expr MINUS expr .)
    LBRACKET        reduce using rule 46 (mathop -> expr MINUS expr .)
    END             reduce using rule 46 (mathop -> expr MINUS expr .)
    SEMICOLON       reduce using rule 46 (mathop -> expr MINUS expr .)
    EXP             shift and go to state 88
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 46 (mathop -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 46 (mathop -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 46 (mathop -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 46 (mathop -> expr MINUS expr .) ]
  ! NOT             [ reduce using rule 46 (mathop -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 91 ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]


state 131

    (55) logicop -> expr NE expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    RPARENT         reduce using rule 55 (logicop -> expr NE expr .)
    LT              reduce using rule 55 (logicop -> expr NE expr .)
    GT              reduce using rule 55 (logicop -> expr NE expr .)
    LE              reduce using rule 55 (logicop -> expr NE expr .)
    GE              reduce using rule 55 (logicop -> expr NE expr .)
    EQ              reduce using rule 55 (logicop -> expr NE expr .)
    NE              reduce using rule 55 (logicop -> expr NE expr .)
    OR              reduce using rule 55 (logicop -> expr NE expr .)
    AND             reduce using rule 55 (logicop -> expr NE expr .)
    COMMA           reduce using rule 55 (logicop -> expr NE expr .)
    NEWLINE         reduce using rule 55 (logicop -> expr NE expr .)
    RBRACKET        reduce using rule 55 (logicop -> expr NE expr .)
    RETURN          reduce using rule 55 (logicop -> expr NE expr .)
    PROCEDURE       reduce using rule 55 (logicop -> expr NE expr .)
    PRINT           reduce using rule 55 (logicop -> expr NE expr .)
    WHILE           reduce using rule 55 (logicop -> expr NE expr .)
    FOR             reduce using rule 55 (logicop -> expr NE expr .)
    IF              reduce using rule 55 (logicop -> expr NE expr .)
    LBRACKET        reduce using rule 55 (logicop -> expr NE expr .)
    END             reduce using rule 55 (logicop -> expr NE expr .)
    SEMICOLON       reduce using rule 55 (logicop -> expr NE expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 55 (logicop -> expr NE expr .) ]
  ! PLUS            [ reduce using rule 55 (logicop -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 55 (logicop -> expr NE expr .) ]
  ! TIMES           [ reduce using rule 55 (logicop -> expr NE expr .) ]
  ! DIVIDE          [ reduce using rule 55 (logicop -> expr NE expr .) ]
  ! MOD             [ reduce using rule 55 (logicop -> expr NE expr .) ]
  ! NOT             [ reduce using rule 55 (logicop -> expr NE expr .) ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]


state 132

    (49) mathop -> expr MOD expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    PLUS            reduce using rule 49 (mathop -> expr MOD expr .)
    MINUS           reduce using rule 49 (mathop -> expr MOD expr .)
    TIMES           reduce using rule 49 (mathop -> expr MOD expr .)
    DIVIDE          reduce using rule 49 (mathop -> expr MOD expr .)
    MOD             reduce using rule 49 (mathop -> expr MOD expr .)
    LT              reduce using rule 49 (mathop -> expr MOD expr .)
    GT              reduce using rule 49 (mathop -> expr MOD expr .)
    LE              reduce using rule 49 (mathop -> expr MOD expr .)
    GE              reduce using rule 49 (mathop -> expr MOD expr .)
    EQ              reduce using rule 49 (mathop -> expr MOD expr .)
    NE              reduce using rule 49 (mathop -> expr MOD expr .)
    OR              reduce using rule 49 (mathop -> expr MOD expr .)
    AND             reduce using rule 49 (mathop -> expr MOD expr .)
    RPARENT         reduce using rule 49 (mathop -> expr MOD expr .)
    COMMA           reduce using rule 49 (mathop -> expr MOD expr .)
    NEWLINE         reduce using rule 49 (mathop -> expr MOD expr .)
    RBRACKET        reduce using rule 49 (mathop -> expr MOD expr .)
    RETURN          reduce using rule 49 (mathop -> expr MOD expr .)
    PROCEDURE       reduce using rule 49 (mathop -> expr MOD expr .)
    PRINT           reduce using rule 49 (mathop -> expr MOD expr .)
    WHILE           reduce using rule 49 (mathop -> expr MOD expr .)
    FOR             reduce using rule 49 (mathop -> expr MOD expr .)
    IF              reduce using rule 49 (mathop -> expr MOD expr .)
    LBRACKET        reduce using rule 49 (mathop -> expr MOD expr .)
    END             reduce using rule 49 (mathop -> expr MOD expr .)
    SEMICOLON       reduce using rule 49 (mathop -> expr MOD expr .)
    EXP             shift and go to state 88
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 49 (mathop -> expr MOD expr .) ]
  ! NOT             [ reduce using rule 49 (mathop -> expr MOD expr .) ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 91 ]
  ! TIMES           [ shift and go to state 84 ]
  ! DIVIDE          [ shift and go to state 81 ]
  ! MOD             [ shift and go to state 93 ]
  ! LT              [ shift and go to state 85 ]
  ! GT              [ shift and go to state 80 ]
  ! LE              [ shift and go to state 86 ]
  ! GE              [ shift and go to state 83 ]
  ! EQ              [ shift and go to state 90 ]
  ! NE              [ shift and go to state 92 ]
  ! OR              [ shift and go to state 79 ]
  ! AND             [ shift and go to state 78 ]


state 133

    (60) callfunc -> ID LPARENT expr . RPARENT
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    RPARENT         shift and go to state 152
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89


state 134

    (43) asgn -> ID MODEQ expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    NEWLINE         reduce using rule 43 (asgn -> ID MODEQ expr .)
    RBRACKET        reduce using rule 43 (asgn -> ID MODEQ expr .)
    RETURN          reduce using rule 43 (asgn -> ID MODEQ expr .)
    PROCEDURE       reduce using rule 43 (asgn -> ID MODEQ expr .)
    PRINT           reduce using rule 43 (asgn -> ID MODEQ expr .)
    WHILE           reduce using rule 43 (asgn -> ID MODEQ expr .)
    FOR             reduce using rule 43 (asgn -> ID MODEQ expr .)
    IF              reduce using rule 43 (asgn -> ID MODEQ expr .)
    LBRACKET        reduce using rule 43 (asgn -> ID MODEQ expr .)
    END             reduce using rule 43 (asgn -> ID MODEQ expr .)
    COMMA           reduce using rule 43 (asgn -> ID MODEQ expr .)
    RPARENT         reduce using rule 43 (asgn -> ID MODEQ expr .)
    SEMICOLON       reduce using rule 43 (asgn -> ID MODEQ expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 43 (asgn -> ID MODEQ expr .) ]
  ! PLUS            [ reduce using rule 43 (asgn -> ID MODEQ expr .) ]
  ! MINUS           [ reduce using rule 43 (asgn -> ID MODEQ expr .) ]
  ! TIMES           [ reduce using rule 43 (asgn -> ID MODEQ expr .) ]
  ! DIVIDE          [ reduce using rule 43 (asgn -> ID MODEQ expr .) ]
  ! MOD             [ reduce using rule 43 (asgn -> ID MODEQ expr .) ]
  ! LT              [ reduce using rule 43 (asgn -> ID MODEQ expr .) ]
  ! GT              [ reduce using rule 43 (asgn -> ID MODEQ expr .) ]
  ! LE              [ reduce using rule 43 (asgn -> ID MODEQ expr .) ]
  ! GE              [ reduce using rule 43 (asgn -> ID MODEQ expr .) ]
  ! EQ              [ reduce using rule 43 (asgn -> ID MODEQ expr .) ]
  ! NE              [ reduce using rule 43 (asgn -> ID MODEQ expr .) ]
  ! OR              [ reduce using rule 43 (asgn -> ID MODEQ expr .) ]
  ! AND             [ reduce using rule 43 (asgn -> ID MODEQ expr .) ]
  ! NOT             [ reduce using rule 43 (asgn -> ID MODEQ expr .) ]


state 135

    (38) asgn -> ID ASSIGN expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    NEWLINE         reduce using rule 38 (asgn -> ID ASSIGN expr .)
    RBRACKET        reduce using rule 38 (asgn -> ID ASSIGN expr .)
    RETURN          reduce using rule 38 (asgn -> ID ASSIGN expr .)
    PROCEDURE       reduce using rule 38 (asgn -> ID ASSIGN expr .)
    PRINT           reduce using rule 38 (asgn -> ID ASSIGN expr .)
    WHILE           reduce using rule 38 (asgn -> ID ASSIGN expr .)
    FOR             reduce using rule 38 (asgn -> ID ASSIGN expr .)
    IF              reduce using rule 38 (asgn -> ID ASSIGN expr .)
    LBRACKET        reduce using rule 38 (asgn -> ID ASSIGN expr .)
    END             reduce using rule 38 (asgn -> ID ASSIGN expr .)
    COMMA           reduce using rule 38 (asgn -> ID ASSIGN expr .)
    RPARENT         reduce using rule 38 (asgn -> ID ASSIGN expr .)
    SEMICOLON       reduce using rule 38 (asgn -> ID ASSIGN expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 38 (asgn -> ID ASSIGN expr .) ]
  ! PLUS            [ reduce using rule 38 (asgn -> ID ASSIGN expr .) ]
  ! MINUS           [ reduce using rule 38 (asgn -> ID ASSIGN expr .) ]
  ! TIMES           [ reduce using rule 38 (asgn -> ID ASSIGN expr .) ]
  ! DIVIDE          [ reduce using rule 38 (asgn -> ID ASSIGN expr .) ]
  ! MOD             [ reduce using rule 38 (asgn -> ID ASSIGN expr .) ]
  ! LT              [ reduce using rule 38 (asgn -> ID ASSIGN expr .) ]
  ! GT              [ reduce using rule 38 (asgn -> ID ASSIGN expr .) ]
  ! LE              [ reduce using rule 38 (asgn -> ID ASSIGN expr .) ]
  ! GE              [ reduce using rule 38 (asgn -> ID ASSIGN expr .) ]
  ! EQ              [ reduce using rule 38 (asgn -> ID ASSIGN expr .) ]
  ! NE              [ reduce using rule 38 (asgn -> ID ASSIGN expr .) ]
  ! OR              [ reduce using rule 38 (asgn -> ID ASSIGN expr .) ]
  ! AND             [ reduce using rule 38 (asgn -> ID ASSIGN expr .) ]
  ! NOT             [ reduce using rule 38 (asgn -> ID ASSIGN expr .) ]


state 136

    (40) asgn -> ID SUBEQ expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    NEWLINE         reduce using rule 40 (asgn -> ID SUBEQ expr .)
    RBRACKET        reduce using rule 40 (asgn -> ID SUBEQ expr .)
    RETURN          reduce using rule 40 (asgn -> ID SUBEQ expr .)
    PROCEDURE       reduce using rule 40 (asgn -> ID SUBEQ expr .)
    PRINT           reduce using rule 40 (asgn -> ID SUBEQ expr .)
    WHILE           reduce using rule 40 (asgn -> ID SUBEQ expr .)
    FOR             reduce using rule 40 (asgn -> ID SUBEQ expr .)
    IF              reduce using rule 40 (asgn -> ID SUBEQ expr .)
    LBRACKET        reduce using rule 40 (asgn -> ID SUBEQ expr .)
    END             reduce using rule 40 (asgn -> ID SUBEQ expr .)
    COMMA           reduce using rule 40 (asgn -> ID SUBEQ expr .)
    RPARENT         reduce using rule 40 (asgn -> ID SUBEQ expr .)
    SEMICOLON       reduce using rule 40 (asgn -> ID SUBEQ expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 40 (asgn -> ID SUBEQ expr .) ]
  ! PLUS            [ reduce using rule 40 (asgn -> ID SUBEQ expr .) ]
  ! MINUS           [ reduce using rule 40 (asgn -> ID SUBEQ expr .) ]
  ! TIMES           [ reduce using rule 40 (asgn -> ID SUBEQ expr .) ]
  ! DIVIDE          [ reduce using rule 40 (asgn -> ID SUBEQ expr .) ]
  ! MOD             [ reduce using rule 40 (asgn -> ID SUBEQ expr .) ]
  ! LT              [ reduce using rule 40 (asgn -> ID SUBEQ expr .) ]
  ! GT              [ reduce using rule 40 (asgn -> ID SUBEQ expr .) ]
  ! LE              [ reduce using rule 40 (asgn -> ID SUBEQ expr .) ]
  ! GE              [ reduce using rule 40 (asgn -> ID SUBEQ expr .) ]
  ! EQ              [ reduce using rule 40 (asgn -> ID SUBEQ expr .) ]
  ! NE              [ reduce using rule 40 (asgn -> ID SUBEQ expr .) ]
  ! OR              [ reduce using rule 40 (asgn -> ID SUBEQ expr .) ]
  ! AND             [ reduce using rule 40 (asgn -> ID SUBEQ expr .) ]
  ! NOT             [ reduce using rule 40 (asgn -> ID SUBEQ expr .) ]


state 137

    (39) asgn -> ID ADDEQ expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    NEWLINE         reduce using rule 39 (asgn -> ID ADDEQ expr .)
    RBRACKET        reduce using rule 39 (asgn -> ID ADDEQ expr .)
    RETURN          reduce using rule 39 (asgn -> ID ADDEQ expr .)
    PROCEDURE       reduce using rule 39 (asgn -> ID ADDEQ expr .)
    PRINT           reduce using rule 39 (asgn -> ID ADDEQ expr .)
    WHILE           reduce using rule 39 (asgn -> ID ADDEQ expr .)
    FOR             reduce using rule 39 (asgn -> ID ADDEQ expr .)
    IF              reduce using rule 39 (asgn -> ID ADDEQ expr .)
    LBRACKET        reduce using rule 39 (asgn -> ID ADDEQ expr .)
    END             reduce using rule 39 (asgn -> ID ADDEQ expr .)
    COMMA           reduce using rule 39 (asgn -> ID ADDEQ expr .)
    RPARENT         reduce using rule 39 (asgn -> ID ADDEQ expr .)
    SEMICOLON       reduce using rule 39 (asgn -> ID ADDEQ expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 39 (asgn -> ID ADDEQ expr .) ]
  ! PLUS            [ reduce using rule 39 (asgn -> ID ADDEQ expr .) ]
  ! MINUS           [ reduce using rule 39 (asgn -> ID ADDEQ expr .) ]
  ! TIMES           [ reduce using rule 39 (asgn -> ID ADDEQ expr .) ]
  ! DIVIDE          [ reduce using rule 39 (asgn -> ID ADDEQ expr .) ]
  ! MOD             [ reduce using rule 39 (asgn -> ID ADDEQ expr .) ]
  ! LT              [ reduce using rule 39 (asgn -> ID ADDEQ expr .) ]
  ! GT              [ reduce using rule 39 (asgn -> ID ADDEQ expr .) ]
  ! LE              [ reduce using rule 39 (asgn -> ID ADDEQ expr .) ]
  ! GE              [ reduce using rule 39 (asgn -> ID ADDEQ expr .) ]
  ! EQ              [ reduce using rule 39 (asgn -> ID ADDEQ expr .) ]
  ! NE              [ reduce using rule 39 (asgn -> ID ADDEQ expr .) ]
  ! OR              [ reduce using rule 39 (asgn -> ID ADDEQ expr .) ]
  ! AND             [ reduce using rule 39 (asgn -> ID ADDEQ expr .) ]
  ! NOT             [ reduce using rule 39 (asgn -> ID ADDEQ expr .) ]


state 138

    (41) asgn -> ID MULEQ expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    NEWLINE         reduce using rule 41 (asgn -> ID MULEQ expr .)
    RBRACKET        reduce using rule 41 (asgn -> ID MULEQ expr .)
    RETURN          reduce using rule 41 (asgn -> ID MULEQ expr .)
    PROCEDURE       reduce using rule 41 (asgn -> ID MULEQ expr .)
    PRINT           reduce using rule 41 (asgn -> ID MULEQ expr .)
    WHILE           reduce using rule 41 (asgn -> ID MULEQ expr .)
    FOR             reduce using rule 41 (asgn -> ID MULEQ expr .)
    IF              reduce using rule 41 (asgn -> ID MULEQ expr .)
    LBRACKET        reduce using rule 41 (asgn -> ID MULEQ expr .)
    END             reduce using rule 41 (asgn -> ID MULEQ expr .)
    COMMA           reduce using rule 41 (asgn -> ID MULEQ expr .)
    RPARENT         reduce using rule 41 (asgn -> ID MULEQ expr .)
    SEMICOLON       reduce using rule 41 (asgn -> ID MULEQ expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 41 (asgn -> ID MULEQ expr .) ]
  ! PLUS            [ reduce using rule 41 (asgn -> ID MULEQ expr .) ]
  ! MINUS           [ reduce using rule 41 (asgn -> ID MULEQ expr .) ]
  ! TIMES           [ reduce using rule 41 (asgn -> ID MULEQ expr .) ]
  ! DIVIDE          [ reduce using rule 41 (asgn -> ID MULEQ expr .) ]
  ! MOD             [ reduce using rule 41 (asgn -> ID MULEQ expr .) ]
  ! LT              [ reduce using rule 41 (asgn -> ID MULEQ expr .) ]
  ! GT              [ reduce using rule 41 (asgn -> ID MULEQ expr .) ]
  ! LE              [ reduce using rule 41 (asgn -> ID MULEQ expr .) ]
  ! GE              [ reduce using rule 41 (asgn -> ID MULEQ expr .) ]
  ! EQ              [ reduce using rule 41 (asgn -> ID MULEQ expr .) ]
  ! NE              [ reduce using rule 41 (asgn -> ID MULEQ expr .) ]
  ! OR              [ reduce using rule 41 (asgn -> ID MULEQ expr .) ]
  ! AND             [ reduce using rule 41 (asgn -> ID MULEQ expr .) ]
  ! NOT             [ reduce using rule 41 (asgn -> ID MULEQ expr .) ]


state 139

    (42) asgn -> ID DIVEQ expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    NEWLINE         reduce using rule 42 (asgn -> ID DIVEQ expr .)
    RBRACKET        reduce using rule 42 (asgn -> ID DIVEQ expr .)
    RETURN          reduce using rule 42 (asgn -> ID DIVEQ expr .)
    PROCEDURE       reduce using rule 42 (asgn -> ID DIVEQ expr .)
    PRINT           reduce using rule 42 (asgn -> ID DIVEQ expr .)
    WHILE           reduce using rule 42 (asgn -> ID DIVEQ expr .)
    FOR             reduce using rule 42 (asgn -> ID DIVEQ expr .)
    IF              reduce using rule 42 (asgn -> ID DIVEQ expr .)
    LBRACKET        reduce using rule 42 (asgn -> ID DIVEQ expr .)
    END             reduce using rule 42 (asgn -> ID DIVEQ expr .)
    COMMA           reduce using rule 42 (asgn -> ID DIVEQ expr .)
    RPARENT         reduce using rule 42 (asgn -> ID DIVEQ expr .)
    SEMICOLON       reduce using rule 42 (asgn -> ID DIVEQ expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89

  ! EXP             [ reduce using rule 42 (asgn -> ID DIVEQ expr .) ]
  ! PLUS            [ reduce using rule 42 (asgn -> ID DIVEQ expr .) ]
  ! MINUS           [ reduce using rule 42 (asgn -> ID DIVEQ expr .) ]
  ! TIMES           [ reduce using rule 42 (asgn -> ID DIVEQ expr .) ]
  ! DIVIDE          [ reduce using rule 42 (asgn -> ID DIVEQ expr .) ]
  ! MOD             [ reduce using rule 42 (asgn -> ID DIVEQ expr .) ]
  ! LT              [ reduce using rule 42 (asgn -> ID DIVEQ expr .) ]
  ! GT              [ reduce using rule 42 (asgn -> ID DIVEQ expr .) ]
  ! LE              [ reduce using rule 42 (asgn -> ID DIVEQ expr .) ]
  ! GE              [ reduce using rule 42 (asgn -> ID DIVEQ expr .) ]
  ! EQ              [ reduce using rule 42 (asgn -> ID DIVEQ expr .) ]
  ! NE              [ reduce using rule 42 (asgn -> ID DIVEQ expr .) ]
  ! OR              [ reduce using rule 42 (asgn -> ID DIVEQ expr .) ]
  ! AND             [ reduce using rule 42 (asgn -> ID DIVEQ expr .) ]
  ! NOT             [ reduce using rule 42 (asgn -> ID DIVEQ expr .) ]


state 140

    (15) stmt -> IF LPARENT cond . RPARENT stmt END
    (16) stmt -> IF LPARENT cond . RPARENT stmt END ELSE stmt END

    RPARENT         shift and go to state 153


state 141

    (11) stmt -> PROCEDURE BEGIN LPARENT arglist . RPARENT
    (75) arglist -> arglist . COMMA expr

    RPARENT         shift and go to state 155
    COMMA           shift and go to state 154


state 142

    (73) arglist -> empty .

    RPARENT         reduce using rule 73 (arglist -> empty .)
    COMMA           reduce using rule 73 (arglist -> empty .)


state 143

    (74) arglist -> expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    RPARENT         reduce using rule 74 (arglist -> expr .)
    COMMA           reduce using rule 74 (arglist -> expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89


state 144

    (59) callfunc -> bltin LPARENT expr RPARENT .

    EXP             reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)
    PLUS            reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)
    MINUS           reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)
    TIMES           reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)
    DIVIDE          reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)
    MOD             reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)
    LT              reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)
    GT              reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)
    LE              reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)
    GE              reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)
    EQ              reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)
    NE              reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)
    OR              reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)
    AND             reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)
    NOT             reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)
    NEWLINE         reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)
    RBRACKET        reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)
    RETURN          reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)
    PROCEDURE       reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)
    PRINT           reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)
    WHILE           reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)
    FOR             reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)
    IF              reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)
    LBRACKET        reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)
    END             reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)
    COMMA           reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)
    RPARENT         reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)
    SEMICOLON       reduce using rule 59 (callfunc -> bltin LPARENT expr RPARENT .)


state 145

    (64) prlist -> prlist COMMA STRING .

    COMMA           reduce using rule 64 (prlist -> prlist COMMA STRING .)
    NEWLINE         reduce using rule 64 (prlist -> prlist COMMA STRING .)
    RBRACKET        reduce using rule 64 (prlist -> prlist COMMA STRING .)
    RETURN          reduce using rule 64 (prlist -> prlist COMMA STRING .)
    PROCEDURE       reduce using rule 64 (prlist -> prlist COMMA STRING .)
    PRINT           reduce using rule 64 (prlist -> prlist COMMA STRING .)
    WHILE           reduce using rule 64 (prlist -> prlist COMMA STRING .)
    FOR             reduce using rule 64 (prlist -> prlist COMMA STRING .)
    IF              reduce using rule 64 (prlist -> prlist COMMA STRING .)
    LBRACKET        reduce using rule 64 (prlist -> prlist COMMA STRING .)
    END             reduce using rule 64 (prlist -> prlist COMMA STRING .)


state 146

    (63) prlist -> prlist COMMA expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    COMMA           reduce using rule 63 (prlist -> prlist COMMA expr .)
    NEWLINE         reduce using rule 63 (prlist -> prlist COMMA expr .)
    RBRACKET        reduce using rule 63 (prlist -> prlist COMMA expr .)
    RETURN          reduce using rule 63 (prlist -> prlist COMMA expr .)
    PROCEDURE       reduce using rule 63 (prlist -> prlist COMMA expr .)
    PRINT           reduce using rule 63 (prlist -> prlist COMMA expr .)
    WHILE           reduce using rule 63 (prlist -> prlist COMMA expr .)
    FOR             reduce using rule 63 (prlist -> prlist COMMA expr .)
    IF              reduce using rule 63 (prlist -> prlist COMMA expr .)
    LBRACKET        reduce using rule 63 (prlist -> prlist COMMA expr .)
    END             reduce using rule 63 (prlist -> prlist COMMA expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89


state 147

    (14) stmt -> FOR LPARENT cond SEMICOLON . cond SEMICOLON cond RPARENT stmt END
    (18) cond -> . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 113
    callfunc                       shift and go to state 39
    asgn                           shift and go to state 7
    cond                           shift and go to state 156
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50
    bltin                          shift and go to state 12

state 148

    (67) formals -> ID .
    (68) formals -> ID . COMMA formals

    RPARENT         reduce using rule 67 (formals -> ID .)
    COMMA           shift and go to state 157


state 149

    (65) defn -> FUNC procname LPARENT formals . RPARENT

    RPARENT         shift and go to state 158


state 150

    (66) defn -> PROC procname LPARENT formals . RPARENT

    RPARENT         shift and go to state 159


state 151

    (13) stmt -> WHILE LPARENT cond RPARENT . stmt END
    (9) stmt -> . RETURN
    (10) stmt -> . RETURN expr
    (11) stmt -> . PROCEDURE BEGIN LPARENT arglist RPARENT
    (12) stmt -> . PRINT prlist
    (13) stmt -> . WHILE LPARENT cond RPARENT stmt END
    (14) stmt -> . FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END
    (15) stmt -> . IF LPARENT cond RPARENT stmt END
    (16) stmt -> . IF LPARENT cond RPARENT stmt END ELSE stmt END
    (17) stmt -> . LBRACKET stmtlist RBRACKET

    RETURN          shift and go to state 13
    PROCEDURE       shift and go to state 10
    PRINT           shift and go to state 14
    WHILE           shift and go to state 32
    FOR             shift and go to state 23
    IF              shift and go to state 52
    LBRACKET        shift and go to state 4

    stmt                           shift and go to state 160

state 152

    (60) callfunc -> ID LPARENT expr RPARENT .

    EXP             reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)
    PLUS            reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)
    MINUS           reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)
    TIMES           reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)
    DIVIDE          reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)
    MOD             reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)
    LT              reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)
    GT              reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)
    LE              reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)
    GE              reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)
    EQ              reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)
    NE              reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)
    OR              reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)
    AND             reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)
    NOT             reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)
    NEWLINE         reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)
    RBRACKET        reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)
    RETURN          reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)
    PROCEDURE       reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)
    PRINT           reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)
    WHILE           reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)
    FOR             reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)
    IF              reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)
    LBRACKET        reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)
    END             reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)
    COMMA           reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)
    RPARENT         reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)
    SEMICOLON       reduce using rule 60 (callfunc -> ID LPARENT expr RPARENT .)


state 153

    (15) stmt -> IF LPARENT cond RPARENT . stmt END
    (16) stmt -> IF LPARENT cond RPARENT . stmt END ELSE stmt END
    (9) stmt -> . RETURN
    (10) stmt -> . RETURN expr
    (11) stmt -> . PROCEDURE BEGIN LPARENT arglist RPARENT
    (12) stmt -> . PRINT prlist
    (13) stmt -> . WHILE LPARENT cond RPARENT stmt END
    (14) stmt -> . FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END
    (15) stmt -> . IF LPARENT cond RPARENT stmt END
    (16) stmt -> . IF LPARENT cond RPARENT stmt END ELSE stmt END
    (17) stmt -> . LBRACKET stmtlist RBRACKET

    RETURN          shift and go to state 13
    PROCEDURE       shift and go to state 10
    PRINT           shift and go to state 14
    WHILE           shift and go to state 32
    FOR             shift and go to state 23
    IF              shift and go to state 52
    LBRACKET        shift and go to state 4

    stmt                           shift and go to state 161

state 154

    (75) arglist -> arglist COMMA . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 162
    callfunc                       shift and go to state 39
    bltin                          shift and go to state 12
    asgn                           shift and go to state 7
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50

state 155

    (11) stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .

    END             reduce using rule 11 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    NEWLINE         reduce using rule 11 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    RBRACKET        reduce using rule 11 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    RETURN          reduce using rule 11 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    PROCEDURE       reduce using rule 11 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    PRINT           reduce using rule 11 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    WHILE           reduce using rule 11 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    FOR             reduce using rule 11 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    IF              reduce using rule 11 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    LBRACKET        reduce using rule 11 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)


state 156

    (14) stmt -> FOR LPARENT cond SEMICOLON cond . SEMICOLON cond RPARENT stmt END

    SEMICOLON       shift and go to state 163


state 157

    (68) formals -> ID COMMA . formals
    (67) formals -> . ID
    (68) formals -> . ID COMMA formals

    ID              shift and go to state 148

    formals                        shift and go to state 164

state 158

    (65) defn -> FUNC procname LPARENT formals RPARENT .

    NEWLINE         reduce using rule 65 (defn -> FUNC procname LPARENT formals RPARENT .)


state 159

    (66) defn -> PROC procname LPARENT formals RPARENT .

    NEWLINE         reduce using rule 66 (defn -> PROC procname LPARENT formals RPARENT .)


state 160

    (13) stmt -> WHILE LPARENT cond RPARENT stmt . END

    END             shift and go to state 165


state 161

    (15) stmt -> IF LPARENT cond RPARENT stmt . END
    (16) stmt -> IF LPARENT cond RPARENT stmt . END ELSE stmt END

    END             shift and go to state 166


state 162

    (75) arglist -> arglist COMMA expr .
    (44) mathop -> expr . EXP expr
    (45) mathop -> expr . PLUS expr
    (46) mathop -> expr . MINUS expr
    (47) mathop -> expr . TIMES expr
    (48) mathop -> expr . DIVIDE expr
    (49) mathop -> expr . MOD expr
    (50) logicop -> expr . LT expr
    (51) logicop -> expr . GT expr
    (52) logicop -> expr . LE expr
    (53) logicop -> expr . GE expr
    (54) logicop -> expr . EQ expr
    (55) logicop -> expr . NE expr
    (56) logicop -> expr . OR expr
    (57) logicop -> expr . AND expr
    (58) logicop -> expr . NOT expr

    RPARENT         reduce using rule 75 (arglist -> arglist COMMA expr .)
    COMMA           reduce using rule 75 (arglist -> arglist COMMA expr .)
    EXP             shift and go to state 88
    PLUS            shift and go to state 87
    MINUS           shift and go to state 91
    TIMES           shift and go to state 84
    DIVIDE          shift and go to state 81
    MOD             shift and go to state 93
    LT              shift and go to state 85
    GT              shift and go to state 80
    LE              shift and go to state 86
    GE              shift and go to state 83
    EQ              shift and go to state 90
    NE              shift and go to state 92
    OR              shift and go to state 79
    AND             shift and go to state 78
    NOT             shift and go to state 89


state 163

    (14) stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON . cond RPARENT stmt END
    (18) cond -> . expr
    (22) expr -> . data
    (23) expr -> . unaryop
    (24) expr -> . binaryop
    (25) expr -> . LPARENT expr RPARENT
    (26) expr -> . callfunc
    (27) data -> . FLOAT
    (28) data -> . constant
    (29) data -> . ID
    (30) unaryop -> . UNARYMINUS expr
    (31) unaryop -> . INC ID
    (32) unaryop -> . DEC ID
    (33) unaryop -> . ID INC
    (34) unaryop -> . ID DEC
    (35) binaryop -> . asgn
    (36) binaryop -> . mathop
    (37) binaryop -> . logicop
    (59) callfunc -> . bltin LPARENT expr RPARENT
    (60) callfunc -> . ID LPARENT expr RPARENT
    (93) constant -> . PI
    (94) constant -> . PHI
    (95) constant -> . GAMMA
    (96) constant -> . E
    (97) constant -> . DEG
    (98) constant -> . PREC
    (38) asgn -> . ID ASSIGN expr
    (39) asgn -> . ID ADDEQ expr
    (40) asgn -> . ID SUBEQ expr
    (41) asgn -> . ID MULEQ expr
    (42) asgn -> . ID DIVEQ expr
    (43) asgn -> . ID MODEQ expr
    (44) mathop -> . expr EXP expr
    (45) mathop -> . expr PLUS expr
    (46) mathop -> . expr MINUS expr
    (47) mathop -> . expr TIMES expr
    (48) mathop -> . expr DIVIDE expr
    (49) mathop -> . expr MOD expr
    (50) logicop -> . expr LT expr
    (51) logicop -> . expr GT expr
    (52) logicop -> . expr LE expr
    (53) logicop -> . expr GE expr
    (54) logicop -> . expr EQ expr
    (55) logicop -> . expr NE expr
    (56) logicop -> . expr OR expr
    (57) logicop -> . expr AND expr
    (58) logicop -> . expr NOT expr
    (77) bltin -> . SIN
    (78) bltin -> . COS
    (79) bltin -> . TAN
    (80) bltin -> . ASIN
    (81) bltin -> . ACOS
    (82) bltin -> . ATAN
    (83) bltin -> . SINH
    (84) bltin -> . COSH
    (85) bltin -> . TANH
    (86) bltin -> . INT
    (87) bltin -> . LOG
    (88) bltin -> . LOG10
    (89) bltin -> . SQRT
    (90) bltin -> . ABS
    (91) bltin -> . ERF
    (92) bltin -> . ERFC

    LPARENT         shift and go to state 34
    FLOAT           shift and go to state 53
    ID              shift and go to state 51
    UNARYMINUS      shift and go to state 22
    INC             shift and go to state 55
    DEC             shift and go to state 26
    PI              shift and go to state 21
    PHI             shift and go to state 11
    GAMMA           shift and go to state 15
    E               shift and go to state 48
    DEG             shift and go to state 16
    PREC            shift and go to state 40
    SIN             shift and go to state 18
    COS             shift and go to state 30
    TAN             shift and go to state 8
    ASIN            shift and go to state 47
    ACOS            shift and go to state 20
    ATAN            shift and go to state 9
    SINH            shift and go to state 36
    COSH            shift and go to state 31
    TANH            shift and go to state 17
    INT             shift and go to state 27
    LOG             shift and go to state 44
    LOG10           shift and go to state 33
    SQRT            shift and go to state 54
    ABS             shift and go to state 49
    ERF             shift and go to state 45
    ERFC            shift and go to state 19

    constant                       shift and go to state 43
    unaryop                        shift and go to state 37
    expr                           shift and go to state 113
    callfunc                       shift and go to state 39
    asgn                           shift and go to state 7
    cond                           shift and go to state 167
    mathop                         shift and go to state 28
    binaryop                       shift and go to state 41
    logicop                        shift and go to state 46
    data                           shift and go to state 50
    bltin                          shift and go to state 12

state 164

    (68) formals -> ID COMMA formals .

    RPARENT         reduce using rule 68 (formals -> ID COMMA formals .)


state 165

    (13) stmt -> WHILE LPARENT cond RPARENT stmt END .

    END             reduce using rule 13 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    NEWLINE         reduce using rule 13 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    RBRACKET        reduce using rule 13 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    RETURN          reduce using rule 13 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    PROCEDURE       reduce using rule 13 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    PRINT           reduce using rule 13 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    WHILE           reduce using rule 13 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    FOR             reduce using rule 13 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    IF              reduce using rule 13 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    LBRACKET        reduce using rule 13 (stmt -> WHILE LPARENT cond RPARENT stmt END .)


state 166

    (15) stmt -> IF LPARENT cond RPARENT stmt END .
    (16) stmt -> IF LPARENT cond RPARENT stmt END . ELSE stmt END

    END             reduce using rule 15 (stmt -> IF LPARENT cond RPARENT stmt END .)
    NEWLINE         reduce using rule 15 (stmt -> IF LPARENT cond RPARENT stmt END .)
    RBRACKET        reduce using rule 15 (stmt -> IF LPARENT cond RPARENT stmt END .)
    RETURN          reduce using rule 15 (stmt -> IF LPARENT cond RPARENT stmt END .)
    PROCEDURE       reduce using rule 15 (stmt -> IF LPARENT cond RPARENT stmt END .)
    PRINT           reduce using rule 15 (stmt -> IF LPARENT cond RPARENT stmt END .)
    WHILE           reduce using rule 15 (stmt -> IF LPARENT cond RPARENT stmt END .)
    FOR             reduce using rule 15 (stmt -> IF LPARENT cond RPARENT stmt END .)
    IF              reduce using rule 15 (stmt -> IF LPARENT cond RPARENT stmt END .)
    LBRACKET        reduce using rule 15 (stmt -> IF LPARENT cond RPARENT stmt END .)
    ELSE            shift and go to state 168


state 167

    (14) stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond . RPARENT stmt END

    RPARENT         shift and go to state 169


state 168

    (16) stmt -> IF LPARENT cond RPARENT stmt END ELSE . stmt END
    (9) stmt -> . RETURN
    (10) stmt -> . RETURN expr
    (11) stmt -> . PROCEDURE BEGIN LPARENT arglist RPARENT
    (12) stmt -> . PRINT prlist
    (13) stmt -> . WHILE LPARENT cond RPARENT stmt END
    (14) stmt -> . FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END
    (15) stmt -> . IF LPARENT cond RPARENT stmt END
    (16) stmt -> . IF LPARENT cond RPARENT stmt END ELSE stmt END
    (17) stmt -> . LBRACKET stmtlist RBRACKET

    RETURN          shift and go to state 13
    PROCEDURE       shift and go to state 10
    PRINT           shift and go to state 14
    WHILE           shift and go to state 32
    FOR             shift and go to state 23
    IF              shift and go to state 52
    LBRACKET        shift and go to state 4

    stmt                           shift and go to state 170

state 169

    (14) stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT . stmt END
    (9) stmt -> . RETURN
    (10) stmt -> . RETURN expr
    (11) stmt -> . PROCEDURE BEGIN LPARENT arglist RPARENT
    (12) stmt -> . PRINT prlist
    (13) stmt -> . WHILE LPARENT cond RPARENT stmt END
    (14) stmt -> . FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END
    (15) stmt -> . IF LPARENT cond RPARENT stmt END
    (16) stmt -> . IF LPARENT cond RPARENT stmt END ELSE stmt END
    (17) stmt -> . LBRACKET stmtlist RBRACKET

    RETURN          shift and go to state 13
    PROCEDURE       shift and go to state 10
    PRINT           shift and go to state 14
    WHILE           shift and go to state 32
    FOR             shift and go to state 23
    IF              shift and go to state 52
    LBRACKET        shift and go to state 4

    stmt                           shift and go to state 171

state 170

    (16) stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt . END

    END             shift and go to state 172


state 171

    (14) stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt . END

    END             shift and go to state 173


state 172

    (16) stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .

    END             reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    NEWLINE         reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    RBRACKET        reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    RETURN          reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    PROCEDURE       reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    PRINT           reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    WHILE           reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    FOR             reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    IF              reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    LBRACKET        reduce using rule 16 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)


state 173

    (14) stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .

    END             reduce using rule 14 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    NEWLINE         reduce using rule 14 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    RBRACKET        reduce using rule 14 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    RETURN          reduce using rule 14 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    PROCEDURE       reduce using rule 14 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    PRINT           reduce using rule 14 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    WHILE           reduce using rule 14 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    FOR             reduce using rule 14 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    IF              reduce using rule 14 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    LBRACKET        reduce using rule 14 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)

