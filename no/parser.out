Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    READ
    EXP
    E
    GAMMA
    COMMENT
    LOCAL
    PI
    DOLLAR
    PHI
    FLOAT
    PREC
    DEG

Grammar

Rule 0     S' -> list
Rule 1     list -> empty
Rule 2     list -> list NEWLINE
Rule 3     list -> list defn NEWLINE
Rule 4     list -> list asgn NEWLINE
Rule 5     list -> list stmt NEWLINE
Rule 6     list -> list expr NEWLINE
Rule 7     list -> list error NEWLINE
Rule 8     asgn -> ID ASSIGN expr
Rule 9     asgn -> ID ADDEQ expr
Rule 10    asgn -> ID SUBEQ expr
Rule 11    asgn -> ID MULEQ expr
Rule 12    asgn -> ID DIVEQ expr
Rule 13    asgn -> ID MODEQ expr
Rule 14    stmt -> expr
Rule 15    stmt -> RETURN
Rule 16    stmt -> RETURN expr
Rule 17    stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT
Rule 18    stmt -> PRINT prlist
Rule 19    stmt -> WHILE LPARENT cond RPARENT stmt END
Rule 20    stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END
Rule 21    stmt -> IF LPARENT cond RPARENT stmt END
Rule 22    stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END
Rule 23    stmt -> LBRACKET stmtlist RBRACKET
Rule 24    cond -> expr
Rule 25    stmtlist -> empty
Rule 26    stmtlist -> stmtlist NEWLINE
Rule 27    stmtlist -> stmtlist stmt
Rule 28    expr -> NUMBER
Rule 29    expr -> ID
Rule 30    expr -> asgn
Rule 31    expr -> FUNCTION BEGIN
Rule 32    expr -> LPARENT ID RPARENT
Rule 33    expr -> ID LPARENT expr RPARENT
Rule 34    expr -> LPARENT expr RPARENT
Rule 35    expr -> expr PLUS expr
Rule 36    expr -> expr MINUS expr
Rule 37    expr -> expr TIMES expr
Rule 38    expr -> expr DIVIDE expr
Rule 39    expr -> expr MOD expr
Rule 40    expr -> MINUS expr
Rule 41    expr -> expr LT expr
Rule 42    expr -> expr GT expr
Rule 43    expr -> expr LE expr
Rule 44    expr -> expr GE expr
Rule 45    expr -> expr EQ expr
Rule 46    expr -> expr NE expr
Rule 47    expr -> expr OR expr
Rule 48    expr -> expr AND expr
Rule 49    expr -> expr NOT expr
Rule 50    expr -> INC ID
Rule 51    expr -> DEC ID
Rule 52    expr -> ID INC
Rule 53    expr -> ID DEC
Rule 54    prlist -> expr
Rule 55    prlist -> STRING
Rule 56    prlist -> prlist COMMA expr
Rule 57    prlist -> prlist COMMA STRING
Rule 58    defn -> FUNC procname LPARENT formals RPARENT
Rule 59    defn -> PROC procname LPARENT formals RPARENT
Rule 60    formals -> ID
Rule 61    formals -> ID COMMA formals
Rule 62    procname -> FUNCTION
Rule 63    procname -> ID
Rule 64    procname -> PROCEDURE
Rule 65    procname -> BLTIN
Rule 66    arglist -> empty
Rule 67    arglist -> expr
Rule 68    arglist -> arglist COMMA expr
Rule 69    empty -> <empty>

Terminals, with rules where they appear

ADDEQ                : 9
AND                  : 48
ASSIGN               : 8
BEGIN                : 17 31
BLTIN                : 65
COMMA                : 56 57 61 68
COMMENT              : 
DEC                  : 51 53
DEG                  : 
DIVEQ                : 12
DIVIDE               : 38
DOLLAR               : 
E                    : 
ELSE                 : 22
END                  : 19 20 21 22 22
EQ                   : 45
EXP                  : 
FLOAT                : 
FOR                  : 20
FUNC                 : 58
FUNCTION             : 31 62
GAMMA                : 
GE                   : 44
GT                   : 42
ID                   : 8 9 10 11 12 13 29 32 33 50 51 52 53 60 61 63
IF                   : 21 22
INC                  : 50 52
LBRACKET             : 23
LE                   : 43
LOCAL                : 
LPARENT              : 17 19 20 21 22 32 33 34 58 59
LT                   : 41
MINUS                : 36 40
MOD                  : 39
MODEQ                : 13
MULEQ                : 11
NE                   : 46
NEWLINE              : 2 3 4 5 6 7 26
NOT                  : 49
NUMBER               : 28
OR                   : 47
PHI                  : 
PI                   : 
PLUS                 : 35
PREC                 : 
PRINT                : 18
PROC                 : 59
PROCEDURE            : 17 64
RBRACKET             : 23
READ                 : 
RETURN               : 15 16
RPARENT              : 17 19 20 21 22 32 33 34 58 59
SEMICOLON            : 20 20
STRING               : 55 57
SUBEQ                : 10
TIMES                : 37
WHILE                : 19
error                : 7

Nonterminals, with rules where they appear

arglist              : 17 68
asgn                 : 4 30
cond                 : 19 20 20 20 21 22
defn                 : 3
empty                : 1 25 66
expr                 : 6 8 9 10 11 12 13 14 16 24 33 34 35 35 36 36 37 37 38 38 39 39 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 54 56 67 68
formals              : 58 59 61
list                 : 2 3 4 5 6 7 0
prlist               : 18 56 57
procname             : 58 59
stmt                 : 5 19 20 21 22 22 27
stmtlist             : 23 26 27

Parsing method: LALR

state 0

    (0) S' -> . list
    (1) list -> . empty
    (2) list -> . list NEWLINE
    (3) list -> . list defn NEWLINE
    (4) list -> . list asgn NEWLINE
    (5) list -> . list stmt NEWLINE
    (6) list -> . list expr NEWLINE
    (7) list -> . list error NEWLINE
    (69) empty -> .

    NEWLINE         reduce using rule 69 (empty -> .)
    error           reduce using rule 69 (empty -> .)
    FUNC            reduce using rule 69 (empty -> .)
    PROC            reduce using rule 69 (empty -> .)
    ID              reduce using rule 69 (empty -> .)
    RETURN          reduce using rule 69 (empty -> .)
    PROCEDURE       reduce using rule 69 (empty -> .)
    PRINT           reduce using rule 69 (empty -> .)
    WHILE           reduce using rule 69 (empty -> .)
    FOR             reduce using rule 69 (empty -> .)
    IF              reduce using rule 69 (empty -> .)
    LBRACKET        reduce using rule 69 (empty -> .)
    NUMBER          reduce using rule 69 (empty -> .)
    FUNCTION        reduce using rule 69 (empty -> .)
    LPARENT         reduce using rule 69 (empty -> .)
    MINUS           reduce using rule 69 (empty -> .)
    INC             reduce using rule 69 (empty -> .)
    DEC             reduce using rule 69 (empty -> .)
    $end            reduce using rule 69 (empty -> .)

    list                           shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> list .
    (2) list -> list . NEWLINE
    (3) list -> list . defn NEWLINE
    (4) list -> list . asgn NEWLINE
    (5) list -> list . stmt NEWLINE
    (6) list -> list . expr NEWLINE
    (7) list -> list . error NEWLINE
    (58) defn -> . FUNC procname LPARENT formals RPARENT
    (59) defn -> . PROC procname LPARENT formals RPARENT
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr
    (14) stmt -> . expr
    (15) stmt -> . RETURN
    (16) stmt -> . RETURN expr
    (17) stmt -> . PROCEDURE BEGIN LPARENT arglist RPARENT
    (18) stmt -> . PRINT prlist
    (19) stmt -> . WHILE LPARENT cond RPARENT stmt END
    (20) stmt -> . FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END
    (21) stmt -> . IF LPARENT cond RPARENT stmt END
    (22) stmt -> . IF LPARENT cond RPARENT stmt END ELSE stmt END
    (23) stmt -> . LBRACKET stmtlist RBRACKET
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC

    NEWLINE         shift and go to state 10
    error           shift and go to state 23
    FUNC            shift and go to state 15
    PROC            shift and go to state 24
    ID              shift and go to state 17
    RETURN          shift and go to state 3
    PROCEDURE       shift and go to state 18
    PRINT           shift and go to state 7
    WHILE           shift and go to state 6
    FOR             shift and go to state 13
    IF              shift and go to state 19
    LBRACKET        shift and go to state 5
    NUMBER          shift and go to state 4
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 22
    stmt                           shift and go to state 14
    asgn                           shift and go to state 11
    defn                           shift and go to state 16

state 2

    (1) list -> empty .

    NEWLINE         reduce using rule 1 (list -> empty .)
    error           reduce using rule 1 (list -> empty .)
    FUNC            reduce using rule 1 (list -> empty .)
    PROC            reduce using rule 1 (list -> empty .)
    ID              reduce using rule 1 (list -> empty .)
    RETURN          reduce using rule 1 (list -> empty .)
    PROCEDURE       reduce using rule 1 (list -> empty .)
    PRINT           reduce using rule 1 (list -> empty .)
    WHILE           reduce using rule 1 (list -> empty .)
    FOR             reduce using rule 1 (list -> empty .)
    IF              reduce using rule 1 (list -> empty .)
    LBRACKET        reduce using rule 1 (list -> empty .)
    NUMBER          reduce using rule 1 (list -> empty .)
    FUNCTION        reduce using rule 1 (list -> empty .)
    LPARENT         reduce using rule 1 (list -> empty .)
    MINUS           reduce using rule 1 (list -> empty .)
    INC             reduce using rule 1 (list -> empty .)
    DEC             reduce using rule 1 (list -> empty .)
    $end            reduce using rule 1 (list -> empty .)


state 3

    (15) stmt -> RETURN .
    (16) stmt -> RETURN . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for LPARENT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
    END             reduce using rule 15 (stmt -> RETURN .)
    RBRACKET        reduce using rule 15 (stmt -> RETURN .)
    NEWLINE         reduce using rule 15 (stmt -> RETURN .)
    RETURN          reduce using rule 15 (stmt -> RETURN .)
    PROCEDURE       reduce using rule 15 (stmt -> RETURN .)
    PRINT           reduce using rule 15 (stmt -> RETURN .)
    WHILE           reduce using rule 15 (stmt -> RETURN .)
    FOR             reduce using rule 15 (stmt -> RETURN .)
    IF              reduce using rule 15 (stmt -> RETURN .)
    LBRACKET        reduce using rule 15 (stmt -> RETURN .)
    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

  ! NUMBER          [ reduce using rule 15 (stmt -> RETURN .) ]
  ! ID              [ reduce using rule 15 (stmt -> RETURN .) ]
  ! FUNCTION        [ reduce using rule 15 (stmt -> RETURN .) ]
  ! LPARENT         [ reduce using rule 15 (stmt -> RETURN .) ]
  ! MINUS           [ reduce using rule 15 (stmt -> RETURN .) ]
  ! INC             [ reduce using rule 15 (stmt -> RETURN .) ]
  ! DEC             [ reduce using rule 15 (stmt -> RETURN .) ]

    expr                           shift and go to state 27
    asgn                           shift and go to state 25

state 4

    (28) expr -> NUMBER .

    PLUS            reduce using rule 28 (expr -> NUMBER .)
    MINUS           reduce using rule 28 (expr -> NUMBER .)
    TIMES           reduce using rule 28 (expr -> NUMBER .)
    DIVIDE          reduce using rule 28 (expr -> NUMBER .)
    MOD             reduce using rule 28 (expr -> NUMBER .)
    LT              reduce using rule 28 (expr -> NUMBER .)
    GT              reduce using rule 28 (expr -> NUMBER .)
    LE              reduce using rule 28 (expr -> NUMBER .)
    GE              reduce using rule 28 (expr -> NUMBER .)
    EQ              reduce using rule 28 (expr -> NUMBER .)
    NE              reduce using rule 28 (expr -> NUMBER .)
    OR              reduce using rule 28 (expr -> NUMBER .)
    AND             reduce using rule 28 (expr -> NUMBER .)
    NOT             reduce using rule 28 (expr -> NUMBER .)
    NEWLINE         reduce using rule 28 (expr -> NUMBER .)
    RBRACKET        reduce using rule 28 (expr -> NUMBER .)
    RETURN          reduce using rule 28 (expr -> NUMBER .)
    PROCEDURE       reduce using rule 28 (expr -> NUMBER .)
    PRINT           reduce using rule 28 (expr -> NUMBER .)
    WHILE           reduce using rule 28 (expr -> NUMBER .)
    FOR             reduce using rule 28 (expr -> NUMBER .)
    IF              reduce using rule 28 (expr -> NUMBER .)
    LBRACKET        reduce using rule 28 (expr -> NUMBER .)
    NUMBER          reduce using rule 28 (expr -> NUMBER .)
    ID              reduce using rule 28 (expr -> NUMBER .)
    FUNCTION        reduce using rule 28 (expr -> NUMBER .)
    LPARENT         reduce using rule 28 (expr -> NUMBER .)
    INC             reduce using rule 28 (expr -> NUMBER .)
    DEC             reduce using rule 28 (expr -> NUMBER .)
    END             reduce using rule 28 (expr -> NUMBER .)
    COMMA           reduce using rule 28 (expr -> NUMBER .)
    RPARENT         reduce using rule 28 (expr -> NUMBER .)
    SEMICOLON       reduce using rule 28 (expr -> NUMBER .)


state 5

    (23) stmt -> LBRACKET . stmtlist RBRACKET
    (25) stmtlist -> . empty
    (26) stmtlist -> . stmtlist NEWLINE
    (27) stmtlist -> . stmtlist stmt
    (69) empty -> .

    RBRACKET        reduce using rule 69 (empty -> .)
    NEWLINE         reduce using rule 69 (empty -> .)
    RETURN          reduce using rule 69 (empty -> .)
    PROCEDURE       reduce using rule 69 (empty -> .)
    PRINT           reduce using rule 69 (empty -> .)
    WHILE           reduce using rule 69 (empty -> .)
    FOR             reduce using rule 69 (empty -> .)
    IF              reduce using rule 69 (empty -> .)
    LBRACKET        reduce using rule 69 (empty -> .)
    NUMBER          reduce using rule 69 (empty -> .)
    ID              reduce using rule 69 (empty -> .)
    FUNCTION        reduce using rule 69 (empty -> .)
    LPARENT         reduce using rule 69 (empty -> .)
    MINUS           reduce using rule 69 (empty -> .)
    INC             reduce using rule 69 (empty -> .)
    DEC             reduce using rule 69 (empty -> .)

    empty                          shift and go to state 29
    stmtlist                       shift and go to state 28

state 6

    (19) stmt -> WHILE . LPARENT cond RPARENT stmt END

    LPARENT         shift and go to state 30


state 7

    (18) stmt -> PRINT . prlist
    (54) prlist -> . expr
    (55) prlist -> . STRING
    (56) prlist -> . prlist COMMA expr
    (57) prlist -> . prlist COMMA STRING
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    STRING          shift and go to state 31
    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    prlist                         shift and go to state 33
    expr                           shift and go to state 32
    asgn                           shift and go to state 25

state 8

    (40) expr -> MINUS . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 34
    asgn                           shift and go to state 25

state 9

    (32) expr -> LPARENT . ID RPARENT
    (34) expr -> LPARENT . expr RPARENT
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    ID              shift and go to state 35
    NUMBER          shift and go to state 4
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 36
    asgn                           shift and go to state 25

state 10

    (2) list -> list NEWLINE .

    NEWLINE         reduce using rule 2 (list -> list NEWLINE .)
    error           reduce using rule 2 (list -> list NEWLINE .)
    FUNC            reduce using rule 2 (list -> list NEWLINE .)
    PROC            reduce using rule 2 (list -> list NEWLINE .)
    ID              reduce using rule 2 (list -> list NEWLINE .)
    RETURN          reduce using rule 2 (list -> list NEWLINE .)
    PROCEDURE       reduce using rule 2 (list -> list NEWLINE .)
    PRINT           reduce using rule 2 (list -> list NEWLINE .)
    WHILE           reduce using rule 2 (list -> list NEWLINE .)
    FOR             reduce using rule 2 (list -> list NEWLINE .)
    IF              reduce using rule 2 (list -> list NEWLINE .)
    LBRACKET        reduce using rule 2 (list -> list NEWLINE .)
    NUMBER          reduce using rule 2 (list -> list NEWLINE .)
    FUNCTION        reduce using rule 2 (list -> list NEWLINE .)
    LPARENT         reduce using rule 2 (list -> list NEWLINE .)
    MINUS           reduce using rule 2 (list -> list NEWLINE .)
    INC             reduce using rule 2 (list -> list NEWLINE .)
    DEC             reduce using rule 2 (list -> list NEWLINE .)
    $end            reduce using rule 2 (list -> list NEWLINE .)


state 11

    (4) list -> list asgn . NEWLINE
    (30) expr -> asgn .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 37
    PLUS            reduce using rule 30 (expr -> asgn .)
    MINUS           reduce using rule 30 (expr -> asgn .)
    TIMES           reduce using rule 30 (expr -> asgn .)
    DIVIDE          reduce using rule 30 (expr -> asgn .)
    MOD             reduce using rule 30 (expr -> asgn .)
    LT              reduce using rule 30 (expr -> asgn .)
    GT              reduce using rule 30 (expr -> asgn .)
    LE              reduce using rule 30 (expr -> asgn .)
    GE              reduce using rule 30 (expr -> asgn .)
    EQ              reduce using rule 30 (expr -> asgn .)
    NE              reduce using rule 30 (expr -> asgn .)
    OR              reduce using rule 30 (expr -> asgn .)
    AND             reduce using rule 30 (expr -> asgn .)
    NOT             reduce using rule 30 (expr -> asgn .)

  ! NEWLINE         [ reduce using rule 30 (expr -> asgn .) ]


state 12

    (31) expr -> FUNCTION . BEGIN

    BEGIN           shift and go to state 38


state 13

    (20) stmt -> FOR . LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END

    LPARENT         shift and go to state 39


state 14

    (5) list -> list stmt . NEWLINE

    NEWLINE         shift and go to state 40


state 15

    (58) defn -> FUNC . procname LPARENT formals RPARENT
    (62) procname -> . FUNCTION
    (63) procname -> . ID
    (64) procname -> . PROCEDURE
    (65) procname -> . BLTIN

    FUNCTION        shift and go to state 41
    ID              shift and go to state 44
    PROCEDURE       shift and go to state 45
    BLTIN           shift and go to state 42

    procname                       shift and go to state 43

state 16

    (3) list -> list defn . NEWLINE

    NEWLINE         shift and go to state 46


state 17

    (8) asgn -> ID . ASSIGN expr
    (9) asgn -> ID . ADDEQ expr
    (10) asgn -> ID . SUBEQ expr
    (11) asgn -> ID . MULEQ expr
    (12) asgn -> ID . DIVEQ expr
    (13) asgn -> ID . MODEQ expr
    (29) expr -> ID .
    (33) expr -> ID . LPARENT expr RPARENT
    (52) expr -> ID . INC
    (53) expr -> ID . DEC

    ASSIGN          shift and go to state 50
    ADDEQ           shift and go to state 53
    SUBEQ           shift and go to state 51
    MULEQ           shift and go to state 52
    DIVEQ           shift and go to state 55
    MODEQ           shift and go to state 49
    NEWLINE         reduce using rule 29 (expr -> ID .)
    PLUS            reduce using rule 29 (expr -> ID .)
    MINUS           reduce using rule 29 (expr -> ID .)
    TIMES           reduce using rule 29 (expr -> ID .)
    DIVIDE          reduce using rule 29 (expr -> ID .)
    MOD             reduce using rule 29 (expr -> ID .)
    LT              reduce using rule 29 (expr -> ID .)
    GT              reduce using rule 29 (expr -> ID .)
    LE              reduce using rule 29 (expr -> ID .)
    GE              reduce using rule 29 (expr -> ID .)
    EQ              reduce using rule 29 (expr -> ID .)
    NE              reduce using rule 29 (expr -> ID .)
    OR              reduce using rule 29 (expr -> ID .)
    AND             reduce using rule 29 (expr -> ID .)
    NOT             reduce using rule 29 (expr -> ID .)
    LPARENT         shift and go to state 47
    INC             shift and go to state 54
    DEC             shift and go to state 48


state 18

    (17) stmt -> PROCEDURE . BEGIN LPARENT arglist RPARENT

    BEGIN           shift and go to state 56


state 19

    (21) stmt -> IF . LPARENT cond RPARENT stmt END
    (22) stmt -> IF . LPARENT cond RPARENT stmt END ELSE stmt END

    LPARENT         shift and go to state 57


state 20

    (51) expr -> DEC . ID

    ID              shift and go to state 58


state 21

    (50) expr -> INC . ID

    ID              shift and go to state 59


state 22

    (6) list -> list expr . NEWLINE
    (14) stmt -> expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 64
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70

  ! NEWLINE         [ reduce using rule 14 (stmt -> expr .) ]


state 23

    (7) list -> list error . NEWLINE

    NEWLINE         shift and go to state 75


state 24

    (59) defn -> PROC . procname LPARENT formals RPARENT
    (62) procname -> . FUNCTION
    (63) procname -> . ID
    (64) procname -> . PROCEDURE
    (65) procname -> . BLTIN

    FUNCTION        shift and go to state 41
    ID              shift and go to state 44
    PROCEDURE       shift and go to state 45
    BLTIN           shift and go to state 42

    procname                       shift and go to state 76

state 25

    (30) expr -> asgn .

    PLUS            reduce using rule 30 (expr -> asgn .)
    MINUS           reduce using rule 30 (expr -> asgn .)
    TIMES           reduce using rule 30 (expr -> asgn .)
    DIVIDE          reduce using rule 30 (expr -> asgn .)
    MOD             reduce using rule 30 (expr -> asgn .)
    LT              reduce using rule 30 (expr -> asgn .)
    GT              reduce using rule 30 (expr -> asgn .)
    LE              reduce using rule 30 (expr -> asgn .)
    GE              reduce using rule 30 (expr -> asgn .)
    EQ              reduce using rule 30 (expr -> asgn .)
    NE              reduce using rule 30 (expr -> asgn .)
    OR              reduce using rule 30 (expr -> asgn .)
    AND             reduce using rule 30 (expr -> asgn .)
    NOT             reduce using rule 30 (expr -> asgn .)
    NEWLINE         reduce using rule 30 (expr -> asgn .)
    RBRACKET        reduce using rule 30 (expr -> asgn .)
    RETURN          reduce using rule 30 (expr -> asgn .)
    PROCEDURE       reduce using rule 30 (expr -> asgn .)
    PRINT           reduce using rule 30 (expr -> asgn .)
    WHILE           reduce using rule 30 (expr -> asgn .)
    FOR             reduce using rule 30 (expr -> asgn .)
    IF              reduce using rule 30 (expr -> asgn .)
    LBRACKET        reduce using rule 30 (expr -> asgn .)
    NUMBER          reduce using rule 30 (expr -> asgn .)
    ID              reduce using rule 30 (expr -> asgn .)
    FUNCTION        reduce using rule 30 (expr -> asgn .)
    LPARENT         reduce using rule 30 (expr -> asgn .)
    INC             reduce using rule 30 (expr -> asgn .)
    DEC             reduce using rule 30 (expr -> asgn .)
    END             reduce using rule 30 (expr -> asgn .)
    COMMA           reduce using rule 30 (expr -> asgn .)
    RPARENT         reduce using rule 30 (expr -> asgn .)
    SEMICOLON       reduce using rule 30 (expr -> asgn .)


state 26

    (29) expr -> ID .
    (33) expr -> ID . LPARENT expr RPARENT
    (52) expr -> ID . INC
    (53) expr -> ID . DEC
    (8) asgn -> ID . ASSIGN expr
    (9) asgn -> ID . ADDEQ expr
    (10) asgn -> ID . SUBEQ expr
    (11) asgn -> ID . MULEQ expr
    (12) asgn -> ID . DIVEQ expr
    (13) asgn -> ID . MODEQ expr

  ! shift/reduce conflict for LPARENT resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
    PLUS            reduce using rule 29 (expr -> ID .)
    MINUS           reduce using rule 29 (expr -> ID .)
    TIMES           reduce using rule 29 (expr -> ID .)
    DIVIDE          reduce using rule 29 (expr -> ID .)
    MOD             reduce using rule 29 (expr -> ID .)
    LT              reduce using rule 29 (expr -> ID .)
    GT              reduce using rule 29 (expr -> ID .)
    LE              reduce using rule 29 (expr -> ID .)
    GE              reduce using rule 29 (expr -> ID .)
    EQ              reduce using rule 29 (expr -> ID .)
    NE              reduce using rule 29 (expr -> ID .)
    OR              reduce using rule 29 (expr -> ID .)
    AND             reduce using rule 29 (expr -> ID .)
    NOT             reduce using rule 29 (expr -> ID .)
    NEWLINE         reduce using rule 29 (expr -> ID .)
    RBRACKET        reduce using rule 29 (expr -> ID .)
    RETURN          reduce using rule 29 (expr -> ID .)
    PROCEDURE       reduce using rule 29 (expr -> ID .)
    PRINT           reduce using rule 29 (expr -> ID .)
    WHILE           reduce using rule 29 (expr -> ID .)
    FOR             reduce using rule 29 (expr -> ID .)
    IF              reduce using rule 29 (expr -> ID .)
    LBRACKET        reduce using rule 29 (expr -> ID .)
    NUMBER          reduce using rule 29 (expr -> ID .)
    ID              reduce using rule 29 (expr -> ID .)
    FUNCTION        reduce using rule 29 (expr -> ID .)
    END             reduce using rule 29 (expr -> ID .)
    COMMA           reduce using rule 29 (expr -> ID .)
    RPARENT         reduce using rule 29 (expr -> ID .)
    SEMICOLON       reduce using rule 29 (expr -> ID .)
    LPARENT         shift and go to state 47
    INC             shift and go to state 54
    DEC             shift and go to state 48
    ASSIGN          shift and go to state 50
    ADDEQ           shift and go to state 53
    SUBEQ           shift and go to state 51
    MULEQ           shift and go to state 52
    DIVEQ           shift and go to state 55
    MODEQ           shift and go to state 49

  ! LPARENT         [ reduce using rule 29 (expr -> ID .) ]
  ! INC             [ reduce using rule 29 (expr -> ID .) ]
  ! DEC             [ reduce using rule 29 (expr -> ID .) ]


state 27

    (16) stmt -> RETURN expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

  ! shift/reduce conflict for MINUS resolved as shift
    END             reduce using rule 16 (stmt -> RETURN expr .)
    RBRACKET        reduce using rule 16 (stmt -> RETURN expr .)
    NEWLINE         reduce using rule 16 (stmt -> RETURN expr .)
    RETURN          reduce using rule 16 (stmt -> RETURN expr .)
    PROCEDURE       reduce using rule 16 (stmt -> RETURN expr .)
    PRINT           reduce using rule 16 (stmt -> RETURN expr .)
    WHILE           reduce using rule 16 (stmt -> RETURN expr .)
    FOR             reduce using rule 16 (stmt -> RETURN expr .)
    IF              reduce using rule 16 (stmt -> RETURN expr .)
    LBRACKET        reduce using rule 16 (stmt -> RETURN expr .)
    NUMBER          reduce using rule 16 (stmt -> RETURN expr .)
    ID              reduce using rule 16 (stmt -> RETURN expr .)
    FUNCTION        reduce using rule 16 (stmt -> RETURN expr .)
    LPARENT         reduce using rule 16 (stmt -> RETURN expr .)
    INC             reduce using rule 16 (stmt -> RETURN expr .)
    DEC             reduce using rule 16 (stmt -> RETURN expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70

  ! MINUS           [ reduce using rule 16 (stmt -> RETURN expr .) ]


state 28

    (23) stmt -> LBRACKET stmtlist . RBRACKET
    (26) stmtlist -> stmtlist . NEWLINE
    (27) stmtlist -> stmtlist . stmt
    (14) stmt -> . expr
    (15) stmt -> . RETURN
    (16) stmt -> . RETURN expr
    (17) stmt -> . PROCEDURE BEGIN LPARENT arglist RPARENT
    (18) stmt -> . PRINT prlist
    (19) stmt -> . WHILE LPARENT cond RPARENT stmt END
    (20) stmt -> . FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END
    (21) stmt -> . IF LPARENT cond RPARENT stmt END
    (22) stmt -> . IF LPARENT cond RPARENT stmt END ELSE stmt END
    (23) stmt -> . LBRACKET stmtlist RBRACKET
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    RBRACKET        shift and go to state 80
    NEWLINE         shift and go to state 77
    RETURN          shift and go to state 3
    PROCEDURE       shift and go to state 18
    PRINT           shift and go to state 7
    WHILE           shift and go to state 6
    FOR             shift and go to state 13
    IF              shift and go to state 19
    LBRACKET        shift and go to state 5
    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 79
    stmt                           shift and go to state 78
    asgn                           shift and go to state 25

state 29

    (25) stmtlist -> empty .

    RBRACKET        reduce using rule 25 (stmtlist -> empty .)
    NEWLINE         reduce using rule 25 (stmtlist -> empty .)
    RETURN          reduce using rule 25 (stmtlist -> empty .)
    PROCEDURE       reduce using rule 25 (stmtlist -> empty .)
    PRINT           reduce using rule 25 (stmtlist -> empty .)
    WHILE           reduce using rule 25 (stmtlist -> empty .)
    FOR             reduce using rule 25 (stmtlist -> empty .)
    IF              reduce using rule 25 (stmtlist -> empty .)
    LBRACKET        reduce using rule 25 (stmtlist -> empty .)
    NUMBER          reduce using rule 25 (stmtlist -> empty .)
    ID              reduce using rule 25 (stmtlist -> empty .)
    FUNCTION        reduce using rule 25 (stmtlist -> empty .)
    LPARENT         reduce using rule 25 (stmtlist -> empty .)
    MINUS           reduce using rule 25 (stmtlist -> empty .)
    INC             reduce using rule 25 (stmtlist -> empty .)
    DEC             reduce using rule 25 (stmtlist -> empty .)


state 30

    (19) stmt -> WHILE LPARENT . cond RPARENT stmt END
    (24) cond -> . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 82
    cond                           shift and go to state 81
    asgn                           shift and go to state 25

state 31

    (55) prlist -> STRING .

    COMMA           reduce using rule 55 (prlist -> STRING .)
    NEWLINE         reduce using rule 55 (prlist -> STRING .)
    RBRACKET        reduce using rule 55 (prlist -> STRING .)
    RETURN          reduce using rule 55 (prlist -> STRING .)
    PROCEDURE       reduce using rule 55 (prlist -> STRING .)
    PRINT           reduce using rule 55 (prlist -> STRING .)
    WHILE           reduce using rule 55 (prlist -> STRING .)
    FOR             reduce using rule 55 (prlist -> STRING .)
    IF              reduce using rule 55 (prlist -> STRING .)
    LBRACKET        reduce using rule 55 (prlist -> STRING .)
    NUMBER          reduce using rule 55 (prlist -> STRING .)
    ID              reduce using rule 55 (prlist -> STRING .)
    FUNCTION        reduce using rule 55 (prlist -> STRING .)
    LPARENT         reduce using rule 55 (prlist -> STRING .)
    MINUS           reduce using rule 55 (prlist -> STRING .)
    INC             reduce using rule 55 (prlist -> STRING .)
    DEC             reduce using rule 55 (prlist -> STRING .)
    END             reduce using rule 55 (prlist -> STRING .)


state 32

    (54) prlist -> expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

  ! shift/reduce conflict for MINUS resolved as shift
    COMMA           reduce using rule 54 (prlist -> expr .)
    NEWLINE         reduce using rule 54 (prlist -> expr .)
    RBRACKET        reduce using rule 54 (prlist -> expr .)
    RETURN          reduce using rule 54 (prlist -> expr .)
    PROCEDURE       reduce using rule 54 (prlist -> expr .)
    PRINT           reduce using rule 54 (prlist -> expr .)
    WHILE           reduce using rule 54 (prlist -> expr .)
    FOR             reduce using rule 54 (prlist -> expr .)
    IF              reduce using rule 54 (prlist -> expr .)
    LBRACKET        reduce using rule 54 (prlist -> expr .)
    NUMBER          reduce using rule 54 (prlist -> expr .)
    ID              reduce using rule 54 (prlist -> expr .)
    FUNCTION        reduce using rule 54 (prlist -> expr .)
    LPARENT         reduce using rule 54 (prlist -> expr .)
    INC             reduce using rule 54 (prlist -> expr .)
    DEC             reduce using rule 54 (prlist -> expr .)
    END             reduce using rule 54 (prlist -> expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70

  ! MINUS           [ reduce using rule 54 (prlist -> expr .) ]


state 33

    (18) stmt -> PRINT prlist .
    (56) prlist -> prlist . COMMA expr
    (57) prlist -> prlist . COMMA STRING

    END             reduce using rule 18 (stmt -> PRINT prlist .)
    RBRACKET        reduce using rule 18 (stmt -> PRINT prlist .)
    NEWLINE         reduce using rule 18 (stmt -> PRINT prlist .)
    RETURN          reduce using rule 18 (stmt -> PRINT prlist .)
    PROCEDURE       reduce using rule 18 (stmt -> PRINT prlist .)
    PRINT           reduce using rule 18 (stmt -> PRINT prlist .)
    WHILE           reduce using rule 18 (stmt -> PRINT prlist .)
    FOR             reduce using rule 18 (stmt -> PRINT prlist .)
    IF              reduce using rule 18 (stmt -> PRINT prlist .)
    LBRACKET        reduce using rule 18 (stmt -> PRINT prlist .)
    NUMBER          reduce using rule 18 (stmt -> PRINT prlist .)
    ID              reduce using rule 18 (stmt -> PRINT prlist .)
    FUNCTION        reduce using rule 18 (stmt -> PRINT prlist .)
    LPARENT         reduce using rule 18 (stmt -> PRINT prlist .)
    MINUS           reduce using rule 18 (stmt -> PRINT prlist .)
    INC             reduce using rule 18 (stmt -> PRINT prlist .)
    DEC             reduce using rule 18 (stmt -> PRINT prlist .)
    COMMA           shift and go to state 83


state 34

    (40) expr -> MINUS expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    NEWLINE         reduce using rule 40 (expr -> MINUS expr .)
    RBRACKET        reduce using rule 40 (expr -> MINUS expr .)
    RETURN          reduce using rule 40 (expr -> MINUS expr .)
    PROCEDURE       reduce using rule 40 (expr -> MINUS expr .)
    PRINT           reduce using rule 40 (expr -> MINUS expr .)
    WHILE           reduce using rule 40 (expr -> MINUS expr .)
    FOR             reduce using rule 40 (expr -> MINUS expr .)
    IF              reduce using rule 40 (expr -> MINUS expr .)
    LBRACKET        reduce using rule 40 (expr -> MINUS expr .)
    NUMBER          reduce using rule 40 (expr -> MINUS expr .)
    ID              reduce using rule 40 (expr -> MINUS expr .)
    FUNCTION        reduce using rule 40 (expr -> MINUS expr .)
    LPARENT         reduce using rule 40 (expr -> MINUS expr .)
    INC             reduce using rule 40 (expr -> MINUS expr .)
    DEC             reduce using rule 40 (expr -> MINUS expr .)
    END             reduce using rule 40 (expr -> MINUS expr .)
    COMMA           reduce using rule 40 (expr -> MINUS expr .)
    RPARENT         reduce using rule 40 (expr -> MINUS expr .)
    SEMICOLON       reduce using rule 40 (expr -> MINUS expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70

  ! PLUS            [ reduce using rule 40 (expr -> MINUS expr .) ]
  ! MINUS           [ reduce using rule 40 (expr -> MINUS expr .) ]
  ! TIMES           [ reduce using rule 40 (expr -> MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 40 (expr -> MINUS expr .) ]
  ! MOD             [ reduce using rule 40 (expr -> MINUS expr .) ]
  ! LT              [ reduce using rule 40 (expr -> MINUS expr .) ]
  ! GT              [ reduce using rule 40 (expr -> MINUS expr .) ]
  ! LE              [ reduce using rule 40 (expr -> MINUS expr .) ]
  ! GE              [ reduce using rule 40 (expr -> MINUS expr .) ]
  ! EQ              [ reduce using rule 40 (expr -> MINUS expr .) ]
  ! NE              [ reduce using rule 40 (expr -> MINUS expr .) ]
  ! OR              [ reduce using rule 40 (expr -> MINUS expr .) ]
  ! AND             [ reduce using rule 40 (expr -> MINUS expr .) ]
  ! NOT             [ reduce using rule 40 (expr -> MINUS expr .) ]


state 35

    (32) expr -> LPARENT ID . RPARENT
    (29) expr -> ID .
    (33) expr -> ID . LPARENT expr RPARENT
    (52) expr -> ID . INC
    (53) expr -> ID . DEC
    (8) asgn -> ID . ASSIGN expr
    (9) asgn -> ID . ADDEQ expr
    (10) asgn -> ID . SUBEQ expr
    (11) asgn -> ID . MULEQ expr
    (12) asgn -> ID . DIVEQ expr
    (13) asgn -> ID . MODEQ expr

  ! shift/reduce conflict for RPARENT resolved as shift
    RPARENT         shift and go to state 84
    PLUS            reduce using rule 29 (expr -> ID .)
    MINUS           reduce using rule 29 (expr -> ID .)
    TIMES           reduce using rule 29 (expr -> ID .)
    DIVIDE          reduce using rule 29 (expr -> ID .)
    MOD             reduce using rule 29 (expr -> ID .)
    LT              reduce using rule 29 (expr -> ID .)
    GT              reduce using rule 29 (expr -> ID .)
    LE              reduce using rule 29 (expr -> ID .)
    GE              reduce using rule 29 (expr -> ID .)
    EQ              reduce using rule 29 (expr -> ID .)
    NE              reduce using rule 29 (expr -> ID .)
    OR              reduce using rule 29 (expr -> ID .)
    AND             reduce using rule 29 (expr -> ID .)
    NOT             reduce using rule 29 (expr -> ID .)
    LPARENT         shift and go to state 47
    INC             shift and go to state 54
    DEC             shift and go to state 48
    ASSIGN          shift and go to state 50
    ADDEQ           shift and go to state 53
    SUBEQ           shift and go to state 51
    MULEQ           shift and go to state 52
    DIVEQ           shift and go to state 55
    MODEQ           shift and go to state 49

  ! RPARENT         [ reduce using rule 29 (expr -> ID .) ]


state 36

    (34) expr -> LPARENT expr . RPARENT
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

    RPARENT         shift and go to state 85
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70


state 37

    (4) list -> list asgn NEWLINE .

    NEWLINE         reduce using rule 4 (list -> list asgn NEWLINE .)
    error           reduce using rule 4 (list -> list asgn NEWLINE .)
    FUNC            reduce using rule 4 (list -> list asgn NEWLINE .)
    PROC            reduce using rule 4 (list -> list asgn NEWLINE .)
    ID              reduce using rule 4 (list -> list asgn NEWLINE .)
    RETURN          reduce using rule 4 (list -> list asgn NEWLINE .)
    PROCEDURE       reduce using rule 4 (list -> list asgn NEWLINE .)
    PRINT           reduce using rule 4 (list -> list asgn NEWLINE .)
    WHILE           reduce using rule 4 (list -> list asgn NEWLINE .)
    FOR             reduce using rule 4 (list -> list asgn NEWLINE .)
    IF              reduce using rule 4 (list -> list asgn NEWLINE .)
    LBRACKET        reduce using rule 4 (list -> list asgn NEWLINE .)
    NUMBER          reduce using rule 4 (list -> list asgn NEWLINE .)
    FUNCTION        reduce using rule 4 (list -> list asgn NEWLINE .)
    LPARENT         reduce using rule 4 (list -> list asgn NEWLINE .)
    MINUS           reduce using rule 4 (list -> list asgn NEWLINE .)
    INC             reduce using rule 4 (list -> list asgn NEWLINE .)
    DEC             reduce using rule 4 (list -> list asgn NEWLINE .)
    $end            reduce using rule 4 (list -> list asgn NEWLINE .)


state 38

    (31) expr -> FUNCTION BEGIN .

    PLUS            reduce using rule 31 (expr -> FUNCTION BEGIN .)
    MINUS           reduce using rule 31 (expr -> FUNCTION BEGIN .)
    TIMES           reduce using rule 31 (expr -> FUNCTION BEGIN .)
    DIVIDE          reduce using rule 31 (expr -> FUNCTION BEGIN .)
    MOD             reduce using rule 31 (expr -> FUNCTION BEGIN .)
    LT              reduce using rule 31 (expr -> FUNCTION BEGIN .)
    GT              reduce using rule 31 (expr -> FUNCTION BEGIN .)
    LE              reduce using rule 31 (expr -> FUNCTION BEGIN .)
    GE              reduce using rule 31 (expr -> FUNCTION BEGIN .)
    EQ              reduce using rule 31 (expr -> FUNCTION BEGIN .)
    NE              reduce using rule 31 (expr -> FUNCTION BEGIN .)
    OR              reduce using rule 31 (expr -> FUNCTION BEGIN .)
    AND             reduce using rule 31 (expr -> FUNCTION BEGIN .)
    NOT             reduce using rule 31 (expr -> FUNCTION BEGIN .)
    NEWLINE         reduce using rule 31 (expr -> FUNCTION BEGIN .)
    RBRACKET        reduce using rule 31 (expr -> FUNCTION BEGIN .)
    RETURN          reduce using rule 31 (expr -> FUNCTION BEGIN .)
    PROCEDURE       reduce using rule 31 (expr -> FUNCTION BEGIN .)
    PRINT           reduce using rule 31 (expr -> FUNCTION BEGIN .)
    WHILE           reduce using rule 31 (expr -> FUNCTION BEGIN .)
    FOR             reduce using rule 31 (expr -> FUNCTION BEGIN .)
    IF              reduce using rule 31 (expr -> FUNCTION BEGIN .)
    LBRACKET        reduce using rule 31 (expr -> FUNCTION BEGIN .)
    NUMBER          reduce using rule 31 (expr -> FUNCTION BEGIN .)
    ID              reduce using rule 31 (expr -> FUNCTION BEGIN .)
    FUNCTION        reduce using rule 31 (expr -> FUNCTION BEGIN .)
    LPARENT         reduce using rule 31 (expr -> FUNCTION BEGIN .)
    INC             reduce using rule 31 (expr -> FUNCTION BEGIN .)
    DEC             reduce using rule 31 (expr -> FUNCTION BEGIN .)
    END             reduce using rule 31 (expr -> FUNCTION BEGIN .)
    COMMA           reduce using rule 31 (expr -> FUNCTION BEGIN .)
    RPARENT         reduce using rule 31 (expr -> FUNCTION BEGIN .)
    SEMICOLON       reduce using rule 31 (expr -> FUNCTION BEGIN .)


state 39

    (20) stmt -> FOR LPARENT . cond SEMICOLON cond SEMICOLON cond RPARENT stmt END
    (24) cond -> . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 82
    cond                           shift and go to state 86
    asgn                           shift and go to state 25

state 40

    (5) list -> list stmt NEWLINE .

    NEWLINE         reduce using rule 5 (list -> list stmt NEWLINE .)
    error           reduce using rule 5 (list -> list stmt NEWLINE .)
    FUNC            reduce using rule 5 (list -> list stmt NEWLINE .)
    PROC            reduce using rule 5 (list -> list stmt NEWLINE .)
    ID              reduce using rule 5 (list -> list stmt NEWLINE .)
    RETURN          reduce using rule 5 (list -> list stmt NEWLINE .)
    PROCEDURE       reduce using rule 5 (list -> list stmt NEWLINE .)
    PRINT           reduce using rule 5 (list -> list stmt NEWLINE .)
    WHILE           reduce using rule 5 (list -> list stmt NEWLINE .)
    FOR             reduce using rule 5 (list -> list stmt NEWLINE .)
    IF              reduce using rule 5 (list -> list stmt NEWLINE .)
    LBRACKET        reduce using rule 5 (list -> list stmt NEWLINE .)
    NUMBER          reduce using rule 5 (list -> list stmt NEWLINE .)
    FUNCTION        reduce using rule 5 (list -> list stmt NEWLINE .)
    LPARENT         reduce using rule 5 (list -> list stmt NEWLINE .)
    MINUS           reduce using rule 5 (list -> list stmt NEWLINE .)
    INC             reduce using rule 5 (list -> list stmt NEWLINE .)
    DEC             reduce using rule 5 (list -> list stmt NEWLINE .)
    $end            reduce using rule 5 (list -> list stmt NEWLINE .)


state 41

    (62) procname -> FUNCTION .

    LPARENT         reduce using rule 62 (procname -> FUNCTION .)


state 42

    (65) procname -> BLTIN .

    LPARENT         reduce using rule 65 (procname -> BLTIN .)


state 43

    (58) defn -> FUNC procname . LPARENT formals RPARENT

    LPARENT         shift and go to state 87


state 44

    (63) procname -> ID .

    LPARENT         reduce using rule 63 (procname -> ID .)


state 45

    (64) procname -> PROCEDURE .

    LPARENT         reduce using rule 64 (procname -> PROCEDURE .)


state 46

    (3) list -> list defn NEWLINE .

    NEWLINE         reduce using rule 3 (list -> list defn NEWLINE .)
    error           reduce using rule 3 (list -> list defn NEWLINE .)
    FUNC            reduce using rule 3 (list -> list defn NEWLINE .)
    PROC            reduce using rule 3 (list -> list defn NEWLINE .)
    ID              reduce using rule 3 (list -> list defn NEWLINE .)
    RETURN          reduce using rule 3 (list -> list defn NEWLINE .)
    PROCEDURE       reduce using rule 3 (list -> list defn NEWLINE .)
    PRINT           reduce using rule 3 (list -> list defn NEWLINE .)
    WHILE           reduce using rule 3 (list -> list defn NEWLINE .)
    FOR             reduce using rule 3 (list -> list defn NEWLINE .)
    IF              reduce using rule 3 (list -> list defn NEWLINE .)
    LBRACKET        reduce using rule 3 (list -> list defn NEWLINE .)
    NUMBER          reduce using rule 3 (list -> list defn NEWLINE .)
    FUNCTION        reduce using rule 3 (list -> list defn NEWLINE .)
    LPARENT         reduce using rule 3 (list -> list defn NEWLINE .)
    MINUS           reduce using rule 3 (list -> list defn NEWLINE .)
    INC             reduce using rule 3 (list -> list defn NEWLINE .)
    DEC             reduce using rule 3 (list -> list defn NEWLINE .)
    $end            reduce using rule 3 (list -> list defn NEWLINE .)


state 47

    (33) expr -> ID LPARENT . expr RPARENT
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 88
    asgn                           shift and go to state 25

state 48

    (53) expr -> ID DEC .

    PLUS            reduce using rule 53 (expr -> ID DEC .)
    MINUS           reduce using rule 53 (expr -> ID DEC .)
    TIMES           reduce using rule 53 (expr -> ID DEC .)
    DIVIDE          reduce using rule 53 (expr -> ID DEC .)
    MOD             reduce using rule 53 (expr -> ID DEC .)
    LT              reduce using rule 53 (expr -> ID DEC .)
    GT              reduce using rule 53 (expr -> ID DEC .)
    LE              reduce using rule 53 (expr -> ID DEC .)
    GE              reduce using rule 53 (expr -> ID DEC .)
    EQ              reduce using rule 53 (expr -> ID DEC .)
    NE              reduce using rule 53 (expr -> ID DEC .)
    OR              reduce using rule 53 (expr -> ID DEC .)
    AND             reduce using rule 53 (expr -> ID DEC .)
    NOT             reduce using rule 53 (expr -> ID DEC .)
    NEWLINE         reduce using rule 53 (expr -> ID DEC .)
    RBRACKET        reduce using rule 53 (expr -> ID DEC .)
    RETURN          reduce using rule 53 (expr -> ID DEC .)
    PROCEDURE       reduce using rule 53 (expr -> ID DEC .)
    PRINT           reduce using rule 53 (expr -> ID DEC .)
    WHILE           reduce using rule 53 (expr -> ID DEC .)
    FOR             reduce using rule 53 (expr -> ID DEC .)
    IF              reduce using rule 53 (expr -> ID DEC .)
    LBRACKET        reduce using rule 53 (expr -> ID DEC .)
    NUMBER          reduce using rule 53 (expr -> ID DEC .)
    ID              reduce using rule 53 (expr -> ID DEC .)
    FUNCTION        reduce using rule 53 (expr -> ID DEC .)
    LPARENT         reduce using rule 53 (expr -> ID DEC .)
    INC             reduce using rule 53 (expr -> ID DEC .)
    DEC             reduce using rule 53 (expr -> ID DEC .)
    END             reduce using rule 53 (expr -> ID DEC .)
    COMMA           reduce using rule 53 (expr -> ID DEC .)
    RPARENT         reduce using rule 53 (expr -> ID DEC .)
    SEMICOLON       reduce using rule 53 (expr -> ID DEC .)


state 49

    (13) asgn -> ID MODEQ . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 89
    asgn                           shift and go to state 25

state 50

    (8) asgn -> ID ASSIGN . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 90
    asgn                           shift and go to state 25

state 51

    (10) asgn -> ID SUBEQ . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 91
    asgn                           shift and go to state 25

state 52

    (11) asgn -> ID MULEQ . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 92
    asgn                           shift and go to state 25

state 53

    (9) asgn -> ID ADDEQ . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 93
    asgn                           shift and go to state 25

state 54

    (52) expr -> ID INC .

    PLUS            reduce using rule 52 (expr -> ID INC .)
    MINUS           reduce using rule 52 (expr -> ID INC .)
    TIMES           reduce using rule 52 (expr -> ID INC .)
    DIVIDE          reduce using rule 52 (expr -> ID INC .)
    MOD             reduce using rule 52 (expr -> ID INC .)
    LT              reduce using rule 52 (expr -> ID INC .)
    GT              reduce using rule 52 (expr -> ID INC .)
    LE              reduce using rule 52 (expr -> ID INC .)
    GE              reduce using rule 52 (expr -> ID INC .)
    EQ              reduce using rule 52 (expr -> ID INC .)
    NE              reduce using rule 52 (expr -> ID INC .)
    OR              reduce using rule 52 (expr -> ID INC .)
    AND             reduce using rule 52 (expr -> ID INC .)
    NOT             reduce using rule 52 (expr -> ID INC .)
    NEWLINE         reduce using rule 52 (expr -> ID INC .)
    RBRACKET        reduce using rule 52 (expr -> ID INC .)
    RETURN          reduce using rule 52 (expr -> ID INC .)
    PROCEDURE       reduce using rule 52 (expr -> ID INC .)
    PRINT           reduce using rule 52 (expr -> ID INC .)
    WHILE           reduce using rule 52 (expr -> ID INC .)
    FOR             reduce using rule 52 (expr -> ID INC .)
    IF              reduce using rule 52 (expr -> ID INC .)
    LBRACKET        reduce using rule 52 (expr -> ID INC .)
    NUMBER          reduce using rule 52 (expr -> ID INC .)
    ID              reduce using rule 52 (expr -> ID INC .)
    FUNCTION        reduce using rule 52 (expr -> ID INC .)
    LPARENT         reduce using rule 52 (expr -> ID INC .)
    INC             reduce using rule 52 (expr -> ID INC .)
    DEC             reduce using rule 52 (expr -> ID INC .)
    END             reduce using rule 52 (expr -> ID INC .)
    COMMA           reduce using rule 52 (expr -> ID INC .)
    RPARENT         reduce using rule 52 (expr -> ID INC .)
    SEMICOLON       reduce using rule 52 (expr -> ID INC .)


state 55

    (12) asgn -> ID DIVEQ . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 94
    asgn                           shift and go to state 25

state 56

    (17) stmt -> PROCEDURE BEGIN . LPARENT arglist RPARENT

    LPARENT         shift and go to state 95


state 57

    (21) stmt -> IF LPARENT . cond RPARENT stmt END
    (22) stmt -> IF LPARENT . cond RPARENT stmt END ELSE stmt END
    (24) cond -> . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 82
    cond                           shift and go to state 96
    asgn                           shift and go to state 25

state 58

    (51) expr -> DEC ID .

    PLUS            reduce using rule 51 (expr -> DEC ID .)
    MINUS           reduce using rule 51 (expr -> DEC ID .)
    TIMES           reduce using rule 51 (expr -> DEC ID .)
    DIVIDE          reduce using rule 51 (expr -> DEC ID .)
    MOD             reduce using rule 51 (expr -> DEC ID .)
    LT              reduce using rule 51 (expr -> DEC ID .)
    GT              reduce using rule 51 (expr -> DEC ID .)
    LE              reduce using rule 51 (expr -> DEC ID .)
    GE              reduce using rule 51 (expr -> DEC ID .)
    EQ              reduce using rule 51 (expr -> DEC ID .)
    NE              reduce using rule 51 (expr -> DEC ID .)
    OR              reduce using rule 51 (expr -> DEC ID .)
    AND             reduce using rule 51 (expr -> DEC ID .)
    NOT             reduce using rule 51 (expr -> DEC ID .)
    NEWLINE         reduce using rule 51 (expr -> DEC ID .)
    RBRACKET        reduce using rule 51 (expr -> DEC ID .)
    RETURN          reduce using rule 51 (expr -> DEC ID .)
    PROCEDURE       reduce using rule 51 (expr -> DEC ID .)
    PRINT           reduce using rule 51 (expr -> DEC ID .)
    WHILE           reduce using rule 51 (expr -> DEC ID .)
    FOR             reduce using rule 51 (expr -> DEC ID .)
    IF              reduce using rule 51 (expr -> DEC ID .)
    LBRACKET        reduce using rule 51 (expr -> DEC ID .)
    NUMBER          reduce using rule 51 (expr -> DEC ID .)
    ID              reduce using rule 51 (expr -> DEC ID .)
    FUNCTION        reduce using rule 51 (expr -> DEC ID .)
    LPARENT         reduce using rule 51 (expr -> DEC ID .)
    INC             reduce using rule 51 (expr -> DEC ID .)
    DEC             reduce using rule 51 (expr -> DEC ID .)
    END             reduce using rule 51 (expr -> DEC ID .)
    COMMA           reduce using rule 51 (expr -> DEC ID .)
    RPARENT         reduce using rule 51 (expr -> DEC ID .)
    SEMICOLON       reduce using rule 51 (expr -> DEC ID .)


state 59

    (50) expr -> INC ID .

    PLUS            reduce using rule 50 (expr -> INC ID .)
    MINUS           reduce using rule 50 (expr -> INC ID .)
    TIMES           reduce using rule 50 (expr -> INC ID .)
    DIVIDE          reduce using rule 50 (expr -> INC ID .)
    MOD             reduce using rule 50 (expr -> INC ID .)
    LT              reduce using rule 50 (expr -> INC ID .)
    GT              reduce using rule 50 (expr -> INC ID .)
    LE              reduce using rule 50 (expr -> INC ID .)
    GE              reduce using rule 50 (expr -> INC ID .)
    EQ              reduce using rule 50 (expr -> INC ID .)
    NE              reduce using rule 50 (expr -> INC ID .)
    OR              reduce using rule 50 (expr -> INC ID .)
    AND             reduce using rule 50 (expr -> INC ID .)
    NOT             reduce using rule 50 (expr -> INC ID .)
    NEWLINE         reduce using rule 50 (expr -> INC ID .)
    RBRACKET        reduce using rule 50 (expr -> INC ID .)
    RETURN          reduce using rule 50 (expr -> INC ID .)
    PROCEDURE       reduce using rule 50 (expr -> INC ID .)
    PRINT           reduce using rule 50 (expr -> INC ID .)
    WHILE           reduce using rule 50 (expr -> INC ID .)
    FOR             reduce using rule 50 (expr -> INC ID .)
    IF              reduce using rule 50 (expr -> INC ID .)
    LBRACKET        reduce using rule 50 (expr -> INC ID .)
    NUMBER          reduce using rule 50 (expr -> INC ID .)
    ID              reduce using rule 50 (expr -> INC ID .)
    FUNCTION        reduce using rule 50 (expr -> INC ID .)
    LPARENT         reduce using rule 50 (expr -> INC ID .)
    INC             reduce using rule 50 (expr -> INC ID .)
    DEC             reduce using rule 50 (expr -> INC ID .)
    END             reduce using rule 50 (expr -> INC ID .)
    COMMA           reduce using rule 50 (expr -> INC ID .)
    RPARENT         reduce using rule 50 (expr -> INC ID .)
    SEMICOLON       reduce using rule 50 (expr -> INC ID .)


state 60

    (48) expr -> expr AND . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 97
    asgn                           shift and go to state 25

state 61

    (47) expr -> expr OR . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 98
    asgn                           shift and go to state 25

state 62

    (42) expr -> expr GT . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 99
    asgn                           shift and go to state 25

state 63

    (38) expr -> expr DIVIDE . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 100
    asgn                           shift and go to state 25

state 64

    (6) list -> list expr NEWLINE .

    NEWLINE         reduce using rule 6 (list -> list expr NEWLINE .)
    error           reduce using rule 6 (list -> list expr NEWLINE .)
    FUNC            reduce using rule 6 (list -> list expr NEWLINE .)
    PROC            reduce using rule 6 (list -> list expr NEWLINE .)
    ID              reduce using rule 6 (list -> list expr NEWLINE .)
    RETURN          reduce using rule 6 (list -> list expr NEWLINE .)
    PROCEDURE       reduce using rule 6 (list -> list expr NEWLINE .)
    PRINT           reduce using rule 6 (list -> list expr NEWLINE .)
    WHILE           reduce using rule 6 (list -> list expr NEWLINE .)
    FOR             reduce using rule 6 (list -> list expr NEWLINE .)
    IF              reduce using rule 6 (list -> list expr NEWLINE .)
    LBRACKET        reduce using rule 6 (list -> list expr NEWLINE .)
    NUMBER          reduce using rule 6 (list -> list expr NEWLINE .)
    FUNCTION        reduce using rule 6 (list -> list expr NEWLINE .)
    LPARENT         reduce using rule 6 (list -> list expr NEWLINE .)
    MINUS           reduce using rule 6 (list -> list expr NEWLINE .)
    INC             reduce using rule 6 (list -> list expr NEWLINE .)
    DEC             reduce using rule 6 (list -> list expr NEWLINE .)
    $end            reduce using rule 6 (list -> list expr NEWLINE .)


state 65

    (44) expr -> expr GE . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 101
    asgn                           shift and go to state 25

state 66

    (37) expr -> expr TIMES . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 102
    asgn                           shift and go to state 25

state 67

    (41) expr -> expr LT . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 103
    asgn                           shift and go to state 25

state 68

    (43) expr -> expr LE . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 104
    asgn                           shift and go to state 25

state 69

    (35) expr -> expr PLUS . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 105
    asgn                           shift and go to state 25

state 70

    (49) expr -> expr NOT . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 106
    asgn                           shift and go to state 25

state 71

    (45) expr -> expr EQ . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 107
    asgn                           shift and go to state 25

state 72

    (36) expr -> expr MINUS . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 108
    asgn                           shift and go to state 25

state 73

    (46) expr -> expr NE . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 109
    asgn                           shift and go to state 25

state 74

    (39) expr -> expr MOD . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 110
    asgn                           shift and go to state 25

state 75

    (7) list -> list error NEWLINE .

    NEWLINE         reduce using rule 7 (list -> list error NEWLINE .)
    error           reduce using rule 7 (list -> list error NEWLINE .)
    FUNC            reduce using rule 7 (list -> list error NEWLINE .)
    PROC            reduce using rule 7 (list -> list error NEWLINE .)
    ID              reduce using rule 7 (list -> list error NEWLINE .)
    RETURN          reduce using rule 7 (list -> list error NEWLINE .)
    PROCEDURE       reduce using rule 7 (list -> list error NEWLINE .)
    PRINT           reduce using rule 7 (list -> list error NEWLINE .)
    WHILE           reduce using rule 7 (list -> list error NEWLINE .)
    FOR             reduce using rule 7 (list -> list error NEWLINE .)
    IF              reduce using rule 7 (list -> list error NEWLINE .)
    LBRACKET        reduce using rule 7 (list -> list error NEWLINE .)
    NUMBER          reduce using rule 7 (list -> list error NEWLINE .)
    FUNCTION        reduce using rule 7 (list -> list error NEWLINE .)
    LPARENT         reduce using rule 7 (list -> list error NEWLINE .)
    MINUS           reduce using rule 7 (list -> list error NEWLINE .)
    INC             reduce using rule 7 (list -> list error NEWLINE .)
    DEC             reduce using rule 7 (list -> list error NEWLINE .)
    $end            reduce using rule 7 (list -> list error NEWLINE .)


state 76

    (59) defn -> PROC procname . LPARENT formals RPARENT

    LPARENT         shift and go to state 111


state 77

    (26) stmtlist -> stmtlist NEWLINE .

    RBRACKET        reduce using rule 26 (stmtlist -> stmtlist NEWLINE .)
    NEWLINE         reduce using rule 26 (stmtlist -> stmtlist NEWLINE .)
    RETURN          reduce using rule 26 (stmtlist -> stmtlist NEWLINE .)
    PROCEDURE       reduce using rule 26 (stmtlist -> stmtlist NEWLINE .)
    PRINT           reduce using rule 26 (stmtlist -> stmtlist NEWLINE .)
    WHILE           reduce using rule 26 (stmtlist -> stmtlist NEWLINE .)
    FOR             reduce using rule 26 (stmtlist -> stmtlist NEWLINE .)
    IF              reduce using rule 26 (stmtlist -> stmtlist NEWLINE .)
    LBRACKET        reduce using rule 26 (stmtlist -> stmtlist NEWLINE .)
    NUMBER          reduce using rule 26 (stmtlist -> stmtlist NEWLINE .)
    ID              reduce using rule 26 (stmtlist -> stmtlist NEWLINE .)
    FUNCTION        reduce using rule 26 (stmtlist -> stmtlist NEWLINE .)
    LPARENT         reduce using rule 26 (stmtlist -> stmtlist NEWLINE .)
    MINUS           reduce using rule 26 (stmtlist -> stmtlist NEWLINE .)
    INC             reduce using rule 26 (stmtlist -> stmtlist NEWLINE .)
    DEC             reduce using rule 26 (stmtlist -> stmtlist NEWLINE .)


state 78

    (27) stmtlist -> stmtlist stmt .

    RBRACKET        reduce using rule 27 (stmtlist -> stmtlist stmt .)
    NEWLINE         reduce using rule 27 (stmtlist -> stmtlist stmt .)
    RETURN          reduce using rule 27 (stmtlist -> stmtlist stmt .)
    PROCEDURE       reduce using rule 27 (stmtlist -> stmtlist stmt .)
    PRINT           reduce using rule 27 (stmtlist -> stmtlist stmt .)
    WHILE           reduce using rule 27 (stmtlist -> stmtlist stmt .)
    FOR             reduce using rule 27 (stmtlist -> stmtlist stmt .)
    IF              reduce using rule 27 (stmtlist -> stmtlist stmt .)
    LBRACKET        reduce using rule 27 (stmtlist -> stmtlist stmt .)
    NUMBER          reduce using rule 27 (stmtlist -> stmtlist stmt .)
    ID              reduce using rule 27 (stmtlist -> stmtlist stmt .)
    FUNCTION        reduce using rule 27 (stmtlist -> stmtlist stmt .)
    LPARENT         reduce using rule 27 (stmtlist -> stmtlist stmt .)
    MINUS           reduce using rule 27 (stmtlist -> stmtlist stmt .)
    INC             reduce using rule 27 (stmtlist -> stmtlist stmt .)
    DEC             reduce using rule 27 (stmtlist -> stmtlist stmt .)


state 79

    (14) stmt -> expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

  ! shift/reduce conflict for MINUS resolved as shift
    END             reduce using rule 14 (stmt -> expr .)
    RBRACKET        reduce using rule 14 (stmt -> expr .)
    NEWLINE         reduce using rule 14 (stmt -> expr .)
    RETURN          reduce using rule 14 (stmt -> expr .)
    PROCEDURE       reduce using rule 14 (stmt -> expr .)
    PRINT           reduce using rule 14 (stmt -> expr .)
    WHILE           reduce using rule 14 (stmt -> expr .)
    FOR             reduce using rule 14 (stmt -> expr .)
    IF              reduce using rule 14 (stmt -> expr .)
    LBRACKET        reduce using rule 14 (stmt -> expr .)
    NUMBER          reduce using rule 14 (stmt -> expr .)
    ID              reduce using rule 14 (stmt -> expr .)
    FUNCTION        reduce using rule 14 (stmt -> expr .)
    LPARENT         reduce using rule 14 (stmt -> expr .)
    INC             reduce using rule 14 (stmt -> expr .)
    DEC             reduce using rule 14 (stmt -> expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70

  ! MINUS           [ reduce using rule 14 (stmt -> expr .) ]


state 80

    (23) stmt -> LBRACKET stmtlist RBRACKET .

    END             reduce using rule 23 (stmt -> LBRACKET stmtlist RBRACKET .)
    RBRACKET        reduce using rule 23 (stmt -> LBRACKET stmtlist RBRACKET .)
    NEWLINE         reduce using rule 23 (stmt -> LBRACKET stmtlist RBRACKET .)
    RETURN          reduce using rule 23 (stmt -> LBRACKET stmtlist RBRACKET .)
    PROCEDURE       reduce using rule 23 (stmt -> LBRACKET stmtlist RBRACKET .)
    PRINT           reduce using rule 23 (stmt -> LBRACKET stmtlist RBRACKET .)
    WHILE           reduce using rule 23 (stmt -> LBRACKET stmtlist RBRACKET .)
    FOR             reduce using rule 23 (stmt -> LBRACKET stmtlist RBRACKET .)
    IF              reduce using rule 23 (stmt -> LBRACKET stmtlist RBRACKET .)
    LBRACKET        reduce using rule 23 (stmt -> LBRACKET stmtlist RBRACKET .)
    NUMBER          reduce using rule 23 (stmt -> LBRACKET stmtlist RBRACKET .)
    ID              reduce using rule 23 (stmt -> LBRACKET stmtlist RBRACKET .)
    FUNCTION        reduce using rule 23 (stmt -> LBRACKET stmtlist RBRACKET .)
    LPARENT         reduce using rule 23 (stmt -> LBRACKET stmtlist RBRACKET .)
    MINUS           reduce using rule 23 (stmt -> LBRACKET stmtlist RBRACKET .)
    INC             reduce using rule 23 (stmt -> LBRACKET stmtlist RBRACKET .)
    DEC             reduce using rule 23 (stmt -> LBRACKET stmtlist RBRACKET .)


state 81

    (19) stmt -> WHILE LPARENT cond . RPARENT stmt END

    RPARENT         shift and go to state 112


state 82

    (24) cond -> expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

    SEMICOLON       reduce using rule 24 (cond -> expr .)
    RPARENT         reduce using rule 24 (cond -> expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70


state 83

    (56) prlist -> prlist COMMA . expr
    (57) prlist -> prlist COMMA . STRING
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    STRING          shift and go to state 113
    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 114
    asgn                           shift and go to state 25

state 84

    (32) expr -> LPARENT ID RPARENT .

    PLUS            reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    MINUS           reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    TIMES           reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    DIVIDE          reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    MOD             reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    LT              reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    GT              reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    LE              reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    GE              reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    EQ              reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    NE              reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    OR              reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    AND             reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    NOT             reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    NEWLINE         reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    RBRACKET        reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    RETURN          reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    PROCEDURE       reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    PRINT           reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    WHILE           reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    FOR             reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    IF              reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    LBRACKET        reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    NUMBER          reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    ID              reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    FUNCTION        reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    LPARENT         reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    INC             reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    DEC             reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    END             reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    COMMA           reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    RPARENT         reduce using rule 32 (expr -> LPARENT ID RPARENT .)
    SEMICOLON       reduce using rule 32 (expr -> LPARENT ID RPARENT .)


state 85

    (34) expr -> LPARENT expr RPARENT .

    PLUS            reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    MINUS           reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    TIMES           reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    DIVIDE          reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    MOD             reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    LT              reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    GT              reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    LE              reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    GE              reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    EQ              reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    NE              reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    OR              reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    AND             reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    NOT             reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    NEWLINE         reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    RBRACKET        reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    RETURN          reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    PROCEDURE       reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    PRINT           reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    WHILE           reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    FOR             reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    IF              reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    LBRACKET        reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    NUMBER          reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    ID              reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    FUNCTION        reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    LPARENT         reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    INC             reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    DEC             reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    END             reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    COMMA           reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    RPARENT         reduce using rule 34 (expr -> LPARENT expr RPARENT .)
    SEMICOLON       reduce using rule 34 (expr -> LPARENT expr RPARENT .)


state 86

    (20) stmt -> FOR LPARENT cond . SEMICOLON cond SEMICOLON cond RPARENT stmt END

    SEMICOLON       shift and go to state 115


state 87

    (58) defn -> FUNC procname LPARENT . formals RPARENT
    (60) formals -> . ID
    (61) formals -> . ID COMMA formals

    ID              shift and go to state 116

    formals                        shift and go to state 117

state 88

    (33) expr -> ID LPARENT expr . RPARENT
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

    RPARENT         shift and go to state 118
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70


state 89

    (13) asgn -> ID MODEQ expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    NEWLINE         reduce using rule 13 (asgn -> ID MODEQ expr .)
    RBRACKET        reduce using rule 13 (asgn -> ID MODEQ expr .)
    RETURN          reduce using rule 13 (asgn -> ID MODEQ expr .)
    PROCEDURE       reduce using rule 13 (asgn -> ID MODEQ expr .)
    PRINT           reduce using rule 13 (asgn -> ID MODEQ expr .)
    WHILE           reduce using rule 13 (asgn -> ID MODEQ expr .)
    FOR             reduce using rule 13 (asgn -> ID MODEQ expr .)
    IF              reduce using rule 13 (asgn -> ID MODEQ expr .)
    LBRACKET        reduce using rule 13 (asgn -> ID MODEQ expr .)
    NUMBER          reduce using rule 13 (asgn -> ID MODEQ expr .)
    ID              reduce using rule 13 (asgn -> ID MODEQ expr .)
    FUNCTION        reduce using rule 13 (asgn -> ID MODEQ expr .)
    LPARENT         reduce using rule 13 (asgn -> ID MODEQ expr .)
    INC             reduce using rule 13 (asgn -> ID MODEQ expr .)
    DEC             reduce using rule 13 (asgn -> ID MODEQ expr .)
    END             reduce using rule 13 (asgn -> ID MODEQ expr .)
    COMMA           reduce using rule 13 (asgn -> ID MODEQ expr .)
    RPARENT         reduce using rule 13 (asgn -> ID MODEQ expr .)
    SEMICOLON       reduce using rule 13 (asgn -> ID MODEQ expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70

  ! PLUS            [ reduce using rule 13 (asgn -> ID MODEQ expr .) ]
  ! MINUS           [ reduce using rule 13 (asgn -> ID MODEQ expr .) ]
  ! TIMES           [ reduce using rule 13 (asgn -> ID MODEQ expr .) ]
  ! DIVIDE          [ reduce using rule 13 (asgn -> ID MODEQ expr .) ]
  ! MOD             [ reduce using rule 13 (asgn -> ID MODEQ expr .) ]
  ! LT              [ reduce using rule 13 (asgn -> ID MODEQ expr .) ]
  ! GT              [ reduce using rule 13 (asgn -> ID MODEQ expr .) ]
  ! LE              [ reduce using rule 13 (asgn -> ID MODEQ expr .) ]
  ! GE              [ reduce using rule 13 (asgn -> ID MODEQ expr .) ]
  ! EQ              [ reduce using rule 13 (asgn -> ID MODEQ expr .) ]
  ! NE              [ reduce using rule 13 (asgn -> ID MODEQ expr .) ]
  ! OR              [ reduce using rule 13 (asgn -> ID MODEQ expr .) ]
  ! AND             [ reduce using rule 13 (asgn -> ID MODEQ expr .) ]
  ! NOT             [ reduce using rule 13 (asgn -> ID MODEQ expr .) ]


state 90

    (8) asgn -> ID ASSIGN expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    NEWLINE         reduce using rule 8 (asgn -> ID ASSIGN expr .)
    RBRACKET        reduce using rule 8 (asgn -> ID ASSIGN expr .)
    RETURN          reduce using rule 8 (asgn -> ID ASSIGN expr .)
    PROCEDURE       reduce using rule 8 (asgn -> ID ASSIGN expr .)
    PRINT           reduce using rule 8 (asgn -> ID ASSIGN expr .)
    WHILE           reduce using rule 8 (asgn -> ID ASSIGN expr .)
    FOR             reduce using rule 8 (asgn -> ID ASSIGN expr .)
    IF              reduce using rule 8 (asgn -> ID ASSIGN expr .)
    LBRACKET        reduce using rule 8 (asgn -> ID ASSIGN expr .)
    NUMBER          reduce using rule 8 (asgn -> ID ASSIGN expr .)
    ID              reduce using rule 8 (asgn -> ID ASSIGN expr .)
    FUNCTION        reduce using rule 8 (asgn -> ID ASSIGN expr .)
    LPARENT         reduce using rule 8 (asgn -> ID ASSIGN expr .)
    INC             reduce using rule 8 (asgn -> ID ASSIGN expr .)
    DEC             reduce using rule 8 (asgn -> ID ASSIGN expr .)
    END             reduce using rule 8 (asgn -> ID ASSIGN expr .)
    COMMA           reduce using rule 8 (asgn -> ID ASSIGN expr .)
    RPARENT         reduce using rule 8 (asgn -> ID ASSIGN expr .)
    SEMICOLON       reduce using rule 8 (asgn -> ID ASSIGN expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70

  ! PLUS            [ reduce using rule 8 (asgn -> ID ASSIGN expr .) ]
  ! MINUS           [ reduce using rule 8 (asgn -> ID ASSIGN expr .) ]
  ! TIMES           [ reduce using rule 8 (asgn -> ID ASSIGN expr .) ]
  ! DIVIDE          [ reduce using rule 8 (asgn -> ID ASSIGN expr .) ]
  ! MOD             [ reduce using rule 8 (asgn -> ID ASSIGN expr .) ]
  ! LT              [ reduce using rule 8 (asgn -> ID ASSIGN expr .) ]
  ! GT              [ reduce using rule 8 (asgn -> ID ASSIGN expr .) ]
  ! LE              [ reduce using rule 8 (asgn -> ID ASSIGN expr .) ]
  ! GE              [ reduce using rule 8 (asgn -> ID ASSIGN expr .) ]
  ! EQ              [ reduce using rule 8 (asgn -> ID ASSIGN expr .) ]
  ! NE              [ reduce using rule 8 (asgn -> ID ASSIGN expr .) ]
  ! OR              [ reduce using rule 8 (asgn -> ID ASSIGN expr .) ]
  ! AND             [ reduce using rule 8 (asgn -> ID ASSIGN expr .) ]
  ! NOT             [ reduce using rule 8 (asgn -> ID ASSIGN expr .) ]


state 91

    (10) asgn -> ID SUBEQ expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    NEWLINE         reduce using rule 10 (asgn -> ID SUBEQ expr .)
    RBRACKET        reduce using rule 10 (asgn -> ID SUBEQ expr .)
    RETURN          reduce using rule 10 (asgn -> ID SUBEQ expr .)
    PROCEDURE       reduce using rule 10 (asgn -> ID SUBEQ expr .)
    PRINT           reduce using rule 10 (asgn -> ID SUBEQ expr .)
    WHILE           reduce using rule 10 (asgn -> ID SUBEQ expr .)
    FOR             reduce using rule 10 (asgn -> ID SUBEQ expr .)
    IF              reduce using rule 10 (asgn -> ID SUBEQ expr .)
    LBRACKET        reduce using rule 10 (asgn -> ID SUBEQ expr .)
    NUMBER          reduce using rule 10 (asgn -> ID SUBEQ expr .)
    ID              reduce using rule 10 (asgn -> ID SUBEQ expr .)
    FUNCTION        reduce using rule 10 (asgn -> ID SUBEQ expr .)
    LPARENT         reduce using rule 10 (asgn -> ID SUBEQ expr .)
    INC             reduce using rule 10 (asgn -> ID SUBEQ expr .)
    DEC             reduce using rule 10 (asgn -> ID SUBEQ expr .)
    END             reduce using rule 10 (asgn -> ID SUBEQ expr .)
    COMMA           reduce using rule 10 (asgn -> ID SUBEQ expr .)
    RPARENT         reduce using rule 10 (asgn -> ID SUBEQ expr .)
    SEMICOLON       reduce using rule 10 (asgn -> ID SUBEQ expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70

  ! PLUS            [ reduce using rule 10 (asgn -> ID SUBEQ expr .) ]
  ! MINUS           [ reduce using rule 10 (asgn -> ID SUBEQ expr .) ]
  ! TIMES           [ reduce using rule 10 (asgn -> ID SUBEQ expr .) ]
  ! DIVIDE          [ reduce using rule 10 (asgn -> ID SUBEQ expr .) ]
  ! MOD             [ reduce using rule 10 (asgn -> ID SUBEQ expr .) ]
  ! LT              [ reduce using rule 10 (asgn -> ID SUBEQ expr .) ]
  ! GT              [ reduce using rule 10 (asgn -> ID SUBEQ expr .) ]
  ! LE              [ reduce using rule 10 (asgn -> ID SUBEQ expr .) ]
  ! GE              [ reduce using rule 10 (asgn -> ID SUBEQ expr .) ]
  ! EQ              [ reduce using rule 10 (asgn -> ID SUBEQ expr .) ]
  ! NE              [ reduce using rule 10 (asgn -> ID SUBEQ expr .) ]
  ! OR              [ reduce using rule 10 (asgn -> ID SUBEQ expr .) ]
  ! AND             [ reduce using rule 10 (asgn -> ID SUBEQ expr .) ]
  ! NOT             [ reduce using rule 10 (asgn -> ID SUBEQ expr .) ]


state 92

    (11) asgn -> ID MULEQ expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    NEWLINE         reduce using rule 11 (asgn -> ID MULEQ expr .)
    RBRACKET        reduce using rule 11 (asgn -> ID MULEQ expr .)
    RETURN          reduce using rule 11 (asgn -> ID MULEQ expr .)
    PROCEDURE       reduce using rule 11 (asgn -> ID MULEQ expr .)
    PRINT           reduce using rule 11 (asgn -> ID MULEQ expr .)
    WHILE           reduce using rule 11 (asgn -> ID MULEQ expr .)
    FOR             reduce using rule 11 (asgn -> ID MULEQ expr .)
    IF              reduce using rule 11 (asgn -> ID MULEQ expr .)
    LBRACKET        reduce using rule 11 (asgn -> ID MULEQ expr .)
    NUMBER          reduce using rule 11 (asgn -> ID MULEQ expr .)
    ID              reduce using rule 11 (asgn -> ID MULEQ expr .)
    FUNCTION        reduce using rule 11 (asgn -> ID MULEQ expr .)
    LPARENT         reduce using rule 11 (asgn -> ID MULEQ expr .)
    INC             reduce using rule 11 (asgn -> ID MULEQ expr .)
    DEC             reduce using rule 11 (asgn -> ID MULEQ expr .)
    END             reduce using rule 11 (asgn -> ID MULEQ expr .)
    COMMA           reduce using rule 11 (asgn -> ID MULEQ expr .)
    RPARENT         reduce using rule 11 (asgn -> ID MULEQ expr .)
    SEMICOLON       reduce using rule 11 (asgn -> ID MULEQ expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70

  ! PLUS            [ reduce using rule 11 (asgn -> ID MULEQ expr .) ]
  ! MINUS           [ reduce using rule 11 (asgn -> ID MULEQ expr .) ]
  ! TIMES           [ reduce using rule 11 (asgn -> ID MULEQ expr .) ]
  ! DIVIDE          [ reduce using rule 11 (asgn -> ID MULEQ expr .) ]
  ! MOD             [ reduce using rule 11 (asgn -> ID MULEQ expr .) ]
  ! LT              [ reduce using rule 11 (asgn -> ID MULEQ expr .) ]
  ! GT              [ reduce using rule 11 (asgn -> ID MULEQ expr .) ]
  ! LE              [ reduce using rule 11 (asgn -> ID MULEQ expr .) ]
  ! GE              [ reduce using rule 11 (asgn -> ID MULEQ expr .) ]
  ! EQ              [ reduce using rule 11 (asgn -> ID MULEQ expr .) ]
  ! NE              [ reduce using rule 11 (asgn -> ID MULEQ expr .) ]
  ! OR              [ reduce using rule 11 (asgn -> ID MULEQ expr .) ]
  ! AND             [ reduce using rule 11 (asgn -> ID MULEQ expr .) ]
  ! NOT             [ reduce using rule 11 (asgn -> ID MULEQ expr .) ]


state 93

    (9) asgn -> ID ADDEQ expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    NEWLINE         reduce using rule 9 (asgn -> ID ADDEQ expr .)
    RBRACKET        reduce using rule 9 (asgn -> ID ADDEQ expr .)
    RETURN          reduce using rule 9 (asgn -> ID ADDEQ expr .)
    PROCEDURE       reduce using rule 9 (asgn -> ID ADDEQ expr .)
    PRINT           reduce using rule 9 (asgn -> ID ADDEQ expr .)
    WHILE           reduce using rule 9 (asgn -> ID ADDEQ expr .)
    FOR             reduce using rule 9 (asgn -> ID ADDEQ expr .)
    IF              reduce using rule 9 (asgn -> ID ADDEQ expr .)
    LBRACKET        reduce using rule 9 (asgn -> ID ADDEQ expr .)
    NUMBER          reduce using rule 9 (asgn -> ID ADDEQ expr .)
    ID              reduce using rule 9 (asgn -> ID ADDEQ expr .)
    FUNCTION        reduce using rule 9 (asgn -> ID ADDEQ expr .)
    LPARENT         reduce using rule 9 (asgn -> ID ADDEQ expr .)
    INC             reduce using rule 9 (asgn -> ID ADDEQ expr .)
    DEC             reduce using rule 9 (asgn -> ID ADDEQ expr .)
    END             reduce using rule 9 (asgn -> ID ADDEQ expr .)
    COMMA           reduce using rule 9 (asgn -> ID ADDEQ expr .)
    RPARENT         reduce using rule 9 (asgn -> ID ADDEQ expr .)
    SEMICOLON       reduce using rule 9 (asgn -> ID ADDEQ expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70

  ! PLUS            [ reduce using rule 9 (asgn -> ID ADDEQ expr .) ]
  ! MINUS           [ reduce using rule 9 (asgn -> ID ADDEQ expr .) ]
  ! TIMES           [ reduce using rule 9 (asgn -> ID ADDEQ expr .) ]
  ! DIVIDE          [ reduce using rule 9 (asgn -> ID ADDEQ expr .) ]
  ! MOD             [ reduce using rule 9 (asgn -> ID ADDEQ expr .) ]
  ! LT              [ reduce using rule 9 (asgn -> ID ADDEQ expr .) ]
  ! GT              [ reduce using rule 9 (asgn -> ID ADDEQ expr .) ]
  ! LE              [ reduce using rule 9 (asgn -> ID ADDEQ expr .) ]
  ! GE              [ reduce using rule 9 (asgn -> ID ADDEQ expr .) ]
  ! EQ              [ reduce using rule 9 (asgn -> ID ADDEQ expr .) ]
  ! NE              [ reduce using rule 9 (asgn -> ID ADDEQ expr .) ]
  ! OR              [ reduce using rule 9 (asgn -> ID ADDEQ expr .) ]
  ! AND             [ reduce using rule 9 (asgn -> ID ADDEQ expr .) ]
  ! NOT             [ reduce using rule 9 (asgn -> ID ADDEQ expr .) ]


state 94

    (12) asgn -> ID DIVEQ expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    NEWLINE         reduce using rule 12 (asgn -> ID DIVEQ expr .)
    RBRACKET        reduce using rule 12 (asgn -> ID DIVEQ expr .)
    RETURN          reduce using rule 12 (asgn -> ID DIVEQ expr .)
    PROCEDURE       reduce using rule 12 (asgn -> ID DIVEQ expr .)
    PRINT           reduce using rule 12 (asgn -> ID DIVEQ expr .)
    WHILE           reduce using rule 12 (asgn -> ID DIVEQ expr .)
    FOR             reduce using rule 12 (asgn -> ID DIVEQ expr .)
    IF              reduce using rule 12 (asgn -> ID DIVEQ expr .)
    LBRACKET        reduce using rule 12 (asgn -> ID DIVEQ expr .)
    NUMBER          reduce using rule 12 (asgn -> ID DIVEQ expr .)
    ID              reduce using rule 12 (asgn -> ID DIVEQ expr .)
    FUNCTION        reduce using rule 12 (asgn -> ID DIVEQ expr .)
    LPARENT         reduce using rule 12 (asgn -> ID DIVEQ expr .)
    INC             reduce using rule 12 (asgn -> ID DIVEQ expr .)
    DEC             reduce using rule 12 (asgn -> ID DIVEQ expr .)
    END             reduce using rule 12 (asgn -> ID DIVEQ expr .)
    COMMA           reduce using rule 12 (asgn -> ID DIVEQ expr .)
    RPARENT         reduce using rule 12 (asgn -> ID DIVEQ expr .)
    SEMICOLON       reduce using rule 12 (asgn -> ID DIVEQ expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70

  ! PLUS            [ reduce using rule 12 (asgn -> ID DIVEQ expr .) ]
  ! MINUS           [ reduce using rule 12 (asgn -> ID DIVEQ expr .) ]
  ! TIMES           [ reduce using rule 12 (asgn -> ID DIVEQ expr .) ]
  ! DIVIDE          [ reduce using rule 12 (asgn -> ID DIVEQ expr .) ]
  ! MOD             [ reduce using rule 12 (asgn -> ID DIVEQ expr .) ]
  ! LT              [ reduce using rule 12 (asgn -> ID DIVEQ expr .) ]
  ! GT              [ reduce using rule 12 (asgn -> ID DIVEQ expr .) ]
  ! LE              [ reduce using rule 12 (asgn -> ID DIVEQ expr .) ]
  ! GE              [ reduce using rule 12 (asgn -> ID DIVEQ expr .) ]
  ! EQ              [ reduce using rule 12 (asgn -> ID DIVEQ expr .) ]
  ! NE              [ reduce using rule 12 (asgn -> ID DIVEQ expr .) ]
  ! OR              [ reduce using rule 12 (asgn -> ID DIVEQ expr .) ]
  ! AND             [ reduce using rule 12 (asgn -> ID DIVEQ expr .) ]
  ! NOT             [ reduce using rule 12 (asgn -> ID DIVEQ expr .) ]


state 95

    (17) stmt -> PROCEDURE BEGIN LPARENT . arglist RPARENT
    (66) arglist -> . empty
    (67) arglist -> . expr
    (68) arglist -> . arglist COMMA expr
    (69) empty -> .
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    RPARENT         reduce using rule 69 (empty -> .)
    COMMA           reduce using rule 69 (empty -> .)
    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 121
    arglist                        shift and go to state 119
    empty                          shift and go to state 120
    asgn                           shift and go to state 25

state 96

    (21) stmt -> IF LPARENT cond . RPARENT stmt END
    (22) stmt -> IF LPARENT cond . RPARENT stmt END ELSE stmt END

    RPARENT         shift and go to state 122


state 97

    (48) expr -> expr AND expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    NEWLINE         reduce using rule 48 (expr -> expr AND expr .)
    RBRACKET        reduce using rule 48 (expr -> expr AND expr .)
    RETURN          reduce using rule 48 (expr -> expr AND expr .)
    PROCEDURE       reduce using rule 48 (expr -> expr AND expr .)
    PRINT           reduce using rule 48 (expr -> expr AND expr .)
    WHILE           reduce using rule 48 (expr -> expr AND expr .)
    FOR             reduce using rule 48 (expr -> expr AND expr .)
    IF              reduce using rule 48 (expr -> expr AND expr .)
    LBRACKET        reduce using rule 48 (expr -> expr AND expr .)
    NUMBER          reduce using rule 48 (expr -> expr AND expr .)
    ID              reduce using rule 48 (expr -> expr AND expr .)
    FUNCTION        reduce using rule 48 (expr -> expr AND expr .)
    LPARENT         reduce using rule 48 (expr -> expr AND expr .)
    INC             reduce using rule 48 (expr -> expr AND expr .)
    DEC             reduce using rule 48 (expr -> expr AND expr .)
    END             reduce using rule 48 (expr -> expr AND expr .)
    COMMA           reduce using rule 48 (expr -> expr AND expr .)
    RPARENT         reduce using rule 48 (expr -> expr AND expr .)
    SEMICOLON       reduce using rule 48 (expr -> expr AND expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70

  ! PLUS            [ reduce using rule 48 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 48 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 48 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 48 (expr -> expr AND expr .) ]
  ! MOD             [ reduce using rule 48 (expr -> expr AND expr .) ]
  ! LT              [ reduce using rule 48 (expr -> expr AND expr .) ]
  ! GT              [ reduce using rule 48 (expr -> expr AND expr .) ]
  ! LE              [ reduce using rule 48 (expr -> expr AND expr .) ]
  ! GE              [ reduce using rule 48 (expr -> expr AND expr .) ]
  ! EQ              [ reduce using rule 48 (expr -> expr AND expr .) ]
  ! NE              [ reduce using rule 48 (expr -> expr AND expr .) ]
  ! OR              [ reduce using rule 48 (expr -> expr AND expr .) ]
  ! AND             [ reduce using rule 48 (expr -> expr AND expr .) ]
  ! NOT             [ reduce using rule 48 (expr -> expr AND expr .) ]


state 98

    (47) expr -> expr OR expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    NEWLINE         reduce using rule 47 (expr -> expr OR expr .)
    RBRACKET        reduce using rule 47 (expr -> expr OR expr .)
    RETURN          reduce using rule 47 (expr -> expr OR expr .)
    PROCEDURE       reduce using rule 47 (expr -> expr OR expr .)
    PRINT           reduce using rule 47 (expr -> expr OR expr .)
    WHILE           reduce using rule 47 (expr -> expr OR expr .)
    FOR             reduce using rule 47 (expr -> expr OR expr .)
    IF              reduce using rule 47 (expr -> expr OR expr .)
    LBRACKET        reduce using rule 47 (expr -> expr OR expr .)
    NUMBER          reduce using rule 47 (expr -> expr OR expr .)
    ID              reduce using rule 47 (expr -> expr OR expr .)
    FUNCTION        reduce using rule 47 (expr -> expr OR expr .)
    LPARENT         reduce using rule 47 (expr -> expr OR expr .)
    INC             reduce using rule 47 (expr -> expr OR expr .)
    DEC             reduce using rule 47 (expr -> expr OR expr .)
    END             reduce using rule 47 (expr -> expr OR expr .)
    COMMA           reduce using rule 47 (expr -> expr OR expr .)
    RPARENT         reduce using rule 47 (expr -> expr OR expr .)
    SEMICOLON       reduce using rule 47 (expr -> expr OR expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70

  ! PLUS            [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! MOD             [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! LT              [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! GT              [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! LE              [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! GE              [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! EQ              [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! NE              [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! OR              [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 47 (expr -> expr OR expr .) ]
  ! NOT             [ reduce using rule 47 (expr -> expr OR expr .) ]


state 99

    (42) expr -> expr GT expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    NEWLINE         reduce using rule 42 (expr -> expr GT expr .)
    RBRACKET        reduce using rule 42 (expr -> expr GT expr .)
    RETURN          reduce using rule 42 (expr -> expr GT expr .)
    PROCEDURE       reduce using rule 42 (expr -> expr GT expr .)
    PRINT           reduce using rule 42 (expr -> expr GT expr .)
    WHILE           reduce using rule 42 (expr -> expr GT expr .)
    FOR             reduce using rule 42 (expr -> expr GT expr .)
    IF              reduce using rule 42 (expr -> expr GT expr .)
    LBRACKET        reduce using rule 42 (expr -> expr GT expr .)
    NUMBER          reduce using rule 42 (expr -> expr GT expr .)
    ID              reduce using rule 42 (expr -> expr GT expr .)
    FUNCTION        reduce using rule 42 (expr -> expr GT expr .)
    LPARENT         reduce using rule 42 (expr -> expr GT expr .)
    INC             reduce using rule 42 (expr -> expr GT expr .)
    DEC             reduce using rule 42 (expr -> expr GT expr .)
    END             reduce using rule 42 (expr -> expr GT expr .)
    COMMA           reduce using rule 42 (expr -> expr GT expr .)
    RPARENT         reduce using rule 42 (expr -> expr GT expr .)
    SEMICOLON       reduce using rule 42 (expr -> expr GT expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70

  ! PLUS            [ reduce using rule 42 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 42 (expr -> expr GT expr .) ]
  ! TIMES           [ reduce using rule 42 (expr -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 42 (expr -> expr GT expr .) ]
  ! MOD             [ reduce using rule 42 (expr -> expr GT expr .) ]
  ! LT              [ reduce using rule 42 (expr -> expr GT expr .) ]
  ! GT              [ reduce using rule 42 (expr -> expr GT expr .) ]
  ! LE              [ reduce using rule 42 (expr -> expr GT expr .) ]
  ! GE              [ reduce using rule 42 (expr -> expr GT expr .) ]
  ! EQ              [ reduce using rule 42 (expr -> expr GT expr .) ]
  ! NE              [ reduce using rule 42 (expr -> expr GT expr .) ]
  ! OR              [ reduce using rule 42 (expr -> expr GT expr .) ]
  ! AND             [ reduce using rule 42 (expr -> expr GT expr .) ]
  ! NOT             [ reduce using rule 42 (expr -> expr GT expr .) ]


state 100

    (38) expr -> expr DIVIDE expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    NEWLINE         reduce using rule 38 (expr -> expr DIVIDE expr .)
    RBRACKET        reduce using rule 38 (expr -> expr DIVIDE expr .)
    RETURN          reduce using rule 38 (expr -> expr DIVIDE expr .)
    PROCEDURE       reduce using rule 38 (expr -> expr DIVIDE expr .)
    PRINT           reduce using rule 38 (expr -> expr DIVIDE expr .)
    WHILE           reduce using rule 38 (expr -> expr DIVIDE expr .)
    FOR             reduce using rule 38 (expr -> expr DIVIDE expr .)
    IF              reduce using rule 38 (expr -> expr DIVIDE expr .)
    LBRACKET        reduce using rule 38 (expr -> expr DIVIDE expr .)
    NUMBER          reduce using rule 38 (expr -> expr DIVIDE expr .)
    ID              reduce using rule 38 (expr -> expr DIVIDE expr .)
    FUNCTION        reduce using rule 38 (expr -> expr DIVIDE expr .)
    LPARENT         reduce using rule 38 (expr -> expr DIVIDE expr .)
    INC             reduce using rule 38 (expr -> expr DIVIDE expr .)
    DEC             reduce using rule 38 (expr -> expr DIVIDE expr .)
    END             reduce using rule 38 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 38 (expr -> expr DIVIDE expr .)
    RPARENT         reduce using rule 38 (expr -> expr DIVIDE expr .)
    SEMICOLON       reduce using rule 38 (expr -> expr DIVIDE expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70

  ! PLUS            [ reduce using rule 38 (expr -> expr DIVIDE expr .) ]
  ! MINUS           [ reduce using rule 38 (expr -> expr DIVIDE expr .) ]
  ! TIMES           [ reduce using rule 38 (expr -> expr DIVIDE expr .) ]
  ! DIVIDE          [ reduce using rule 38 (expr -> expr DIVIDE expr .) ]
  ! MOD             [ reduce using rule 38 (expr -> expr DIVIDE expr .) ]
  ! LT              [ reduce using rule 38 (expr -> expr DIVIDE expr .) ]
  ! GT              [ reduce using rule 38 (expr -> expr DIVIDE expr .) ]
  ! LE              [ reduce using rule 38 (expr -> expr DIVIDE expr .) ]
  ! GE              [ reduce using rule 38 (expr -> expr DIVIDE expr .) ]
  ! EQ              [ reduce using rule 38 (expr -> expr DIVIDE expr .) ]
  ! NE              [ reduce using rule 38 (expr -> expr DIVIDE expr .) ]
  ! OR              [ reduce using rule 38 (expr -> expr DIVIDE expr .) ]
  ! AND             [ reduce using rule 38 (expr -> expr DIVIDE expr .) ]
  ! NOT             [ reduce using rule 38 (expr -> expr DIVIDE expr .) ]


state 101

    (44) expr -> expr GE expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    NEWLINE         reduce using rule 44 (expr -> expr GE expr .)
    RBRACKET        reduce using rule 44 (expr -> expr GE expr .)
    RETURN          reduce using rule 44 (expr -> expr GE expr .)
    PROCEDURE       reduce using rule 44 (expr -> expr GE expr .)
    PRINT           reduce using rule 44 (expr -> expr GE expr .)
    WHILE           reduce using rule 44 (expr -> expr GE expr .)
    FOR             reduce using rule 44 (expr -> expr GE expr .)
    IF              reduce using rule 44 (expr -> expr GE expr .)
    LBRACKET        reduce using rule 44 (expr -> expr GE expr .)
    NUMBER          reduce using rule 44 (expr -> expr GE expr .)
    ID              reduce using rule 44 (expr -> expr GE expr .)
    FUNCTION        reduce using rule 44 (expr -> expr GE expr .)
    LPARENT         reduce using rule 44 (expr -> expr GE expr .)
    INC             reduce using rule 44 (expr -> expr GE expr .)
    DEC             reduce using rule 44 (expr -> expr GE expr .)
    END             reduce using rule 44 (expr -> expr GE expr .)
    COMMA           reduce using rule 44 (expr -> expr GE expr .)
    RPARENT         reduce using rule 44 (expr -> expr GE expr .)
    SEMICOLON       reduce using rule 44 (expr -> expr GE expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70

  ! PLUS            [ reduce using rule 44 (expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 44 (expr -> expr GE expr .) ]
  ! TIMES           [ reduce using rule 44 (expr -> expr GE expr .) ]
  ! DIVIDE          [ reduce using rule 44 (expr -> expr GE expr .) ]
  ! MOD             [ reduce using rule 44 (expr -> expr GE expr .) ]
  ! LT              [ reduce using rule 44 (expr -> expr GE expr .) ]
  ! GT              [ reduce using rule 44 (expr -> expr GE expr .) ]
  ! LE              [ reduce using rule 44 (expr -> expr GE expr .) ]
  ! GE              [ reduce using rule 44 (expr -> expr GE expr .) ]
  ! EQ              [ reduce using rule 44 (expr -> expr GE expr .) ]
  ! NE              [ reduce using rule 44 (expr -> expr GE expr .) ]
  ! OR              [ reduce using rule 44 (expr -> expr GE expr .) ]
  ! AND             [ reduce using rule 44 (expr -> expr GE expr .) ]
  ! NOT             [ reduce using rule 44 (expr -> expr GE expr .) ]


state 102

    (37) expr -> expr TIMES expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    NEWLINE         reduce using rule 37 (expr -> expr TIMES expr .)
    RBRACKET        reduce using rule 37 (expr -> expr TIMES expr .)
    RETURN          reduce using rule 37 (expr -> expr TIMES expr .)
    PROCEDURE       reduce using rule 37 (expr -> expr TIMES expr .)
    PRINT           reduce using rule 37 (expr -> expr TIMES expr .)
    WHILE           reduce using rule 37 (expr -> expr TIMES expr .)
    FOR             reduce using rule 37 (expr -> expr TIMES expr .)
    IF              reduce using rule 37 (expr -> expr TIMES expr .)
    LBRACKET        reduce using rule 37 (expr -> expr TIMES expr .)
    NUMBER          reduce using rule 37 (expr -> expr TIMES expr .)
    ID              reduce using rule 37 (expr -> expr TIMES expr .)
    FUNCTION        reduce using rule 37 (expr -> expr TIMES expr .)
    LPARENT         reduce using rule 37 (expr -> expr TIMES expr .)
    INC             reduce using rule 37 (expr -> expr TIMES expr .)
    DEC             reduce using rule 37 (expr -> expr TIMES expr .)
    END             reduce using rule 37 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 37 (expr -> expr TIMES expr .)
    RPARENT         reduce using rule 37 (expr -> expr TIMES expr .)
    SEMICOLON       reduce using rule 37 (expr -> expr TIMES expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70

  ! PLUS            [ reduce using rule 37 (expr -> expr TIMES expr .) ]
  ! MINUS           [ reduce using rule 37 (expr -> expr TIMES expr .) ]
  ! TIMES           [ reduce using rule 37 (expr -> expr TIMES expr .) ]
  ! DIVIDE          [ reduce using rule 37 (expr -> expr TIMES expr .) ]
  ! MOD             [ reduce using rule 37 (expr -> expr TIMES expr .) ]
  ! LT              [ reduce using rule 37 (expr -> expr TIMES expr .) ]
  ! GT              [ reduce using rule 37 (expr -> expr TIMES expr .) ]
  ! LE              [ reduce using rule 37 (expr -> expr TIMES expr .) ]
  ! GE              [ reduce using rule 37 (expr -> expr TIMES expr .) ]
  ! EQ              [ reduce using rule 37 (expr -> expr TIMES expr .) ]
  ! NE              [ reduce using rule 37 (expr -> expr TIMES expr .) ]
  ! OR              [ reduce using rule 37 (expr -> expr TIMES expr .) ]
  ! AND             [ reduce using rule 37 (expr -> expr TIMES expr .) ]
  ! NOT             [ reduce using rule 37 (expr -> expr TIMES expr .) ]


state 103

    (41) expr -> expr LT expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    NEWLINE         reduce using rule 41 (expr -> expr LT expr .)
    RBRACKET        reduce using rule 41 (expr -> expr LT expr .)
    RETURN          reduce using rule 41 (expr -> expr LT expr .)
    PROCEDURE       reduce using rule 41 (expr -> expr LT expr .)
    PRINT           reduce using rule 41 (expr -> expr LT expr .)
    WHILE           reduce using rule 41 (expr -> expr LT expr .)
    FOR             reduce using rule 41 (expr -> expr LT expr .)
    IF              reduce using rule 41 (expr -> expr LT expr .)
    LBRACKET        reduce using rule 41 (expr -> expr LT expr .)
    NUMBER          reduce using rule 41 (expr -> expr LT expr .)
    ID              reduce using rule 41 (expr -> expr LT expr .)
    FUNCTION        reduce using rule 41 (expr -> expr LT expr .)
    LPARENT         reduce using rule 41 (expr -> expr LT expr .)
    INC             reduce using rule 41 (expr -> expr LT expr .)
    DEC             reduce using rule 41 (expr -> expr LT expr .)
    END             reduce using rule 41 (expr -> expr LT expr .)
    COMMA           reduce using rule 41 (expr -> expr LT expr .)
    RPARENT         reduce using rule 41 (expr -> expr LT expr .)
    SEMICOLON       reduce using rule 41 (expr -> expr LT expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70

  ! PLUS            [ reduce using rule 41 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 41 (expr -> expr LT expr .) ]
  ! TIMES           [ reduce using rule 41 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 41 (expr -> expr LT expr .) ]
  ! MOD             [ reduce using rule 41 (expr -> expr LT expr .) ]
  ! LT              [ reduce using rule 41 (expr -> expr LT expr .) ]
  ! GT              [ reduce using rule 41 (expr -> expr LT expr .) ]
  ! LE              [ reduce using rule 41 (expr -> expr LT expr .) ]
  ! GE              [ reduce using rule 41 (expr -> expr LT expr .) ]
  ! EQ              [ reduce using rule 41 (expr -> expr LT expr .) ]
  ! NE              [ reduce using rule 41 (expr -> expr LT expr .) ]
  ! OR              [ reduce using rule 41 (expr -> expr LT expr .) ]
  ! AND             [ reduce using rule 41 (expr -> expr LT expr .) ]
  ! NOT             [ reduce using rule 41 (expr -> expr LT expr .) ]


state 104

    (43) expr -> expr LE expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    NEWLINE         reduce using rule 43 (expr -> expr LE expr .)
    RBRACKET        reduce using rule 43 (expr -> expr LE expr .)
    RETURN          reduce using rule 43 (expr -> expr LE expr .)
    PROCEDURE       reduce using rule 43 (expr -> expr LE expr .)
    PRINT           reduce using rule 43 (expr -> expr LE expr .)
    WHILE           reduce using rule 43 (expr -> expr LE expr .)
    FOR             reduce using rule 43 (expr -> expr LE expr .)
    IF              reduce using rule 43 (expr -> expr LE expr .)
    LBRACKET        reduce using rule 43 (expr -> expr LE expr .)
    NUMBER          reduce using rule 43 (expr -> expr LE expr .)
    ID              reduce using rule 43 (expr -> expr LE expr .)
    FUNCTION        reduce using rule 43 (expr -> expr LE expr .)
    LPARENT         reduce using rule 43 (expr -> expr LE expr .)
    INC             reduce using rule 43 (expr -> expr LE expr .)
    DEC             reduce using rule 43 (expr -> expr LE expr .)
    END             reduce using rule 43 (expr -> expr LE expr .)
    COMMA           reduce using rule 43 (expr -> expr LE expr .)
    RPARENT         reduce using rule 43 (expr -> expr LE expr .)
    SEMICOLON       reduce using rule 43 (expr -> expr LE expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70

  ! PLUS            [ reduce using rule 43 (expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 43 (expr -> expr LE expr .) ]
  ! TIMES           [ reduce using rule 43 (expr -> expr LE expr .) ]
  ! DIVIDE          [ reduce using rule 43 (expr -> expr LE expr .) ]
  ! MOD             [ reduce using rule 43 (expr -> expr LE expr .) ]
  ! LT              [ reduce using rule 43 (expr -> expr LE expr .) ]
  ! GT              [ reduce using rule 43 (expr -> expr LE expr .) ]
  ! LE              [ reduce using rule 43 (expr -> expr LE expr .) ]
  ! GE              [ reduce using rule 43 (expr -> expr LE expr .) ]
  ! EQ              [ reduce using rule 43 (expr -> expr LE expr .) ]
  ! NE              [ reduce using rule 43 (expr -> expr LE expr .) ]
  ! OR              [ reduce using rule 43 (expr -> expr LE expr .) ]
  ! AND             [ reduce using rule 43 (expr -> expr LE expr .) ]
  ! NOT             [ reduce using rule 43 (expr -> expr LE expr .) ]


state 105

    (35) expr -> expr PLUS expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    NEWLINE         reduce using rule 35 (expr -> expr PLUS expr .)
    RBRACKET        reduce using rule 35 (expr -> expr PLUS expr .)
    RETURN          reduce using rule 35 (expr -> expr PLUS expr .)
    PROCEDURE       reduce using rule 35 (expr -> expr PLUS expr .)
    PRINT           reduce using rule 35 (expr -> expr PLUS expr .)
    WHILE           reduce using rule 35 (expr -> expr PLUS expr .)
    FOR             reduce using rule 35 (expr -> expr PLUS expr .)
    IF              reduce using rule 35 (expr -> expr PLUS expr .)
    LBRACKET        reduce using rule 35 (expr -> expr PLUS expr .)
    NUMBER          reduce using rule 35 (expr -> expr PLUS expr .)
    ID              reduce using rule 35 (expr -> expr PLUS expr .)
    FUNCTION        reduce using rule 35 (expr -> expr PLUS expr .)
    LPARENT         reduce using rule 35 (expr -> expr PLUS expr .)
    INC             reduce using rule 35 (expr -> expr PLUS expr .)
    DEC             reduce using rule 35 (expr -> expr PLUS expr .)
    END             reduce using rule 35 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 35 (expr -> expr PLUS expr .)
    RPARENT         reduce using rule 35 (expr -> expr PLUS expr .)
    SEMICOLON       reduce using rule 35 (expr -> expr PLUS expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70

  ! PLUS            [ reduce using rule 35 (expr -> expr PLUS expr .) ]
  ! MINUS           [ reduce using rule 35 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 35 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 35 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 35 (expr -> expr PLUS expr .) ]
  ! LT              [ reduce using rule 35 (expr -> expr PLUS expr .) ]
  ! GT              [ reduce using rule 35 (expr -> expr PLUS expr .) ]
  ! LE              [ reduce using rule 35 (expr -> expr PLUS expr .) ]
  ! GE              [ reduce using rule 35 (expr -> expr PLUS expr .) ]
  ! EQ              [ reduce using rule 35 (expr -> expr PLUS expr .) ]
  ! NE              [ reduce using rule 35 (expr -> expr PLUS expr .) ]
  ! OR              [ reduce using rule 35 (expr -> expr PLUS expr .) ]
  ! AND             [ reduce using rule 35 (expr -> expr PLUS expr .) ]
  ! NOT             [ reduce using rule 35 (expr -> expr PLUS expr .) ]


state 106

    (49) expr -> expr NOT expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    NEWLINE         reduce using rule 49 (expr -> expr NOT expr .)
    RBRACKET        reduce using rule 49 (expr -> expr NOT expr .)
    RETURN          reduce using rule 49 (expr -> expr NOT expr .)
    PROCEDURE       reduce using rule 49 (expr -> expr NOT expr .)
    PRINT           reduce using rule 49 (expr -> expr NOT expr .)
    WHILE           reduce using rule 49 (expr -> expr NOT expr .)
    FOR             reduce using rule 49 (expr -> expr NOT expr .)
    IF              reduce using rule 49 (expr -> expr NOT expr .)
    LBRACKET        reduce using rule 49 (expr -> expr NOT expr .)
    NUMBER          reduce using rule 49 (expr -> expr NOT expr .)
    ID              reduce using rule 49 (expr -> expr NOT expr .)
    FUNCTION        reduce using rule 49 (expr -> expr NOT expr .)
    LPARENT         reduce using rule 49 (expr -> expr NOT expr .)
    INC             reduce using rule 49 (expr -> expr NOT expr .)
    DEC             reduce using rule 49 (expr -> expr NOT expr .)
    END             reduce using rule 49 (expr -> expr NOT expr .)
    COMMA           reduce using rule 49 (expr -> expr NOT expr .)
    RPARENT         reduce using rule 49 (expr -> expr NOT expr .)
    SEMICOLON       reduce using rule 49 (expr -> expr NOT expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70

  ! PLUS            [ reduce using rule 49 (expr -> expr NOT expr .) ]
  ! MINUS           [ reduce using rule 49 (expr -> expr NOT expr .) ]
  ! TIMES           [ reduce using rule 49 (expr -> expr NOT expr .) ]
  ! DIVIDE          [ reduce using rule 49 (expr -> expr NOT expr .) ]
  ! MOD             [ reduce using rule 49 (expr -> expr NOT expr .) ]
  ! LT              [ reduce using rule 49 (expr -> expr NOT expr .) ]
  ! GT              [ reduce using rule 49 (expr -> expr NOT expr .) ]
  ! LE              [ reduce using rule 49 (expr -> expr NOT expr .) ]
  ! GE              [ reduce using rule 49 (expr -> expr NOT expr .) ]
  ! EQ              [ reduce using rule 49 (expr -> expr NOT expr .) ]
  ! NE              [ reduce using rule 49 (expr -> expr NOT expr .) ]
  ! OR              [ reduce using rule 49 (expr -> expr NOT expr .) ]
  ! AND             [ reduce using rule 49 (expr -> expr NOT expr .) ]
  ! NOT             [ reduce using rule 49 (expr -> expr NOT expr .) ]


state 107

    (45) expr -> expr EQ expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    NEWLINE         reduce using rule 45 (expr -> expr EQ expr .)
    RBRACKET        reduce using rule 45 (expr -> expr EQ expr .)
    RETURN          reduce using rule 45 (expr -> expr EQ expr .)
    PROCEDURE       reduce using rule 45 (expr -> expr EQ expr .)
    PRINT           reduce using rule 45 (expr -> expr EQ expr .)
    WHILE           reduce using rule 45 (expr -> expr EQ expr .)
    FOR             reduce using rule 45 (expr -> expr EQ expr .)
    IF              reduce using rule 45 (expr -> expr EQ expr .)
    LBRACKET        reduce using rule 45 (expr -> expr EQ expr .)
    NUMBER          reduce using rule 45 (expr -> expr EQ expr .)
    ID              reduce using rule 45 (expr -> expr EQ expr .)
    FUNCTION        reduce using rule 45 (expr -> expr EQ expr .)
    LPARENT         reduce using rule 45 (expr -> expr EQ expr .)
    INC             reduce using rule 45 (expr -> expr EQ expr .)
    DEC             reduce using rule 45 (expr -> expr EQ expr .)
    END             reduce using rule 45 (expr -> expr EQ expr .)
    COMMA           reduce using rule 45 (expr -> expr EQ expr .)
    RPARENT         reduce using rule 45 (expr -> expr EQ expr .)
    SEMICOLON       reduce using rule 45 (expr -> expr EQ expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70

  ! PLUS            [ reduce using rule 45 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 45 (expr -> expr EQ expr .) ]
  ! TIMES           [ reduce using rule 45 (expr -> expr EQ expr .) ]
  ! DIVIDE          [ reduce using rule 45 (expr -> expr EQ expr .) ]
  ! MOD             [ reduce using rule 45 (expr -> expr EQ expr .) ]
  ! LT              [ reduce using rule 45 (expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 45 (expr -> expr EQ expr .) ]
  ! LE              [ reduce using rule 45 (expr -> expr EQ expr .) ]
  ! GE              [ reduce using rule 45 (expr -> expr EQ expr .) ]
  ! EQ              [ reduce using rule 45 (expr -> expr EQ expr .) ]
  ! NE              [ reduce using rule 45 (expr -> expr EQ expr .) ]
  ! OR              [ reduce using rule 45 (expr -> expr EQ expr .) ]
  ! AND             [ reduce using rule 45 (expr -> expr EQ expr .) ]
  ! NOT             [ reduce using rule 45 (expr -> expr EQ expr .) ]


state 108

    (36) expr -> expr MINUS expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    NEWLINE         reduce using rule 36 (expr -> expr MINUS expr .)
    RBRACKET        reduce using rule 36 (expr -> expr MINUS expr .)
    RETURN          reduce using rule 36 (expr -> expr MINUS expr .)
    PROCEDURE       reduce using rule 36 (expr -> expr MINUS expr .)
    PRINT           reduce using rule 36 (expr -> expr MINUS expr .)
    WHILE           reduce using rule 36 (expr -> expr MINUS expr .)
    FOR             reduce using rule 36 (expr -> expr MINUS expr .)
    IF              reduce using rule 36 (expr -> expr MINUS expr .)
    LBRACKET        reduce using rule 36 (expr -> expr MINUS expr .)
    NUMBER          reduce using rule 36 (expr -> expr MINUS expr .)
    ID              reduce using rule 36 (expr -> expr MINUS expr .)
    FUNCTION        reduce using rule 36 (expr -> expr MINUS expr .)
    LPARENT         reduce using rule 36 (expr -> expr MINUS expr .)
    INC             reduce using rule 36 (expr -> expr MINUS expr .)
    DEC             reduce using rule 36 (expr -> expr MINUS expr .)
    END             reduce using rule 36 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 36 (expr -> expr MINUS expr .)
    RPARENT         reduce using rule 36 (expr -> expr MINUS expr .)
    SEMICOLON       reduce using rule 36 (expr -> expr MINUS expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70

  ! PLUS            [ reduce using rule 36 (expr -> expr MINUS expr .) ]
  ! MINUS           [ reduce using rule 36 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 36 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 36 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 36 (expr -> expr MINUS expr .) ]
  ! LT              [ reduce using rule 36 (expr -> expr MINUS expr .) ]
  ! GT              [ reduce using rule 36 (expr -> expr MINUS expr .) ]
  ! LE              [ reduce using rule 36 (expr -> expr MINUS expr .) ]
  ! GE              [ reduce using rule 36 (expr -> expr MINUS expr .) ]
  ! EQ              [ reduce using rule 36 (expr -> expr MINUS expr .) ]
  ! NE              [ reduce using rule 36 (expr -> expr MINUS expr .) ]
  ! OR              [ reduce using rule 36 (expr -> expr MINUS expr .) ]
  ! AND             [ reduce using rule 36 (expr -> expr MINUS expr .) ]
  ! NOT             [ reduce using rule 36 (expr -> expr MINUS expr .) ]


state 109

    (46) expr -> expr NE expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    NEWLINE         reduce using rule 46 (expr -> expr NE expr .)
    RBRACKET        reduce using rule 46 (expr -> expr NE expr .)
    RETURN          reduce using rule 46 (expr -> expr NE expr .)
    PROCEDURE       reduce using rule 46 (expr -> expr NE expr .)
    PRINT           reduce using rule 46 (expr -> expr NE expr .)
    WHILE           reduce using rule 46 (expr -> expr NE expr .)
    FOR             reduce using rule 46 (expr -> expr NE expr .)
    IF              reduce using rule 46 (expr -> expr NE expr .)
    LBRACKET        reduce using rule 46 (expr -> expr NE expr .)
    NUMBER          reduce using rule 46 (expr -> expr NE expr .)
    ID              reduce using rule 46 (expr -> expr NE expr .)
    FUNCTION        reduce using rule 46 (expr -> expr NE expr .)
    LPARENT         reduce using rule 46 (expr -> expr NE expr .)
    INC             reduce using rule 46 (expr -> expr NE expr .)
    DEC             reduce using rule 46 (expr -> expr NE expr .)
    END             reduce using rule 46 (expr -> expr NE expr .)
    COMMA           reduce using rule 46 (expr -> expr NE expr .)
    RPARENT         reduce using rule 46 (expr -> expr NE expr .)
    SEMICOLON       reduce using rule 46 (expr -> expr NE expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70

  ! PLUS            [ reduce using rule 46 (expr -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 46 (expr -> expr NE expr .) ]
  ! TIMES           [ reduce using rule 46 (expr -> expr NE expr .) ]
  ! DIVIDE          [ reduce using rule 46 (expr -> expr NE expr .) ]
  ! MOD             [ reduce using rule 46 (expr -> expr NE expr .) ]
  ! LT              [ reduce using rule 46 (expr -> expr NE expr .) ]
  ! GT              [ reduce using rule 46 (expr -> expr NE expr .) ]
  ! LE              [ reduce using rule 46 (expr -> expr NE expr .) ]
  ! GE              [ reduce using rule 46 (expr -> expr NE expr .) ]
  ! EQ              [ reduce using rule 46 (expr -> expr NE expr .) ]
  ! NE              [ reduce using rule 46 (expr -> expr NE expr .) ]
  ! OR              [ reduce using rule 46 (expr -> expr NE expr .) ]
  ! AND             [ reduce using rule 46 (expr -> expr NE expr .) ]
  ! NOT             [ reduce using rule 46 (expr -> expr NE expr .) ]


state 110

    (39) expr -> expr MOD expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    NEWLINE         reduce using rule 39 (expr -> expr MOD expr .)
    RBRACKET        reduce using rule 39 (expr -> expr MOD expr .)
    RETURN          reduce using rule 39 (expr -> expr MOD expr .)
    PROCEDURE       reduce using rule 39 (expr -> expr MOD expr .)
    PRINT           reduce using rule 39 (expr -> expr MOD expr .)
    WHILE           reduce using rule 39 (expr -> expr MOD expr .)
    FOR             reduce using rule 39 (expr -> expr MOD expr .)
    IF              reduce using rule 39 (expr -> expr MOD expr .)
    LBRACKET        reduce using rule 39 (expr -> expr MOD expr .)
    NUMBER          reduce using rule 39 (expr -> expr MOD expr .)
    ID              reduce using rule 39 (expr -> expr MOD expr .)
    FUNCTION        reduce using rule 39 (expr -> expr MOD expr .)
    LPARENT         reduce using rule 39 (expr -> expr MOD expr .)
    INC             reduce using rule 39 (expr -> expr MOD expr .)
    DEC             reduce using rule 39 (expr -> expr MOD expr .)
    END             reduce using rule 39 (expr -> expr MOD expr .)
    COMMA           reduce using rule 39 (expr -> expr MOD expr .)
    RPARENT         reduce using rule 39 (expr -> expr MOD expr .)
    SEMICOLON       reduce using rule 39 (expr -> expr MOD expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70

  ! PLUS            [ reduce using rule 39 (expr -> expr MOD expr .) ]
  ! MINUS           [ reduce using rule 39 (expr -> expr MOD expr .) ]
  ! TIMES           [ reduce using rule 39 (expr -> expr MOD expr .) ]
  ! DIVIDE          [ reduce using rule 39 (expr -> expr MOD expr .) ]
  ! MOD             [ reduce using rule 39 (expr -> expr MOD expr .) ]
  ! LT              [ reduce using rule 39 (expr -> expr MOD expr .) ]
  ! GT              [ reduce using rule 39 (expr -> expr MOD expr .) ]
  ! LE              [ reduce using rule 39 (expr -> expr MOD expr .) ]
  ! GE              [ reduce using rule 39 (expr -> expr MOD expr .) ]
  ! EQ              [ reduce using rule 39 (expr -> expr MOD expr .) ]
  ! NE              [ reduce using rule 39 (expr -> expr MOD expr .) ]
  ! OR              [ reduce using rule 39 (expr -> expr MOD expr .) ]
  ! AND             [ reduce using rule 39 (expr -> expr MOD expr .) ]
  ! NOT             [ reduce using rule 39 (expr -> expr MOD expr .) ]


state 111

    (59) defn -> PROC procname LPARENT . formals RPARENT
    (60) formals -> . ID
    (61) formals -> . ID COMMA formals

    ID              shift and go to state 116

    formals                        shift and go to state 123

state 112

    (19) stmt -> WHILE LPARENT cond RPARENT . stmt END
    (14) stmt -> . expr
    (15) stmt -> . RETURN
    (16) stmt -> . RETURN expr
    (17) stmt -> . PROCEDURE BEGIN LPARENT arglist RPARENT
    (18) stmt -> . PRINT prlist
    (19) stmt -> . WHILE LPARENT cond RPARENT stmt END
    (20) stmt -> . FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END
    (21) stmt -> . IF LPARENT cond RPARENT stmt END
    (22) stmt -> . IF LPARENT cond RPARENT stmt END ELSE stmt END
    (23) stmt -> . LBRACKET stmtlist RBRACKET
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    RETURN          shift and go to state 3
    PROCEDURE       shift and go to state 18
    PRINT           shift and go to state 7
    WHILE           shift and go to state 6
    FOR             shift and go to state 13
    IF              shift and go to state 19
    LBRACKET        shift and go to state 5
    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 79
    stmt                           shift and go to state 124
    asgn                           shift and go to state 25

state 113

    (57) prlist -> prlist COMMA STRING .

    COMMA           reduce using rule 57 (prlist -> prlist COMMA STRING .)
    NEWLINE         reduce using rule 57 (prlist -> prlist COMMA STRING .)
    RBRACKET        reduce using rule 57 (prlist -> prlist COMMA STRING .)
    RETURN          reduce using rule 57 (prlist -> prlist COMMA STRING .)
    PROCEDURE       reduce using rule 57 (prlist -> prlist COMMA STRING .)
    PRINT           reduce using rule 57 (prlist -> prlist COMMA STRING .)
    WHILE           reduce using rule 57 (prlist -> prlist COMMA STRING .)
    FOR             reduce using rule 57 (prlist -> prlist COMMA STRING .)
    IF              reduce using rule 57 (prlist -> prlist COMMA STRING .)
    LBRACKET        reduce using rule 57 (prlist -> prlist COMMA STRING .)
    NUMBER          reduce using rule 57 (prlist -> prlist COMMA STRING .)
    ID              reduce using rule 57 (prlist -> prlist COMMA STRING .)
    FUNCTION        reduce using rule 57 (prlist -> prlist COMMA STRING .)
    LPARENT         reduce using rule 57 (prlist -> prlist COMMA STRING .)
    MINUS           reduce using rule 57 (prlist -> prlist COMMA STRING .)
    INC             reduce using rule 57 (prlist -> prlist COMMA STRING .)
    DEC             reduce using rule 57 (prlist -> prlist COMMA STRING .)
    END             reduce using rule 57 (prlist -> prlist COMMA STRING .)


state 114

    (56) prlist -> prlist COMMA expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

  ! shift/reduce conflict for MINUS resolved as shift
    COMMA           reduce using rule 56 (prlist -> prlist COMMA expr .)
    NEWLINE         reduce using rule 56 (prlist -> prlist COMMA expr .)
    RBRACKET        reduce using rule 56 (prlist -> prlist COMMA expr .)
    RETURN          reduce using rule 56 (prlist -> prlist COMMA expr .)
    PROCEDURE       reduce using rule 56 (prlist -> prlist COMMA expr .)
    PRINT           reduce using rule 56 (prlist -> prlist COMMA expr .)
    WHILE           reduce using rule 56 (prlist -> prlist COMMA expr .)
    FOR             reduce using rule 56 (prlist -> prlist COMMA expr .)
    IF              reduce using rule 56 (prlist -> prlist COMMA expr .)
    LBRACKET        reduce using rule 56 (prlist -> prlist COMMA expr .)
    NUMBER          reduce using rule 56 (prlist -> prlist COMMA expr .)
    ID              reduce using rule 56 (prlist -> prlist COMMA expr .)
    FUNCTION        reduce using rule 56 (prlist -> prlist COMMA expr .)
    LPARENT         reduce using rule 56 (prlist -> prlist COMMA expr .)
    INC             reduce using rule 56 (prlist -> prlist COMMA expr .)
    DEC             reduce using rule 56 (prlist -> prlist COMMA expr .)
    END             reduce using rule 56 (prlist -> prlist COMMA expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70

  ! MINUS           [ reduce using rule 56 (prlist -> prlist COMMA expr .) ]


state 115

    (20) stmt -> FOR LPARENT cond SEMICOLON . cond SEMICOLON cond RPARENT stmt END
    (24) cond -> . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 82
    cond                           shift and go to state 125
    asgn                           shift and go to state 25

state 116

    (60) formals -> ID .
    (61) formals -> ID . COMMA formals

    RPARENT         reduce using rule 60 (formals -> ID .)
    COMMA           shift and go to state 126


state 117

    (58) defn -> FUNC procname LPARENT formals . RPARENT

    RPARENT         shift and go to state 127


state 118

    (33) expr -> ID LPARENT expr RPARENT .

    PLUS            reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    MINUS           reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    TIMES           reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    DIVIDE          reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    MOD             reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    LT              reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    GT              reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    LE              reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    GE              reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    EQ              reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    NE              reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    OR              reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    AND             reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    NOT             reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    NEWLINE         reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    RBRACKET        reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    RETURN          reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    PROCEDURE       reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    PRINT           reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    WHILE           reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    FOR             reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    IF              reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    LBRACKET        reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    NUMBER          reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    ID              reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    FUNCTION        reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    LPARENT         reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    INC             reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    DEC             reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    END             reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    COMMA           reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    RPARENT         reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)
    SEMICOLON       reduce using rule 33 (expr -> ID LPARENT expr RPARENT .)


state 119

    (17) stmt -> PROCEDURE BEGIN LPARENT arglist . RPARENT
    (68) arglist -> arglist . COMMA expr

    RPARENT         shift and go to state 129
    COMMA           shift and go to state 128


state 120

    (66) arglist -> empty .

    RPARENT         reduce using rule 66 (arglist -> empty .)
    COMMA           reduce using rule 66 (arglist -> empty .)


state 121

    (67) arglist -> expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

    RPARENT         reduce using rule 67 (arglist -> expr .)
    COMMA           reduce using rule 67 (arglist -> expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70


state 122

    (21) stmt -> IF LPARENT cond RPARENT . stmt END
    (22) stmt -> IF LPARENT cond RPARENT . stmt END ELSE stmt END
    (14) stmt -> . expr
    (15) stmt -> . RETURN
    (16) stmt -> . RETURN expr
    (17) stmt -> . PROCEDURE BEGIN LPARENT arglist RPARENT
    (18) stmt -> . PRINT prlist
    (19) stmt -> . WHILE LPARENT cond RPARENT stmt END
    (20) stmt -> . FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END
    (21) stmt -> . IF LPARENT cond RPARENT stmt END
    (22) stmt -> . IF LPARENT cond RPARENT stmt END ELSE stmt END
    (23) stmt -> . LBRACKET stmtlist RBRACKET
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    RETURN          shift and go to state 3
    PROCEDURE       shift and go to state 18
    PRINT           shift and go to state 7
    WHILE           shift and go to state 6
    FOR             shift and go to state 13
    IF              shift and go to state 19
    LBRACKET        shift and go to state 5
    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 79
    stmt                           shift and go to state 130
    asgn                           shift and go to state 25

state 123

    (59) defn -> PROC procname LPARENT formals . RPARENT

    RPARENT         shift and go to state 131


state 124

    (19) stmt -> WHILE LPARENT cond RPARENT stmt . END

    END             shift and go to state 132


state 125

    (20) stmt -> FOR LPARENT cond SEMICOLON cond . SEMICOLON cond RPARENT stmt END

    SEMICOLON       shift and go to state 133


state 126

    (61) formals -> ID COMMA . formals
    (60) formals -> . ID
    (61) formals -> . ID COMMA formals

    ID              shift and go to state 116

    formals                        shift and go to state 134

state 127

    (58) defn -> FUNC procname LPARENT formals RPARENT .

    NEWLINE         reduce using rule 58 (defn -> FUNC procname LPARENT formals RPARENT .)


state 128

    (68) arglist -> arglist COMMA . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 135
    asgn                           shift and go to state 25

state 129

    (17) stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .

    END             reduce using rule 17 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    RBRACKET        reduce using rule 17 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    NEWLINE         reduce using rule 17 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    RETURN          reduce using rule 17 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    PROCEDURE       reduce using rule 17 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    PRINT           reduce using rule 17 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    WHILE           reduce using rule 17 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    FOR             reduce using rule 17 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    IF              reduce using rule 17 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    LBRACKET        reduce using rule 17 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    NUMBER          reduce using rule 17 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    ID              reduce using rule 17 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    FUNCTION        reduce using rule 17 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    LPARENT         reduce using rule 17 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    MINUS           reduce using rule 17 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    INC             reduce using rule 17 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)
    DEC             reduce using rule 17 (stmt -> PROCEDURE BEGIN LPARENT arglist RPARENT .)


state 130

    (21) stmt -> IF LPARENT cond RPARENT stmt . END
    (22) stmt -> IF LPARENT cond RPARENT stmt . END ELSE stmt END

    END             shift and go to state 136


state 131

    (59) defn -> PROC procname LPARENT formals RPARENT .

    NEWLINE         reduce using rule 59 (defn -> PROC procname LPARENT formals RPARENT .)


state 132

    (19) stmt -> WHILE LPARENT cond RPARENT stmt END .

    END             reduce using rule 19 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    RBRACKET        reduce using rule 19 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    NEWLINE         reduce using rule 19 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    RETURN          reduce using rule 19 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    PROCEDURE       reduce using rule 19 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    PRINT           reduce using rule 19 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    WHILE           reduce using rule 19 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    FOR             reduce using rule 19 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    IF              reduce using rule 19 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    LBRACKET        reduce using rule 19 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    NUMBER          reduce using rule 19 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    ID              reduce using rule 19 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    FUNCTION        reduce using rule 19 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    LPARENT         reduce using rule 19 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    MINUS           reduce using rule 19 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    INC             reduce using rule 19 (stmt -> WHILE LPARENT cond RPARENT stmt END .)
    DEC             reduce using rule 19 (stmt -> WHILE LPARENT cond RPARENT stmt END .)


state 133

    (20) stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON . cond RPARENT stmt END
    (24) cond -> . expr
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 82
    cond                           shift and go to state 137
    asgn                           shift and go to state 25

state 134

    (61) formals -> ID COMMA formals .

    RPARENT         reduce using rule 61 (formals -> ID COMMA formals .)


state 135

    (68) arglist -> arglist COMMA expr .
    (35) expr -> expr . PLUS expr
    (36) expr -> expr . MINUS expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . MOD expr
    (41) expr -> expr . LT expr
    (42) expr -> expr . GT expr
    (43) expr -> expr . LE expr
    (44) expr -> expr . GE expr
    (45) expr -> expr . EQ expr
    (46) expr -> expr . NE expr
    (47) expr -> expr . OR expr
    (48) expr -> expr . AND expr
    (49) expr -> expr . NOT expr

    RPARENT         reduce using rule 68 (arglist -> arglist COMMA expr .)
    COMMA           reduce using rule 68 (arglist -> arglist COMMA expr .)
    PLUS            shift and go to state 69
    MINUS           shift and go to state 72
    TIMES           shift and go to state 66
    DIVIDE          shift and go to state 63
    MOD             shift and go to state 74
    LT              shift and go to state 67
    GT              shift and go to state 62
    LE              shift and go to state 68
    GE              shift and go to state 65
    EQ              shift and go to state 71
    NE              shift and go to state 73
    OR              shift and go to state 61
    AND             shift and go to state 60
    NOT             shift and go to state 70


state 136

    (21) stmt -> IF LPARENT cond RPARENT stmt END .
    (22) stmt -> IF LPARENT cond RPARENT stmt END . ELSE stmt END

    END             reduce using rule 21 (stmt -> IF LPARENT cond RPARENT stmt END .)
    RBRACKET        reduce using rule 21 (stmt -> IF LPARENT cond RPARENT stmt END .)
    NEWLINE         reduce using rule 21 (stmt -> IF LPARENT cond RPARENT stmt END .)
    RETURN          reduce using rule 21 (stmt -> IF LPARENT cond RPARENT stmt END .)
    PROCEDURE       reduce using rule 21 (stmt -> IF LPARENT cond RPARENT stmt END .)
    PRINT           reduce using rule 21 (stmt -> IF LPARENT cond RPARENT stmt END .)
    WHILE           reduce using rule 21 (stmt -> IF LPARENT cond RPARENT stmt END .)
    FOR             reduce using rule 21 (stmt -> IF LPARENT cond RPARENT stmt END .)
    IF              reduce using rule 21 (stmt -> IF LPARENT cond RPARENT stmt END .)
    LBRACKET        reduce using rule 21 (stmt -> IF LPARENT cond RPARENT stmt END .)
    NUMBER          reduce using rule 21 (stmt -> IF LPARENT cond RPARENT stmt END .)
    ID              reduce using rule 21 (stmt -> IF LPARENT cond RPARENT stmt END .)
    FUNCTION        reduce using rule 21 (stmt -> IF LPARENT cond RPARENT stmt END .)
    LPARENT         reduce using rule 21 (stmt -> IF LPARENT cond RPARENT stmt END .)
    MINUS           reduce using rule 21 (stmt -> IF LPARENT cond RPARENT stmt END .)
    INC             reduce using rule 21 (stmt -> IF LPARENT cond RPARENT stmt END .)
    DEC             reduce using rule 21 (stmt -> IF LPARENT cond RPARENT stmt END .)
    ELSE            shift and go to state 138


state 137

    (20) stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond . RPARENT stmt END

    RPARENT         shift and go to state 139


state 138

    (22) stmt -> IF LPARENT cond RPARENT stmt END ELSE . stmt END
    (14) stmt -> . expr
    (15) stmt -> . RETURN
    (16) stmt -> . RETURN expr
    (17) stmt -> . PROCEDURE BEGIN LPARENT arglist RPARENT
    (18) stmt -> . PRINT prlist
    (19) stmt -> . WHILE LPARENT cond RPARENT stmt END
    (20) stmt -> . FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END
    (21) stmt -> . IF LPARENT cond RPARENT stmt END
    (22) stmt -> . IF LPARENT cond RPARENT stmt END ELSE stmt END
    (23) stmt -> . LBRACKET stmtlist RBRACKET
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    RETURN          shift and go to state 3
    PROCEDURE       shift and go to state 18
    PRINT           shift and go to state 7
    WHILE           shift and go to state 6
    FOR             shift and go to state 13
    IF              shift and go to state 19
    LBRACKET        shift and go to state 5
    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 79
    stmt                           shift and go to state 140
    asgn                           shift and go to state 25

state 139

    (20) stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT . stmt END
    (14) stmt -> . expr
    (15) stmt -> . RETURN
    (16) stmt -> . RETURN expr
    (17) stmt -> . PROCEDURE BEGIN LPARENT arglist RPARENT
    (18) stmt -> . PRINT prlist
    (19) stmt -> . WHILE LPARENT cond RPARENT stmt END
    (20) stmt -> . FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END
    (21) stmt -> . IF LPARENT cond RPARENT stmt END
    (22) stmt -> . IF LPARENT cond RPARENT stmt END ELSE stmt END
    (23) stmt -> . LBRACKET stmtlist RBRACKET
    (28) expr -> . NUMBER
    (29) expr -> . ID
    (30) expr -> . asgn
    (31) expr -> . FUNCTION BEGIN
    (32) expr -> . LPARENT ID RPARENT
    (33) expr -> . ID LPARENT expr RPARENT
    (34) expr -> . LPARENT expr RPARENT
    (35) expr -> . expr PLUS expr
    (36) expr -> . expr MINUS expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr MOD expr
    (40) expr -> . MINUS expr
    (41) expr -> . expr LT expr
    (42) expr -> . expr GT expr
    (43) expr -> . expr LE expr
    (44) expr -> . expr GE expr
    (45) expr -> . expr EQ expr
    (46) expr -> . expr NE expr
    (47) expr -> . expr OR expr
    (48) expr -> . expr AND expr
    (49) expr -> . expr NOT expr
    (50) expr -> . INC ID
    (51) expr -> . DEC ID
    (52) expr -> . ID INC
    (53) expr -> . ID DEC
    (8) asgn -> . ID ASSIGN expr
    (9) asgn -> . ID ADDEQ expr
    (10) asgn -> . ID SUBEQ expr
    (11) asgn -> . ID MULEQ expr
    (12) asgn -> . ID DIVEQ expr
    (13) asgn -> . ID MODEQ expr

    RETURN          shift and go to state 3
    PROCEDURE       shift and go to state 18
    PRINT           shift and go to state 7
    WHILE           shift and go to state 6
    FOR             shift and go to state 13
    IF              shift and go to state 19
    LBRACKET        shift and go to state 5
    NUMBER          shift and go to state 4
    ID              shift and go to state 26
    FUNCTION        shift and go to state 12
    LPARENT         shift and go to state 9
    MINUS           shift and go to state 8
    INC             shift and go to state 21
    DEC             shift and go to state 20

    expr                           shift and go to state 79
    stmt                           shift and go to state 141
    asgn                           shift and go to state 25

state 140

    (22) stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt . END

    END             shift and go to state 142


state 141

    (20) stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt . END

    END             shift and go to state 143


state 142

    (22) stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .

    END             reduce using rule 22 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    RBRACKET        reduce using rule 22 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    NEWLINE         reduce using rule 22 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    RETURN          reduce using rule 22 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    PROCEDURE       reduce using rule 22 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    PRINT           reduce using rule 22 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    WHILE           reduce using rule 22 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    FOR             reduce using rule 22 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    IF              reduce using rule 22 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    LBRACKET        reduce using rule 22 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    NUMBER          reduce using rule 22 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    ID              reduce using rule 22 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    FUNCTION        reduce using rule 22 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    LPARENT         reduce using rule 22 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    MINUS           reduce using rule 22 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    INC             reduce using rule 22 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)
    DEC             reduce using rule 22 (stmt -> IF LPARENT cond RPARENT stmt END ELSE stmt END .)


state 143

    (20) stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .

    END             reduce using rule 20 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    RBRACKET        reduce using rule 20 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    NEWLINE         reduce using rule 20 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    RETURN          reduce using rule 20 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    PROCEDURE       reduce using rule 20 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    PRINT           reduce using rule 20 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    WHILE           reduce using rule 20 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    FOR             reduce using rule 20 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    IF              reduce using rule 20 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    LBRACKET        reduce using rule 20 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    NUMBER          reduce using rule 20 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    ID              reduce using rule 20 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    FUNCTION        reduce using rule 20 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    LPARENT         reduce using rule 20 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    MINUS           reduce using rule 20 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    INC             reduce using rule 20 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)
    DEC             reduce using rule 20 (stmt -> FOR LPARENT cond SEMICOLON cond SEMICOLON cond RPARENT stmt END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NUMBER in state 3 resolved as shift
WARNING: shift/reduce conflict for ID in state 3 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 3 resolved as shift
WARNING: shift/reduce conflict for LPARENT in state 3 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 3 resolved as shift
WARNING: shift/reduce conflict for INC in state 3 resolved as shift
WARNING: shift/reduce conflict for DEC in state 3 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 11 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 22 resolved as shift
WARNING: shift/reduce conflict for LPARENT in state 26 resolved as shift
WARNING: shift/reduce conflict for INC in state 26 resolved as shift
WARNING: shift/reduce conflict for DEC in state 26 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 27 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 32 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 34 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 34 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 34 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 34 resolved as shift
WARNING: shift/reduce conflict for MOD in state 34 resolved as shift
WARNING: shift/reduce conflict for LT in state 34 resolved as shift
WARNING: shift/reduce conflict for GT in state 34 resolved as shift
WARNING: shift/reduce conflict for LE in state 34 resolved as shift
WARNING: shift/reduce conflict for GE in state 34 resolved as shift
WARNING: shift/reduce conflict for EQ in state 34 resolved as shift
WARNING: shift/reduce conflict for NE in state 34 resolved as shift
WARNING: shift/reduce conflict for OR in state 34 resolved as shift
WARNING: shift/reduce conflict for AND in state 34 resolved as shift
WARNING: shift/reduce conflict for NOT in state 34 resolved as shift
WARNING: shift/reduce conflict for RPARENT in state 35 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 79 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 89 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 89 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 89 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 89 resolved as shift
WARNING: shift/reduce conflict for MOD in state 89 resolved as shift
WARNING: shift/reduce conflict for LT in state 89 resolved as shift
WARNING: shift/reduce conflict for GT in state 89 resolved as shift
WARNING: shift/reduce conflict for LE in state 89 resolved as shift
WARNING: shift/reduce conflict for GE in state 89 resolved as shift
WARNING: shift/reduce conflict for EQ in state 89 resolved as shift
WARNING: shift/reduce conflict for NE in state 89 resolved as shift
WARNING: shift/reduce conflict for OR in state 89 resolved as shift
WARNING: shift/reduce conflict for AND in state 89 resolved as shift
WARNING: shift/reduce conflict for NOT in state 89 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 90 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 90 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 90 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 90 resolved as shift
WARNING: shift/reduce conflict for MOD in state 90 resolved as shift
WARNING: shift/reduce conflict for LT in state 90 resolved as shift
WARNING: shift/reduce conflict for GT in state 90 resolved as shift
WARNING: shift/reduce conflict for LE in state 90 resolved as shift
WARNING: shift/reduce conflict for GE in state 90 resolved as shift
WARNING: shift/reduce conflict for EQ in state 90 resolved as shift
WARNING: shift/reduce conflict for NE in state 90 resolved as shift
WARNING: shift/reduce conflict for OR in state 90 resolved as shift
WARNING: shift/reduce conflict for AND in state 90 resolved as shift
WARNING: shift/reduce conflict for NOT in state 90 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 91 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 91 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 91 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 91 resolved as shift
WARNING: shift/reduce conflict for MOD in state 91 resolved as shift
WARNING: shift/reduce conflict for LT in state 91 resolved as shift
WARNING: shift/reduce conflict for GT in state 91 resolved as shift
WARNING: shift/reduce conflict for LE in state 91 resolved as shift
WARNING: shift/reduce conflict for GE in state 91 resolved as shift
WARNING: shift/reduce conflict for EQ in state 91 resolved as shift
WARNING: shift/reduce conflict for NE in state 91 resolved as shift
WARNING: shift/reduce conflict for OR in state 91 resolved as shift
WARNING: shift/reduce conflict for AND in state 91 resolved as shift
WARNING: shift/reduce conflict for NOT in state 91 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 92 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 92 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 92 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 92 resolved as shift
WARNING: shift/reduce conflict for MOD in state 92 resolved as shift
WARNING: shift/reduce conflict for LT in state 92 resolved as shift
WARNING: shift/reduce conflict for GT in state 92 resolved as shift
WARNING: shift/reduce conflict for LE in state 92 resolved as shift
WARNING: shift/reduce conflict for GE in state 92 resolved as shift
WARNING: shift/reduce conflict for EQ in state 92 resolved as shift
WARNING: shift/reduce conflict for NE in state 92 resolved as shift
WARNING: shift/reduce conflict for OR in state 92 resolved as shift
WARNING: shift/reduce conflict for AND in state 92 resolved as shift
WARNING: shift/reduce conflict for NOT in state 92 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 93 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 93 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 93 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 93 resolved as shift
WARNING: shift/reduce conflict for MOD in state 93 resolved as shift
WARNING: shift/reduce conflict for LT in state 93 resolved as shift
WARNING: shift/reduce conflict for GT in state 93 resolved as shift
WARNING: shift/reduce conflict for LE in state 93 resolved as shift
WARNING: shift/reduce conflict for GE in state 93 resolved as shift
WARNING: shift/reduce conflict for EQ in state 93 resolved as shift
WARNING: shift/reduce conflict for NE in state 93 resolved as shift
WARNING: shift/reduce conflict for OR in state 93 resolved as shift
WARNING: shift/reduce conflict for AND in state 93 resolved as shift
WARNING: shift/reduce conflict for NOT in state 93 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 94 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 94 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 94 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 94 resolved as shift
WARNING: shift/reduce conflict for MOD in state 94 resolved as shift
WARNING: shift/reduce conflict for LT in state 94 resolved as shift
WARNING: shift/reduce conflict for GT in state 94 resolved as shift
WARNING: shift/reduce conflict for LE in state 94 resolved as shift
WARNING: shift/reduce conflict for GE in state 94 resolved as shift
WARNING: shift/reduce conflict for EQ in state 94 resolved as shift
WARNING: shift/reduce conflict for NE in state 94 resolved as shift
WARNING: shift/reduce conflict for OR in state 94 resolved as shift
WARNING: shift/reduce conflict for AND in state 94 resolved as shift
WARNING: shift/reduce conflict for NOT in state 94 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 97 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 97 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 97 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 97 resolved as shift
WARNING: shift/reduce conflict for MOD in state 97 resolved as shift
WARNING: shift/reduce conflict for LT in state 97 resolved as shift
WARNING: shift/reduce conflict for GT in state 97 resolved as shift
WARNING: shift/reduce conflict for LE in state 97 resolved as shift
WARNING: shift/reduce conflict for GE in state 97 resolved as shift
WARNING: shift/reduce conflict for EQ in state 97 resolved as shift
WARNING: shift/reduce conflict for NE in state 97 resolved as shift
WARNING: shift/reduce conflict for OR in state 97 resolved as shift
WARNING: shift/reduce conflict for AND in state 97 resolved as shift
WARNING: shift/reduce conflict for NOT in state 97 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 98 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 98 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 98 resolved as shift
WARNING: shift/reduce conflict for MOD in state 98 resolved as shift
WARNING: shift/reduce conflict for LT in state 98 resolved as shift
WARNING: shift/reduce conflict for GT in state 98 resolved as shift
WARNING: shift/reduce conflict for LE in state 98 resolved as shift
WARNING: shift/reduce conflict for GE in state 98 resolved as shift
WARNING: shift/reduce conflict for EQ in state 98 resolved as shift
WARNING: shift/reduce conflict for NE in state 98 resolved as shift
WARNING: shift/reduce conflict for OR in state 98 resolved as shift
WARNING: shift/reduce conflict for AND in state 98 resolved as shift
WARNING: shift/reduce conflict for NOT in state 98 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 99 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 99 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 99 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 99 resolved as shift
WARNING: shift/reduce conflict for MOD in state 99 resolved as shift
WARNING: shift/reduce conflict for LT in state 99 resolved as shift
WARNING: shift/reduce conflict for GT in state 99 resolved as shift
WARNING: shift/reduce conflict for LE in state 99 resolved as shift
WARNING: shift/reduce conflict for GE in state 99 resolved as shift
WARNING: shift/reduce conflict for EQ in state 99 resolved as shift
WARNING: shift/reduce conflict for NE in state 99 resolved as shift
WARNING: shift/reduce conflict for OR in state 99 resolved as shift
WARNING: shift/reduce conflict for AND in state 99 resolved as shift
WARNING: shift/reduce conflict for NOT in state 99 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 100 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 100 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 100 resolved as shift
WARNING: shift/reduce conflict for MOD in state 100 resolved as shift
WARNING: shift/reduce conflict for LT in state 100 resolved as shift
WARNING: shift/reduce conflict for GT in state 100 resolved as shift
WARNING: shift/reduce conflict for LE in state 100 resolved as shift
WARNING: shift/reduce conflict for GE in state 100 resolved as shift
WARNING: shift/reduce conflict for EQ in state 100 resolved as shift
WARNING: shift/reduce conflict for NE in state 100 resolved as shift
WARNING: shift/reduce conflict for OR in state 100 resolved as shift
WARNING: shift/reduce conflict for AND in state 100 resolved as shift
WARNING: shift/reduce conflict for NOT in state 100 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 101 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 101 resolved as shift
WARNING: shift/reduce conflict for MOD in state 101 resolved as shift
WARNING: shift/reduce conflict for LT in state 101 resolved as shift
WARNING: shift/reduce conflict for GT in state 101 resolved as shift
WARNING: shift/reduce conflict for LE in state 101 resolved as shift
WARNING: shift/reduce conflict for GE in state 101 resolved as shift
WARNING: shift/reduce conflict for EQ in state 101 resolved as shift
WARNING: shift/reduce conflict for NE in state 101 resolved as shift
WARNING: shift/reduce conflict for OR in state 101 resolved as shift
WARNING: shift/reduce conflict for AND in state 101 resolved as shift
WARNING: shift/reduce conflict for NOT in state 101 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 102 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 102 resolved as shift
WARNING: shift/reduce conflict for MOD in state 102 resolved as shift
WARNING: shift/reduce conflict for LT in state 102 resolved as shift
WARNING: shift/reduce conflict for GT in state 102 resolved as shift
WARNING: shift/reduce conflict for LE in state 102 resolved as shift
WARNING: shift/reduce conflict for GE in state 102 resolved as shift
WARNING: shift/reduce conflict for EQ in state 102 resolved as shift
WARNING: shift/reduce conflict for NE in state 102 resolved as shift
WARNING: shift/reduce conflict for OR in state 102 resolved as shift
WARNING: shift/reduce conflict for AND in state 102 resolved as shift
WARNING: shift/reduce conflict for NOT in state 102 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 103 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 103 resolved as shift
WARNING: shift/reduce conflict for MOD in state 103 resolved as shift
WARNING: shift/reduce conflict for LT in state 103 resolved as shift
WARNING: shift/reduce conflict for GT in state 103 resolved as shift
WARNING: shift/reduce conflict for LE in state 103 resolved as shift
WARNING: shift/reduce conflict for GE in state 103 resolved as shift
WARNING: shift/reduce conflict for EQ in state 103 resolved as shift
WARNING: shift/reduce conflict for NE in state 103 resolved as shift
WARNING: shift/reduce conflict for OR in state 103 resolved as shift
WARNING: shift/reduce conflict for AND in state 103 resolved as shift
WARNING: shift/reduce conflict for NOT in state 103 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 104 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 104 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 104 resolved as shift
WARNING: shift/reduce conflict for MOD in state 104 resolved as shift
WARNING: shift/reduce conflict for LT in state 104 resolved as shift
WARNING: shift/reduce conflict for GT in state 104 resolved as shift
WARNING: shift/reduce conflict for LE in state 104 resolved as shift
WARNING: shift/reduce conflict for GE in state 104 resolved as shift
WARNING: shift/reduce conflict for EQ in state 104 resolved as shift
WARNING: shift/reduce conflict for NE in state 104 resolved as shift
WARNING: shift/reduce conflict for OR in state 104 resolved as shift
WARNING: shift/reduce conflict for AND in state 104 resolved as shift
WARNING: shift/reduce conflict for NOT in state 104 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 105 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 105 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 105 resolved as shift
WARNING: shift/reduce conflict for MOD in state 105 resolved as shift
WARNING: shift/reduce conflict for LT in state 105 resolved as shift
WARNING: shift/reduce conflict for GT in state 105 resolved as shift
WARNING: shift/reduce conflict for LE in state 105 resolved as shift
WARNING: shift/reduce conflict for GE in state 105 resolved as shift
WARNING: shift/reduce conflict for EQ in state 105 resolved as shift
WARNING: shift/reduce conflict for NE in state 105 resolved as shift
WARNING: shift/reduce conflict for OR in state 105 resolved as shift
WARNING: shift/reduce conflict for AND in state 105 resolved as shift
WARNING: shift/reduce conflict for NOT in state 105 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 106 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 106 resolved as shift
WARNING: shift/reduce conflict for MOD in state 106 resolved as shift
WARNING: shift/reduce conflict for LT in state 106 resolved as shift
WARNING: shift/reduce conflict for GT in state 106 resolved as shift
WARNING: shift/reduce conflict for LE in state 106 resolved as shift
WARNING: shift/reduce conflict for GE in state 106 resolved as shift
WARNING: shift/reduce conflict for EQ in state 106 resolved as shift
WARNING: shift/reduce conflict for NE in state 106 resolved as shift
WARNING: shift/reduce conflict for OR in state 106 resolved as shift
WARNING: shift/reduce conflict for AND in state 106 resolved as shift
WARNING: shift/reduce conflict for NOT in state 106 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 107 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 107 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 107 resolved as shift
WARNING: shift/reduce conflict for MOD in state 107 resolved as shift
WARNING: shift/reduce conflict for LT in state 107 resolved as shift
WARNING: shift/reduce conflict for GT in state 107 resolved as shift
WARNING: shift/reduce conflict for LE in state 107 resolved as shift
WARNING: shift/reduce conflict for GE in state 107 resolved as shift
WARNING: shift/reduce conflict for EQ in state 107 resolved as shift
WARNING: shift/reduce conflict for NE in state 107 resolved as shift
WARNING: shift/reduce conflict for OR in state 107 resolved as shift
WARNING: shift/reduce conflict for AND in state 107 resolved as shift
WARNING: shift/reduce conflict for NOT in state 107 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 108 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 108 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 108 resolved as shift
WARNING: shift/reduce conflict for MOD in state 108 resolved as shift
WARNING: shift/reduce conflict for LT in state 108 resolved as shift
WARNING: shift/reduce conflict for GT in state 108 resolved as shift
WARNING: shift/reduce conflict for LE in state 108 resolved as shift
WARNING: shift/reduce conflict for GE in state 108 resolved as shift
WARNING: shift/reduce conflict for EQ in state 108 resolved as shift
WARNING: shift/reduce conflict for NE in state 108 resolved as shift
WARNING: shift/reduce conflict for OR in state 108 resolved as shift
WARNING: shift/reduce conflict for AND in state 108 resolved as shift
WARNING: shift/reduce conflict for NOT in state 108 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 109 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 109 resolved as shift
WARNING: shift/reduce conflict for MOD in state 109 resolved as shift
WARNING: shift/reduce conflict for LT in state 109 resolved as shift
WARNING: shift/reduce conflict for GT in state 109 resolved as shift
WARNING: shift/reduce conflict for LE in state 109 resolved as shift
WARNING: shift/reduce conflict for GE in state 109 resolved as shift
WARNING: shift/reduce conflict for EQ in state 109 resolved as shift
WARNING: shift/reduce conflict for NE in state 109 resolved as shift
WARNING: shift/reduce conflict for OR in state 109 resolved as shift
WARNING: shift/reduce conflict for AND in state 109 resolved as shift
WARNING: shift/reduce conflict for NOT in state 109 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 110 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 110 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 110 resolved as shift
WARNING: shift/reduce conflict for MOD in state 110 resolved as shift
WARNING: shift/reduce conflict for LT in state 110 resolved as shift
WARNING: shift/reduce conflict for GT in state 110 resolved as shift
WARNING: shift/reduce conflict for LE in state 110 resolved as shift
WARNING: shift/reduce conflict for GE in state 110 resolved as shift
WARNING: shift/reduce conflict for EQ in state 110 resolved as shift
WARNING: shift/reduce conflict for NE in state 110 resolved as shift
WARNING: shift/reduce conflict for OR in state 110 resolved as shift
WARNING: shift/reduce conflict for AND in state 110 resolved as shift
WARNING: shift/reduce conflict for NOT in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 114 resolved as shift
